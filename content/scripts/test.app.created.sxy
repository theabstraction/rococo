(' #file.type rococo)

(' #include 
	"!scripts/types.sxy"
	"!scripts/mplat_sxh.sxy"
	"!scripts/mplat_types.sxy"
)

(namespace EntryPoint)
	(alias Main EntryPoint.Main)
	
(using Rococo)
(using Rococo.Graphics)
(using Rococo.Entities)
(using Sys.Type)
(using Sys.Maths)

(struct Material
	(Vec2 indexAndShine)
)

(struct Point
	(Vec2 position)
	(Vec2i uv)
	(Float64 alpha)
	(Material material)
	(Bool isMirrored)
	(Int64 masterIndex)
)

(struct GlobalState
	(Sys.IDog dog)
	(array Point points)
	(array Sys.ICat cats)
	(IString dogName)
	(IString squirrelName)
	(IString catName)
	(Float64 age)
	(Vec3 position)
	(Matrix4x4 world)
	(Bool isActive)
)

(method GlobalState.Construct : 
)

(function GlobalStateInit (GlobalState gs) -> :
	(array Point points 2)
	(gs.points = points)

	(array Sys.ICat cats 2)
	(gs.cats = cats)
	(gs.points.Push Point ((5 7)(0 1) 0.75((7 8)) true 17))
	(gs.points.Push Point ((8 9)(1 0) 0.25((6 5)) false 78))

	(Sys.ICat cat (Sys.NewCat))
	
	(gs.cats.Push cat)
	(gs.cats.Push cat)

	(IString dogName = NullString)
	(IStringBuilder squirrelName = (NewParagraphBuilder))
	(#build squirrelName "Geoff")

	(Sys.IDog dog (Sys.NewDog))
	(gs.dog = dog)
	(gs.dogName = dogName)
	(gs.squirrelName = squirrelName)

	(gs.catName = "Meow-Meow")

	(gs.age = 17.6)

	(gs.world =
		(1 0 0 0)
		(0 1 0 0)
		(0 0 1 0)
		(0 0 0 1)
	)

	(gs.position = 1.4 2.5 7.6)

	(gs.isActive = true)
	
	(IStringBuilder sb)
	
	(Matrix4x4 m)
	(m.r0.x = 1.0)
)

(class Dog (defines Sys.IDog)
	(Float32 barkDecibels)
	(Int32 barkHz)
	(Int64 barkWatts)
	(Float64 bitePressureNewtons)
)

(method Dog.Construct :
)

(method Dog.Init -> :
	(this.barkDecibels = 120)
	(this.barkHz = 4000)
	(this.barkWatts = 20)
	(this.bitePressureNewtons = 9050)
)

(factory Sys.NewDog Sys.IDog :
	(construct Dog)
)

(class Cat (defines Sys.ICat)
	(Float32 mewDecibels)
	(Int32 mewkHz)
	(Int64 mewWatts)
	(Float64 bitePressureNewtons)
	(Pointer pKitten)
)

(method Cat.Construct :
	(this.Init)
)

(method Cat.Init -> :
	(this.mewDecibels = 115)
	(this.mewkHz = 8020)
	(this.mewWatts = 15)
	(this.bitePressureNewtons = 9050)
)

(factory Sys.NewCat Sys.ICat :
	(construct Cat)
)

(class Gorilla (defines Sys.IGorilla)
	(attribute not-serialized)
	(Int32 age)
)

(method Gorilla.Construct :
	(this.age = 20)
)

(method Gorilla.Age -> (Int32 age) :
	(age = this.age)
)

(factory Sys.NewGorilla Sys.IGorilla :
	(construct Gorilla)
)

(struct GorillaData
	(Sys.IGorilla gorilla)
)

(function Validate (Bool isOk) -> :
	(if (not isOk)
		(debug)
	)
)

(struct ListInt32
	(list Int32 elements)
)

(function TestNullListTransfer -> :
	(Sys.Reflection.SexyAssetFile assetFile = "!scripts/test/asset.sxya")

	(ListInt32 a)
	(reflect SaveAsset assetFile a)
	
	(ListInt32 b)
	(reflect LoadAsset assetFile b)

	(Validate (b.elements.Length == 0))
)

(function TestEmptyListTransfer -> :
	(Sys.Reflection.SexyAssetFile assetFile = "!scripts/test/asset.sxya")

	(ListInt32 a)
	(list Int32 newElements)
	(a.elements = newElements)

	(reflect SaveAsset assetFile a)
	
	(ListInt32 b)
	(reflect LoadAsset assetFile b)

	(Validate (b.elements.Length == 0))
)

(function TestOneItemListTransfer -> :
	(Sys.Reflection.SexyAssetFile assetFile = "!scripts/test/asset.sxya")

	(ListInt32 a)
	(list Int32 newElements)
	(a.elements = newElements)
	(a.elements.Append 7)

	(reflect SaveAsset assetFile a)
	
	(ListInt32 b)
	(reflect LoadAsset assetFile b)

	(Validate (b.elements.Length == 1))

	(node n = b.elements.Head)

	(Validate (n.Value == 7))
)

(function TestTwoItemListTransfer -> :
	(Sys.Reflection.SexyAssetFile assetFile = "!scripts/test/asset.sxya")

	(ListInt32 a)
	(list Int32 newElements)
	(a.elements = newElements)
	(a.elements.Append 7)
	(a.elements.Append 9)

	(reflect SaveAsset assetFile a)
	
	(ListInt32 b)
	(reflect LoadAsset assetFile b)

	(Validate (b.elements.Length == 2))

	(node n = b.elements.Head)

	(Validate (n.Value == 7))

	(node next = n.Next)

	(Validate (next.Value == 9))
)

(function TestInt32Transfer -> :
	(Sys.Reflection.SexyAssetFile assetFile = "!scripts/test/asset.sxya")

	(Vec2i v = 6 7)
	(reflect SaveAsset assetFile v)
	
	(Vec2i w)
	(reflect LoadAsset assetFile w)

	(Validate ((w.x == 6) and (w.y == 7)))
)

(function TestFloat32Transfer -> :
	(Sys.Reflection.SexyAssetFile assetFile = "!scripts/test/asset.sxya")

	(Vec2 v = 6 7)
	(reflect SaveAsset assetFile v)
	
	(Vec2 w)
	(reflect LoadAsset assetFile w)

	(Validate ((w.x == 6) and (w.y == 7)))
)

(struct MapStringToInt64
	(map IString Int64 elements)
)

(function TestNullMapTransfer -> :
	(Sys.Reflection.SexyAssetFile assetFile = "!scripts/test/asset.sxya")

	(MapStringToInt64 a)
	(reflect SaveAsset assetFile a)
	
	(MapStringToInt64 b)
	(reflect LoadAsset assetFile b)

	(Int32 length)
	(length = b.elements.Length)
	(Validate (length == 0))	
)

(function TestEmptyMapTransfer -> :
	(Sys.Reflection.SexyAssetFile assetFile = "!scripts/test/asset.sxya")

	(MapStringToInt64 a)
	(map IString Int64 temp)
	(a.elements = temp)
	(reflect SaveAsset assetFile a)
	
	(MapStringToInt64 b)
	(reflect LoadAsset assetFile b)

	(Int32 length)
	(length = b.elements.Length)
	(Validate (length == 0))	
)

(function TestOneEntryMapTransfer -> :
	(Sys.Reflection.SexyAssetFile assetFile = "!scripts/test/asset.sxya")

	(MapStringToInt64 a)
	(map IString Int64 temp)
	(a.elements = temp)
	(temp.Insert "apple" 8)
	(reflect SaveAsset assetFile a)

	(MapStringToInt64 b)
	(reflect LoadAsset assetFile b)

	(Int32 length)
	(length = b.elements.Length)
	(Validate (length == 1))	

	(node apple = (b.elements "apple"))

	(Int64 appleValue = apple.Value)
	(Validate (appleValue == 8))
)

(function TestTwoEntryMapTransfer -> :
	(Sys.Reflection.SexyAssetFile assetFile = "!scripts/test/asset.sxya")

	(MapStringToInt64 a)
	(map IString Int64 temp)
	(a.elements = temp)
	(temp.Insert "apple" 8)
	(temp.Insert "orange" 5)
	(reflect SaveAsset assetFile a)

	(MapStringToInt64 b)
	(reflect LoadAsset assetFile b)

	(Int32 length)
	(length = b.elements.Length)
	(Validate (length == 2))	

	(node apple = (b.elements "apple"))

	(Int64 appleValue = apple.Value)
	(Validate (appleValue == 8))

	(node orange = (b.elements "orange"))

	(Int64 orangeValue = orange.Value)
	(Validate (orangeValue == 5))
)

(struct Int32Array
	(array Int32 elements)
)

(function TestEmptyArrayTransfer -> :
	(Sys.Reflection.SexyAssetFile assetFile = "!scripts/test/asset.sxya")

	(Int32Array a)
	(array Int32 newElements 1)
	(a.elements = newElements)

	(Int32Array b)
	(reflect SaveAsset assetFile a)
	(reflect LoadAsset assetFile b)

	(Int32 length)
	(length = b.elements.Length)
	(Validate (length == 0))

	(Int32 capacity = b.elements.Capacity)
	(Validate (capacity > 0))	
)

(function TestOneItemArrayTransfer -> :
	(Sys.Reflection.SexyAssetFile assetFile = "!scripts/test/asset.sxya")

	(Int32Array a)
	(array Int32 newElements 1)
	(a.elements = newElements)
	(a.elements.Push 7)

	(Int32Array b)
	(reflect SaveAsset assetFile a)
	(reflect LoadAsset assetFile b)

	(Int32 length)
	(length = b.elements.Length)
	(Validate (length == 1))

	(Int32 capacity = b.elements.Capacity)
	(Validate (capacity > 0))	

	(Int32 value = (a.elements 0))

	(Validate (value == 7))
)

(function TestTwoItemArrayTransfer -> :
	(Sys.Reflection.SexyAssetFile assetFile = "!scripts/test/asset.sxya")

	(Int32Array a)
	(array Int32 newElements 1)
	(a.elements = newElements)
	(a.elements.Push 7)
	(a.elements.Push 8)

	(Int32Array b)
	(reflect SaveAsset assetFile a)
	(reflect LoadAsset assetFile b)

	(Int32 length)
	(length = b.elements.Length)
	(Validate (length == 2))

	(Int32 capacity = b.elements.Capacity)
	(Validate (capacity > 0))	

	(Int32 value0 = (a.elements 0))

	(Validate (value0 == 7))

	(Int32 value1 = (a.elements 1))

	(Validate (value1 == 8))
)

(function TestNullArrayTransfer -> :
	(Sys.Reflection.SexyAssetFile assetFile = "!scripts/test/asset.sxya")

	(Int32Array a)
	(Int32Array b)
	(reflect SaveAsset assetFile a)
	(reflect LoadAsset assetFile b)
	
	(Int32 length)
	(length = b.elements.Length)
	(Validate (length == 0))

	(Int32 capacity = b.elements.Capacity)
	(Validate (capacity == 0))	
)

(function TestGlobalStateTransfer -> :
	(Sys.Reflection.SexyAssetFile assetFile = "!scripts/test/asset.sxya")
	
	(GlobalState globalState)

	(GlobalStateInit globalState)
	
	// save the global state to !scripts/test/asset.sxya
	(reflect SaveAsset assetFile globalState)

	// load the global state from !scripts/test/asset.sxya
	(GlobalState copiedState)



	(reflect LoadAsset assetFile copiedState)
	
	(Point p0)
	(p0 = (copiedState.points 0))
	
	(Point p1)
	(p1	= (copiedState.points 1))
	
	(Sys.ICat cat0)
	(cat0 = (copiedState.cats 0))
	
	(Sys.ICat cat1)
	(cat1 = (copiedState.cats 1))
	
	(debug)
)

(function TestNotSerialized -> :
	(Sys.Reflection.SexyAssetFile assetFile = "!scripts/test/asset.sxya")
	(Sys.IGorilla newGorilla (Sys.NewGorilla))

	(GorillaData a)
	(a.gorilla = newGorilla)

	(reflect SaveAsset assetFile a)

	(GorillaData b)
	(reflect LoadAsset assetFile b)

	(Validate (a.gorilla ?))
	(Validate (not (b.gorilla ?)))
)

(function Main (Int32 id)->(Int32 exitCode):
	(IMaterialBuilder matBuilder (MaterialBuilder))
	(matBuilder.SetMaterialMacro "!textures/hv/materials/hi-rez/" )
	(matBuilder.LoadMaterialArray "#m/" 1024)
	
	(IHQFonts fonts (HQFonts))
	(fonts.Build (#HQFontEditorFont))
	(fonts.SetFaceName "Courier New")
	(fonts.MakeBold)
	(fonts.AddRange 32 127)
	(fonts.AddCharacters "£")
	(fonts.SetHeight 24)
	(fonts.Commit)

	(fonts.Build (#HQFontTitleFont))
	(fonts.SetFaceName "Tahoma")
	//(fonts.MakeBold)
	(fonts.AddRange 32 127)
	(fonts.SetHeight 80)
	(fonts.Commit)
	
	(fonts.Build (#HQFontDebuggerFont))
	(fonts.SetFaceName "Consolas")
	//(fonts.MakeBold)
	(fonts.AddRange 32 127)
	(fonts.AddCharacters "£")
	(fonts.SetHeight 28)
	(fonts.Commit)

	(fonts.Build (#HQFontInfoFont))
	(fonts.SetFaceName "Times New Roman")
	(fonts.AddRange 32 127)
	(fonts.AddCharacters "£")
	(fonts.SetHeight 28)
	(fonts.Commit)

	(TestNotSerialized)

	(TestNullListTransfer)
	(TestEmptyListTransfer)
	(TestOneItemListTransfer)
	(TestTwoItemListTransfer)
	
	(TestNullMapTransfer)
	(TestEmptyMapTransfer)
	(TestOneEntryMapTransfer)
	(TestTwoEntryMapTransfer)

	(TestNullArrayTransfer)
	(TestEmptyArrayTransfer)
	(TestOneItemArrayTransfer)
	(TestTwoItemArrayTransfer)
	
	(TestInt32Transfer)
	(TestFloat32Transfer)

	(TestGlobalStateTransfer)
)