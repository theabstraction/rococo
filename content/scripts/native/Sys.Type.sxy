(using Sys.Type)
(using Sys.Reflection)

(interface Sys.Type.IException
	(ErrorCode -> (Int32 errorCode))
	(Message -> (IString message))
)

(function Throw (Int32 errorCode) (IString message) -> :
	(IException ex (Sys.Type.NewException errorCode message))
	(throw ex)
)

(function ThrowIndexNegative -> :
	(Throw -1 "Argument index was negative")
)

(function ThrowIndexExceededBounds -> :
	(Throw -1 "Argument index was higher than the collection upper bound.")
)

(function ValidateSubscriptRange (Int32 i) (Int32 min) (Int32 max) (IString message) -> :
	(if ((i < min) or (i > max)) (Sys.Throw -1 message))
)

(alias ValidateSubscriptRange Sys.ValidateSubscriptRange)

(class GenericException
	(implements IException)
	(Int32 errorCode)
	(IString message)
)

(method GenericException.ErrorCode -> (Int32 errorCode):
	(errorCode = this.errorCode)
)

(method GenericException.Message -> (IString message):
	(message = this.message)
)

(method GenericException.Construct (Int32 errorCode)(IString message): 
	(this.errorCode = errorCode)
	(this.message = message)
)

(factory Sys.Type.NewException Sys.Type.IException (Int32 errorCode)(IString message):
	(construct GenericException errorCode message)
)

(alias Throw Sys.Throw)
(alias ThrowIndexNegative Sys.ThrowIndexNegative)
(alias ThrowIndexExceededBounds Sys.ThrowIndexExceededBounds)

(function Print (IString s) -> (Int32 charCount):
	(Sys.Type.NativePrint s.Buffer -> charCount)
)

(alias Print Sys.Print)

(function PublishAPI -> :
	// requires user directory has folder 'sexydoc'
	(Sys.Native.PublishAPI)
)

(alias PublishAPI Sys.PublishAPI)

(archetype Sys.Type.VoidToVoid -> )

(interface Sys.ICoroutine
	(attribute essential)
	(Run ->)
)

(struct RGBAf32x4 
	(Float32 r g b a)
)

(alias RGBAf32x4 Sys.Type.RGBA)

// Coroutines start here - copied and pasted from the coroutine.sxh.sxy file */
(interface Sys.ICoroutineControl
	(attribute essential)
	(Add (Sys.ICoroutine coroutine) -> (Int64 id))
	(Continue  -> (Int64 id))
	(ContinueSpecific (Int64 id) -> (Bool isComplete))
	(Release (Int64 id) -> (Bool success))
	(ReleaseAll -> )
)

(class ProxyICoroutineControl (implements Sys.ICoroutineControl) (Pointer hObject))

(method ProxyICoroutineControl.Construct (Pointer hObject): (this.hObject = hObject))
(method ProxyICoroutineControl.Add (Sys.ICoroutine coroutine) -> (Int64 id) : (Sys.Native.ICoroutineControlAdd this.hObject coroutine -> id))
(method ProxyICoroutineControl.Continue  -> (Int64 id) : (Sys.Native.ICoroutineControlContinue this.hObject  -> id))
(method ProxyICoroutineControl.ContinueSpecific (Int64 id) -> (Bool isComplete) : (Sys.Native.ICoroutineControlContinueSpecific this.hObject id -> isComplete))
(method ProxyICoroutineControl.Release (Int64 id) -> (Bool success) : (Sys.Native.ICoroutineControlRelease this.hObject id -> success))
(method ProxyICoroutineControl.ReleaseAll -> : (Sys.Native.ICoroutineControlReleaseAll this.hObject -> ))

	
(factory Sys.Coroutines Sys.ICoroutineControl  : /* requires PIP.addCoroutineLib = true or similar mechanism to add in nativelib */
	(Pointer pObject = (Sys.Native.GetHandleForICoroutineControl0 ))
	(construct ProxyICoroutineControl pObject)
)

// Coroutines end here

// initializer lists Sexy style // Usage (#PushStructArray <array-name> <element-type>  element0 ... elementN)
(macro Sys.PushStructArray in out
	(IStringBuilder sb = NewPathBuilder)
	(Int32 nInputChildren = ((in.ChildCount) - 3))
	(IExpression arrayName = (in 1))
	(IExpression elementType = (in 2))
	
	(for (Int32 j = 3)(j < nInputChildren)(j += 1)
		(sb.Clear)
		(arrayName.AppendTextTo sb)
		(sb ".Push")
		(IExpressionBuilder pushExpression = out.AddCompound)
		(pushExpression.AddAtomic sb) 
		(pushExpression.Copy elementType) // jth statement is (<array-name>.Push <element_type>
		(Int32 memberwiseIndex = j)
		(pushExpression.Copy (in memberwiseIndex)) // jth statement is (<array-name>.Push <element_type> <construct args>)
	)
)

(function AppendWithCharacterSubstitutions (IStringBuilder builder) (IString text)(IString substituteThis)(IString withThat) -> :
	(if (substituteThis.Length != 1)
		(Sys.Throw 0 "Expecting the [substituteThis] string to be of length 1, i.e one ascii character")
	)
	
	(Int32 substituteThisChar = (substituteThis 0))
	
	(for (Int32 i = 0)(i < text.Length)(i += 1)
		(Int32 c = (text i))
		(if (c == substituteThisChar)
			(builder withThat)
		else
			(builder.AppendChar c)
		)
	)
)

(function BuildOptionalType (IExpression in)(IExpressionBuilder out) -> :
	(IExpression sFQType = (in 1))

	(IStringBuilder mangledTypeName = (Sys.Type.NewTokenBuilder))
	(AppendWithCharacterSubstitutions mangledTypeName sFQType.Text "." "")
	
	(IStringBuilder structName = (Sys.Type.NewTokenBuilder))
	(structName "Optional")
	(structName mangledTypeName)

	(out.AddAtomic "struct")	
	(out.AddAtomic structName)
	(IExpressionBuilder fieldSpec = out.AddCompound)
	(fieldSpec.AddAtomic sFQType.Text)
	(fieldSpec.AddAtomic "value")
	(IExpressionBuilder boolSpec = out.AddCompound)
	(boolSpec.AddAtomic "Bool")
	(boolSpec.AddAtomic "isValid")
)

(namespace Sys)
(namespace Sys.Type)
(namespace Sys.Type.Macros)

(alias AppendWithCharacterSubstitutions Sys.Type.Macros.AppendWithCharacterSubstitutions)
(alias BuildOptionalType Sys.Type.Macros.BuildOptionalType)	

(macro Sys.optional in out
	(Sys.ValidateSubscriptRange in.ChildCount 2 2 "Usage: (##Sys.optional <fully-qualified-type>)")	
	(BuildOptionalType in out)
)

(strong SysTypeRGBAb (Int32))
(alias SysTypeRGBAb Sys.Type.RGBAb)

(struct SysTypeRef
	(Pointer hComponent)
	(Pointer hLife)
)
(alias SysTypeRef Sys.Type.ComponentRef)

(strong ROID (Int64))
(alias ROID Sys.Type.ROID)

