(' #file.type sexystudio.solution)

/*
	Given that a sexy mainscript can explicitly #import or #include other sexy files, we need SexyStudio to read those directives and deduce what files to pull in for type interfence
	SexyStudio is currently unable to parse C++, so it needs declarations to be generated that represent the C++.
	
	Here we bind the declaration files to files included and imported by sxy files. If you get these incorrect then type inference of native function calls will be limited
	
	The format is 
	
	(imported <import-name> -> <declaration-name>
	
	and
	
	(included <include-name> -> (declaration-name>
    
	Where <import-name> is a string literal matching an import package name in a sxy file
	and <include-name> is a string literal matching an include ping path in a sxy file
	and <declaration-name> is a string literal that specifies the declarations that populate the SexyStudio object browser.
	
	When a sexy project file is opened by SexyStudio the include and import expressions are scanned for matching names. Only one set of declarations will be used. 
	Once a match is found SexyStudio will cease to scan for more matches, with the highest expressions in the file taking priority over those lower down in the list
*/

(imported mhost -> "!scripts/mhost/declarations.sxy")
(included "!scripts/interop/rococo/mplat_gui_sxh.sxy" -> "!scripts/mplat/pane_declarations.sxy")
(included "!scripts/interop/rococo/mplat_sxh.sxy" -> "!scripts/mplat/platform_declarations.sxy")
(included "!scripts/interop/rococo/mplat_config_sxh.sxy" -> "!scripts/mplat/platform_declarations.sxy")

// Here we map package names to package paths.
(package mhost -> "!packages/mhost_1000.sxyz") // This will allow sexystudio to parse (' #import mhost)

// Specify which package subfolder contains the source folders for the package
// (map-prefix-to-source <file-name-prefix> <source-folder>) -> resolve path name '[package]:$file-name-prefix/root/filename.sxy' to 'content\..\packages\<source-folder>\root\filename.sxy'

(map-prefix-to-source "MHost/" -> "mhost\") // Resolve path-name '[package]:MHost/subfolders/filename.sxy' to 'content\..\packages\mhost\MHost\subfolders\filename.sxy'