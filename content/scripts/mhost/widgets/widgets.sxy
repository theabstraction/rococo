(using Sys.Maths)
(using Sys.Type)
(using MHost.Graphics)
(using MHost)
(using MHost.OS)

(using Sys.Maths.I32)
(using Sys.Maths.F32)

(struct QuadColour
	(Int32 fontColour)
	(Int32 backColour)
	(Int32 tl tr bl br)
)

(struct PassEventHandlerArgs
	(IEventHandler sink)
)

(struct KeyboardCharArgs
	(Int32 asciiValue)
	(IEventHandler source)
)

(struct KeyboardVKeyArgs
	(Bool isUp)
	(Int32 virtualKeyCode)
	(IEventHandler source)
)

(struct BoolArgs
	(Bool value)
	(IEventHandler source)
)

(alias BoolArgs MHost.BoolArgs)
(alias KeyboardCharArgs MHost.KeyboardCharArgs)
(alias KeyboardVKeyArgs MHost.KeyboardVKeyArgs)
(alias PassEventHandlerArgs MHost.PassEventHandlerArgs)

(alias QuadColour MHost.Graphics.QuadColour)

(interface MHost.IEventHandler 
	(attribute dispatch)
	
	/* known optional methods called by dispatch on this interface (these should be commented out, later versions of sexy may implement optional method syntax)
	(OnMouseDown (MouseClickArgs args) -> )
	(OnMouseUp (MouseClickArgs args) -> )
	(SetKeyboardFocus (PassEventHandlerArgs peh) ->)
	(OnAsciiChar (KeyboardCharArgs args)->)
	(OnVirtualKey (KeyboardVKeyArgs args)->)
	(SetHasFocus (BoolArgs args)->)
	 */
)

(function ShrinkRectf (Rectf inputRect)(Rectf outputRect)(Float32 ds)-> :
	(outputRect = inputRect)
	(outputRect.left += ds)
	(outputRect.top += ds)
	(outputRect.right -= ds)
	(outputRect.bottom -= ds)
)

(alias ShrinkRectf MHost.ShrinkRectf)

(interface MHost.Graphics.IControl
	(GetRect (Rectf rect)->)
	(GetEventHandler -> (IEventHandler handler))
	(Render (IGui gui)->)
)

(struct MenuSelectArgs
	(Int32 menuIndex)
	(IString menuText)
	(IMenu source)
)

(alias MenuSelectArgs MHost.Graphics.MenuSelectArgs)

(struct ButtonClickArgs
	(IString text)
	(IControl button)
)

(alias ButtonClickArgs MHost.Graphics.ButtonClickArgs)

(struct MouseClickArgs
	(Vec2 pos)
	(IEventHandler eventHandler)
	(Int32 button)
)

(alias MouseClickArgs MHost.Graphics.MouseClickArgs)

(interface MHost.Graphics.IMenu (extends MHost.Graphics.IControl)
	(AddTextItem (IString text)(IWidgetContext wc)->(Int32 id))
	(SetColourScheme (QuadColour itemLow)(QuadColour itemHigh)(QuadColour bkLow)(QuadColour bkHigh)->)
	(SetStyle (Int32 textAlignment)(Float32 borderThickness)(IString fontFamily)->)
	(LayoutFixedRect (Rectf rect)(IGui gui)->)
)

(function UseDefaultColourScheme (QuadColour low)(QuadColour high)-> :
	(low  = 0xFFA0A0A0 0xFF000000 0xFF606060 0xFF808080 0xFFA0A0A0 0xFFC0C0C0)
	(high = 0xFFFFFFFF 0xFF000000 0xFF808080 0xFFA0A0A0 0xFFC0C0C0 0xFFFFFFFF)
)

(alias UseDefaultColourScheme MHost.Graphics.UseDefaultColourScheme)

(using MPlat)

(function DrawUpTriangle (IGui g)(Rectf bounds)(Int32 colour)-> :
	(Float32 xC = (0.5 * (bounds.left + bounds.right)))
	
	(BaseVertexData nFont = (0 0) 0)
	(SpriteVertexData noSprite = 1 0 0 0)
	
	(GuiTriangle tri = 
		((xC bounds.top)				nFont noSprite colour)
		((bounds.left bounds.bottom)	nFont noSprite colour)
		((bounds.right bounds.bottom)	nFont noSprite colour)
	)
	
	(g.DrawTriangle tri)
)

(function DrawDownTriangle (IGui g)(Rectf bounds)(Int32 colour)-> :
	(Float32 xC = (0.5 * (bounds.left + bounds.right)))
	
	(BaseVertexData nFont = (0 0) 0)
	(SpriteVertexData noSprite = 1 0 0 0)
	
	(GuiTriangle tri = 
		((xC bounds.bottom)			nFont noSprite colour)
		((bounds.left bounds.top)	nFont noSprite colour)
		((bounds.right bounds.top)	nFont noSprite colour)
	)
	
	(g.DrawTriangle tri)
)

(namespace MHost.Graphics)

(alias DrawUpTriangle MHost.Graphics.DrawUpTriangle)
(alias DrawDownTriangle MHost.Graphics.DrawDownTriangle)

(function DrawStandardControlBorder (IGui gui)(Rectf rect)(Bool isEnabled)(Bool isGlowing)-> :
	(Vec2 cursorPos)
	(gui.GetCursorPos cursorPos)
	
	(if (isGlowing)
		(Int64 tickHz = (Sys.OS.ClockHz))
		(Int64 tickCount = (Sys.OS.ClockTicks))
		(Int64 ticksPerDelta = (tickHz / 145))
		(Int64 t = (tickCount / ticksPerDelta))
		(Int32 i = ((Sys.Maths.I64.ToInt32 (Sys.Maths.I64.Mod t 128)) + 127))
		(Int32 colour = (Sys.Maths.I32.FromARGB 0xFF i i i))
		
		(gui.DrawBorder rect 2 colour colour colour colour)
	else
		(if (not isEnabled)
			(gui.DrawBorder rect 1 0xFF101010 0xFF101010 0xFF101010 0xFF101010)
		else
			(if (IsPointInRect cursorPos rect)
				(gui.DrawBorder rect 1 0xFFC0C0C0 0xFFA0A0A0 0xFF808080 0xFF606060)
			else
				(gui.DrawBorder rect 1 0xFFA0A0A0 0xFF808080 0xFF606060 0xFF404040)
			)
		)
	)
)

(alias DrawStandardControlBorder MHost.Graphics.DrawStandardControlBorder)

(function GetTextColour (Rectf rect)(IGui g)(Bool isEnabled)-> (Int32 colour):
	(Vec2 cursorPos)
	(g.GetCursorPos cursorPos)
	
	(if (not isEnabled)
		(colour = 0xFF101010)
	else 
		(if (IsPointInRect cursorPos rect)
			(colour = 0xFFFFFFFF)
		else
			(colour = 0xFFC0C0C0)
		)
	)
)

(alias GetTextColour MHost.GetTextColour)

(interface MHost.Graphics.IWidgetContext
	(attribute dispatch)
)

(function EqRectfRectf (Rectf a)(Rectf b)->(Bool areEqual):
	(areEqual = (((a.left == b.left) and (a.right == b.right)) and ((a.top == b.top) and (a.bottom == b.bottom))))
)

(function GetSpanRectf (Rectf rect)(Vec2 span)-> :
	(span.x = (rect.right - rect.left))
	(span.y = (rect.bottom - rect.top))
)

(alias EqRectfRectf MHost.EqRectfRectf)
(alias GetSpanRectf MHost.GetSpanRectf)

(interface MHost.Graphics.IUIEventHandler
	(OnMouseDown (Int32 button) (Float32 x)(Float32 y) ->)
	(OnMouseMove (Float32 x)(Float32 y) ->)
	(OnMouseUp (Int32 button) (Float32 x)(Float32 y) ->)
	(OnWheel (Int32 spin) ->)
	(OnAsciiChar (Int32 asciiValue)->)
	(OnSysKey (Bool isUp) (Int32 virtualKeyCode)->)
)

(interface MHost.IScreen (extends MHost.Graphics.IUIEventHandler)
	(RenderGui (IGui g) ->)
)

(function GetCentredRect (Vec2 screenSpan) (Float32 dx)(Float32 dy)(Rectf r)-> :
	(Vec2 rectSpan = dx dy)
	(Vec2 border = screenSpan - rectSpan)
	(Vec2 halfBorder = border * 0.5)
	(r.left = halfBorder.x)
	(r.top = halfBorder.y)
	(r.right = (screenSpan.x - halfBorder.x))
	(r.bottom = (screenSpan.y - halfBorder.y))
)

(function CentreHorizontally (Rectf rect)(Rectf container)-> :
	(Float32 containerDX = (container.right - container.left))
	(Float32 childDX = (rect.right - rect.left))
	(Float32 xBorder = ((containerDX - childDX) * 0.5))
	(rect.left = (container.left + xBorder))
	(rect.right = (container.right - xBorder))
)

(function IsPointInRect (Vec2 point)(Rectf rect)->(Bool result):
	(if ((point.x > rect.left) and (point.x < rect.right))
		(if ((point.y > rect.top) and (point.y < rect.bottom))
			(result = true)
		)
	)
)

(function TranslateMouseEvent (MHost.OS.MouseEvent me)(IUIEventHandler handler)(IEventHandler modalSink)-> :
	(Float32 x = (ToFloat32 me.cursorPos.x))
	(Float32 y = (ToFloat32 me.cursorPos.y))
	
	(if (HasFlags me.buttons 0x400)
		(Int32 spin = (RightShift me.buttons 16))
		(handler.OnWheel spin)
		(return)
	)
	
	(if (modalSink ?)
		(MouseClickArgs args)
		(args.pos = x y)
		
		(if (HasFlags me.buttons 0x3FF)
			(if (HasFlags me.buttons 0x001) (args.button = 0) (modalSink.OnMouseDown args))
			(if (HasFlags me.buttons 0x002) (args.button = 0) (modalSink.OnMouseUp   args))
			(if (HasFlags me.buttons 0x004) (args.button = 1) (modalSink.OnMouseDown args))
			(if (HasFlags me.buttons 0x008) (args.button = 1) (modalSink.OnMouseUp   args))
			(if (HasFlags me.buttons 0x010) (args.button = 2) (modalSink.OnMouseDown args))
			(if (HasFlags me.buttons 0x020) (args.button = 2) (modalSink.OnMouseUp   args))
			(if (HasFlags me.buttons 0x040) (args.button = 3) (modalSink.OnMouseDown args))
			(if (HasFlags me.buttons 0x080) (args.button = 3) (modalSink.OnMouseUp   args))
			(if (HasFlags me.buttons 0x100) (args.button = 4) (modalSink.OnMouseDown args))
			(if (HasFlags me.buttons 0x200) (args.button = 4) (modalSink.OnMouseUp   args))
		else
			(args.button = 0)
			(modalSink.OnMouseMove args)
		)		
	else
		(if (HasFlags me.buttons 0x3FF)
			(if (HasFlags me.buttons 0x001) (handler.OnMouseDown 0 x y))
			(if (HasFlags me.buttons 0x002) (handler.OnMouseUp   0 x y))
			(if (HasFlags me.buttons 0x004) (handler.OnMouseDown 1 x y))
			(if (HasFlags me.buttons 0x008) (handler.OnMouseUp   1 x y))
			(if (HasFlags me.buttons 0x010) (handler.OnMouseDown 2 x y))
			(if (HasFlags me.buttons 0x020) (handler.OnMouseUp   2 x y))
			(if (HasFlags me.buttons 0x040) (handler.OnMouseDown 3 x y))
			(if (HasFlags me.buttons 0x080) (handler.OnMouseUp   3 x y))
			(if (HasFlags me.buttons 0x100) (handler.OnMouseDown 4 x y))
			(if (HasFlags me.buttons 0x200) (handler.OnMouseUp   4 x y))
		else
			(handler.OnMouseMove x y)
		)	
	)
)

(interface MHost.OS.IUIControl
	(CaptureMouse (IEventHandler handler)->)
	(ReleaseMouse (IEventHandler handler)->)
)

(alias TranslateMouseEvent MHost.OS.TranslateMouseEvent)

(function TranslateKeyboardEvent (MHost.OS.KeyboardEvent key)(IUIEventHandler handler)-> :
	(if ((not key.isUp) and (key.asciiValue != 0))
		(handler.OnAsciiChar key.asciiValue)
	)
	
	(handler.OnSysKey key.isUp key.virtualKeyCode)
)

(alias TranslateKeyboardEvent MHost.OS.TranslateKeyboardEvent)

(alias IsPointInRect MHost.Graphics.IsPointInRect)
(alias CentreHorizontally MHost.Graphics.CentreHorizontally)
(alias GetCentredRect MHost.Graphics.GetCentredRect)

(struct ValueCell
	(Sys.Type.IString text)
	(Sys.Reflection.IExpression value)
)

(alias ValueCell MHost.ValueCell)
