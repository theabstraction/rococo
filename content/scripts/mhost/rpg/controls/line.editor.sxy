(using Sys)
(using Sys.Maths)
(using Sys.Maths.F32)
(using Sys.Type)
(using Sys.MPlat)
(using Sys.Random)
(using Sys.Type.Strings)
(using MHost)
(using MHost.OS)
(using MHost.Graphics)
(using Rococo)
(using Rococo.Graphics)
(using Rococo.Audio)

(interface MHost.Graphics.ILineEditorControl (extends MHost.Graphics.IControl)
	(SetRect (IString fontName) (Rectf outerRect)-> )
	(SetText (IString text)-> )
	(GetBuilder -> (IStringBuilder text))
	(Disable ->)
	(Enable ->)
	(DisableGlow ->)
	(EnableGlow ->)
)

(class LineEditor (implements ILineEditorControl)
	(implements IEventHandler)
	(Rectf outerRect)
	(Rectf innerRect)
	(Int32 fontIndex)
	(IStringBuilder text)
	(IStringBuilder fontName)
	(Bool hasFocus)
	(Bool isEnabled)
	(Bool isGlowing)
	(IEventHandler subscriber)
)

(method LineEditor.GetBuilder -> (IStringBuilder sb) : (sb = this.text))

(method LineEditor.DisableGlow -> : (this.isGlowing = false))
(method LineEditor.EnableGlow -> : (this.isGlowing = true))

(method LineEditor.Construct (Int32 maxTextLength)(IEventHandler subscriber) -> : 
	(this.outerRect = -1 -1 -1 -1)
	(this.fontIndex = -1)
	(this.text = (StringBuilder maxTextLength))
	(this.fontName = (StringBuilder 64))
	(this.hasFocus = false)
	(this.isEnabled = true)
	(this.isGlowing = false)
	(#build this.fontName "Tahoma")
	(this.subscriber = subscriber)
)

(method LineEditor.Disable -> :
	(this.isEnabled = false)
)

(method LineEditor.Enable -> :
	(this.isEnabled = true)
)

(method LineEditor.SetHasFocus (BoolArgs args)-> :
	(this.hasFocus = args.value)
)

(method LineEditor.SetRect (IString fontName) (Rectf outerRect)-> :
	(this.outerRect = outerRect)
	(this.fontIndex = -1)
	(this.fontName.Clear)
	(#build this.fontName fontName)
	
	(Float32 dy = (this.outerRect.bottom - this.outerRect.top))
	(Float32 x = (this.outerRect.left + (dy * 0.25)))
	(Float32 x1 = (this.outerRect.right -  (dy * 0.25)))
	(Float32 y0 = (this.outerRect.top + 2))
	(Float32 y1 = (this.outerRect.bottom - 2))
	
	(this.innerRect = x y0 x1 y1)
)

(method LineEditor.GetRect (Rectf outerRect)-> :
	(outerRect = this.outerRect)
)

(struct EditBufferChangedArgs
	(IEventHandler bufferHost)
	(IString text)
)

(alias EditBufferChangedArgs MHost.Graphics.EditBufferChangedArgs)

(method LineEditor.SetText (IString text) -> :
	(this.text.Clear)
	(#build this.text text)
	
	(EditBufferChangedArgs args)
	(args.bufferHost = this)
	(args.text = text)
	(this.subscriber.OnEditUpdated args)
)

(method LineEditor.OnMouseUp (MouseClickArgs args) -> :
	(if (this.isEnabled)
		(PassEventHandlerArgs peh)
		(if (not this.hasFocus)
			(peh.sink = this)
		)
		(args.eventHandler.SetKeyboardFocus peh)
	)
)

(method LineEditor.OnAsciiChar (KeyboardCharArgs args)-> :
	(Int32 c = args.asciiValue)
	(if (c == 0x8) // backspace
		(Int32 length = this.text.Length)
		(if (length > 0)
			(length -= 1)
			(this.text.SetLength length)
		)
	else 
		(if ((c > 31) and (c < 127))
			(this.text.AppendChar args.asciiValue)
		else 
			(if (c == 13)
				(PassEventHandlerArgs peh)
				(args.source.SetKeyboardFocus peh) // Should null the source keyboard sink
			)
		)
	)
	
	(EditBufferChangedArgs args)
	(args.bufferHost = this)
	(args.text = this.text)
	(this.subscriber.OnEditUpdated args)
)

(method LineEditor.OnVirtualKey (KeyboardVKeyArgs args)-> :
)

(method LineEditor.Render (IGui g)-> :
	(if (this.fontIndex < 0)
		(Float32 dy = (this.outerRect.bottom - this.outerRect.top))
		(GetLargestFontOfFamilyLessThanHeight g this.fontName dy -> this.fontIndex)
	)
	
	(Int32 caretPos = this.text.Length)
	
	(Int32 txColour = (GetTextColour this.outerRect g this.isEnabled))
	
	(if (this.hasFocus and this.isEnabled)
		(g.DrawTextWithCaret this.innerRect (#AlignmentFlagsLeft) this.text this.fontIndex txColour this.outerRect caretPos)
	else
		(g.DrawClippedText this.innerRect (#AlignmentFlagsLeft) this.text this.fontIndex txColour this.outerRect)
	)
	
	(Vec2 cursorPos)
	(g.GetCursorPos cursorPos)
	
	(DrawStandardControlBorder g this.outerRect this.isEnabled this.isGlowing)
)

(method LineEditor.GetEventHandler -> (IEventHandler handler):
	(handler = this)
)

(factory MHost.Graphics.NewLineEditor ILineEditorControl (Int32 maxTextLength)(IEventHandler subscriber): 
	(construct LineEditor maxTextLength subscriber)
)
