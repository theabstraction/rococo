(using Sys)
(using Sys.Maths)
(using Sys.Maths.F32)
(using Sys.Type)
(using Sys.MPlat)
(using Sys.Random)
(using Sys.Reflection)
(using Sys.Type.Strings)
(using MHost)
(using MHost.OS)
(using MHost.Graphics)
(using Rococo)
(using Rococo.Graphics)
(using Rococo.Audio)
(using RPG)

(class AddCharacterScreen 
	(implements MHost.IScreen)
	(implements IEventHandler)
	
	(IBundle bundle) 
	(IUIStack uistack)
	
	(Vec2 screenSpan)
	(Vec2 cursorPos)
	
	(IAttributeControl attributeControl)
	(IEventHandler keyboardSink)
	(IOverlayControl dropOverlay)
	(IToggleLabel sexButton)
	(ILineEditorControl nameEditor)
	(IDropValueMenu classEditor)
	(IDropValueMenu physTraits1)
	(IDropValueMenu physTraits2)
	(IDropValueMenu physTraits3)
	(IDropValueMenu mentalTraits1)
	(IDropValueMenu mentalTraits2)
	(IDropValueMenu mentalTraits3)
	(IDropValueMenu mentalTraits4)
	(IDropValueMenu mentalTraits5)
	(IDropValueMenu profession)
	(IDropValueMenu hobby)
	(ILabelButton rollButton)
	(ILabelButton saveButton)
	(ILabelButton cancelButton)
	(ITooltip toolTip)
	(Int32 sysFont)
	
	(IExpression sMale)
	(IExpression sFemale)
)

(archetype Sys.Reflection.CallbackWithExpression (IExpression expression) ->)

(function ForDropMenuValue (IDropValueMenu menu) (CallbackWithExpression callback)-> :
	(IExpression s = menu.GetValue)
	(callback s)
)

(method AddCharacterScreen.ForEachSelectedDropMenuValue (CallbackWithExpression callback)-> :
	(ForDropMenuValue this.physTraits1 callback)
	(ForDropMenuValue this.physTraits2 callback)
	(ForDropMenuValue this.physTraits3 callback)
	(ForDropMenuValue this.mentalTraits1 callback)
	(ForDropMenuValue this.mentalTraits2 callback)
	(ForDropMenuValue this.mentalTraits3 callback)
	(ForDropMenuValue this.mentalTraits4 callback)
	(ForDropMenuValue this.mentalTraits5 callback)
	(ForDropMenuValue this.profession callback)
	(ForDropMenuValue this.hobby callback) 
)

(function AppendSantitizedNameToPath (IStringBuilder sb)(IString name) -> :
	(#for (Int32 i = 0)(i < name.Length)(i += 1)
		(Int32 c = (name i))
		(if (IsAlphaNumeric c)
			(sb.AppendChar c)
		)
		(if (c == 32)
			(sb.AppendIString "_")
		)
	)
)

(function AppendTimestampForFile (IStringBuilder sb) -> :
	(IStringBuilder rawTime (StringBuilder 64))
	(Sys.OS.AppendCTime rawTime)
	(IString rawTimeString = rawTime)
	
	(#for (Int32 i = 3)(i < rawTime.Length)(i += 1)
		(Int32 c = (rawTimeString i))
		(if (IsAlphaNumeric c)
			(sb.AppendChar c)
		)
	)
)

(method AddCharacterScreen.Save -> :
	(IDictionaryStream s (DictionaryStream))
	(s.AddI32 "Strength" (this.attributeControl.GetValue "Strength"))
	(s.AddI32 "Agility"  (this.attributeControl.GetValue "Agility"))
	(s.AddI32 "Wellness" (this.attributeControl.GetValue "Wellness"))
	(s.AddI32 "Psyche"   (this.attributeControl.GetValue "Psyche"))
	(s.AddI32 "Ego"      (this.attributeControl.GetValue "Ego"))
	(s.AddI32 "Maths"    (this.attributeControl.GetValue "Maths"))
	
	(IStringBuilder nameBuilder = this.nameEditor.GetBuilder)
	(s.AddString "Name" nameBuilder)
	
	(IStringBuilder filename (StringBuilder 256))
	(#build filename "#chaps/")
	(AppendSantitizedNameToPath filename nameBuilder)
	(#build filename "@")
	(AppendTimestampForFile filename)
	(#build filename ".dict")
	(s.SaveTo filename) 
)

(method AddCharacterScreen.OnToggled (PassEventHandlerArgs args)-> :
	(if (args.sink == this.sexButton)
		(IControl target = this.toolTip.GetTarget)
		(if (target == this.sexButton)
			(this.nameEditor.Enable)
			(this.nameEditor.EnableGlow)
			(this.sexButton.DisableGlow)
			(this.toolTip.SetText "Now that you are done picking the sexual organs, you can choose a name. Right click in the box to generate a random name. Left click in the box to manually edit a name")
			(this.toolTip.SetTarget this.nameEditor)
		)
	)
)

(method AddCharacterScreen.OnEditUpdated (EditBufferChangedArgs args)-> :
	(IControl target = this.toolTip.GetTarget)
	(if (target == this.nameEditor)
		(this.toolTip.SetText "When you are satisfied with a name choose a profession for this character. Profession reflects one's martial training.")
		(this.toolTip.SetTarget this.profession)
		(this.nameEditor.DisableGlow)
		(this.profession.EnableGlow)
		(this.profession.Enable)
	)
)

(method AddCharacterScreen.OnSelectionChanged (SelectionChangedArgs args)-> :
	(IControl target = this.toolTip.GetTarget)
	(if (target == this.profession)
		(this.profession.DisableGlow)
		(this.toolTip.SetText "When you are done selecting all of the traits you can click 'Roll' to generate the character")
		(this.hobby.Enable)
		(this.hobby.EnableGlow)	
		(this.toolTip.SetTarget this.hobby)
	else
		(if (target == this.hobby)
			(this.toolTip.SetTarget this.rollButton)
			(this.hobby.DisableGlow)	
			(this.uistack.RemoveFromTopLevel this.toolTip)
			(this.classEditor.EnableGlow)
			(this.physTraits1.EnableGlow)
			(this.physTraits2.EnableGlow)
			(this.physTraits3.EnableGlow)
			(this.mentalTraits1.EnableGlow)
			(this.mentalTraits2.EnableGlow)
			(this.mentalTraits3.EnableGlow)
			(this.mentalTraits4.EnableGlow)
			(this.mentalTraits5.EnableGlow)
			(this.classEditor.Enable)
			(this.physTraits1.Enable)
			(this.physTraits2.Enable)
			(this.physTraits3.Enable)
			(this.mentalTraits1.Enable)
			(this.mentalTraits2.Enable)
			(this.mentalTraits3.Enable)
			(this.mentalTraits4.Enable)
			(this.mentalTraits5.Enable)
		else
			(cast args.control -> IDropValueMenu menu)
			(menu.DisableGlow)
			
			(this.UpdateRollButton)
		)
	)
)

(method AddCharacterScreen.UpdateRollButton -> :
	(if ((this.physTraits1.GetSelection) < 0) (return))
	(if ((this.physTraits2.GetSelection) < 0) (return))
	(if ((this.physTraits3.GetSelection) < 0) (return))
	(if ((this.mentalTraits1.GetSelection) < 0) (return))
	(if ((this.mentalTraits2.GetSelection) < 0) (return))
	(if ((this.mentalTraits3.GetSelection) < 0) (return))
	(if ((this.mentalTraits4.GetSelection) < 0) (return))
	(if ((this.mentalTraits5.GetSelection) < 0) (return))
	(if ((this.hobby.GetSelection) < 0) (return))
	(if ((this.profession.GetSelection) < 0) (return))
	
	(this.rollButton.Enable)
)

(method AddCharacterScreen.Construct (IBundle bundle) -> : 
	(this.bundle = bundle)
	
	(this.uistack = (MHost.Graphics.NewUIStack))
	(this.screenSpan = -1 -1)
	(this.cursorPos = -1 -1)
	
	(this.attributeControl = (NewAttributeControl))
	(this.uistack.AddTopLevelControl this.attributeControl "attributes")
	
	(this.nameEditor = (NewLineEditor 30 this))
	(this.uistack.AddTopLevelControl this.nameEditor "name")
	
	(this.sysFont = -1)
	
	(IDropValueMenu classEditor (NewDropValueMenu 7 this))
	
	// Expression are #ClassQuanitifier #description-strings #starting-currency
	(IExpression classDC = '
		(0 ("The lowest of the low, beggars, thieves and petty criminals. such people are born despised - outcast from"
			"respectable society. There is no background more humble. Almost always homeless. Absolutely no inheritance."
			"Some of the hardest working and most productive of the Human race evolved out of this scum, their energies"
			"channeled to make sure they never return to their roots. If there is one class to betray it is this one!" ) 
			silver: 5 ))
				
	(IExpression classLWC = '
		(1 ("These are what you call working people - the Proletariat. The Great Unwashed. Typically have little more than" 
			"a week's wage in savings. Slum dwellers. Peasants.") 
			silver: 150 ))
				 
	(IExpression classMWC = '
		(2 ("'The salt of the Earth' - Not all working class people are into heavy lifting. There are shopkeepers and smiths,"
			"actors and musicians. Typically have a few month's wages to bequeath to their heirs.") 
			silver: 600))
			
	(IExpression classUWC = '
		(3 ("A class that includes many scientists and engineers and uppity Proles. Very often find themselves outsiders"
		    "as classes above or below will not socialize with them. Generally will leave their heirs with a leg up into the"
			"middle classes") 
			silver: 6000 ))
		
	(IExpression classLMC = '
		(4 ("The lower middle class - or the Borgeous - distinguish themselves by making money from money, and not from hard graft."
			"Paper-pushers, Little-Hitlers abound. Not all middle class people are thieves however... some actually"
			"are the deserving solvent.")
			silver: 15000))

	(IExpression classUMC = '
		(5 ("The upper middle class - solicitors, stockbrokers, tax-collectors and the like. Other than the homeless, they are the group"
			"with the highest incidence of suicide. Souless is often apt. Everyone hates them, except cynics.")
			silver: 40000))
			
	(IExpression classLUC = '
		(6 ("The 'Velvet Mafia' - or the Toff classes - often distinguished by their double-barreled names and family mottos,"
			"they may not have titles, but they do put on the airs of royalty. Almost all of them have government non-jobs,"
			"either that or they 'work' in Law. Behind every great fortune lies a great fraud...")
			silver: 200000))
			
	(IOverlayControl overlay (NewOverlay))
	(this.dropOverlay = overlay)
	(this.uistack.AddTopLevelFloater overlay "dropOverlay")
			
	(classEditor.AddItem "Untouchable" classDC)
	(classEditor.AddItem "Lower Working Class" classLWC)
	(classEditor.AddItem "Middle Working Class" classMWC)
	(classEditor.AddItem "Upper Working Class" classUWC)
	(classEditor.AddItem "Lower Middle Class" classLMC)
	(classEditor.AddItem "Upper Middle Class" classUMC)
	(classEditor.AddItem "Lower Upper Class" classLUC)
	(classEditor.SetUndefinedText "--Social Class--")	
	(this.classEditor = classEditor)
	(this.uistack.AddTopLevelControl this.classEditor "class")
	
	(IToggleLabel sexButton (NewToggleLabel 2))
	
	(IExpression sMale = ' ("male" "man" "boy" "he" "him" "his"))
	(IExpression sFemale = '("female" "woman" "girl" "she" "her" "hers"))
	
	(this.sMale = sMale)
	(this.sFemale = sFemale)
	
	(sexButton.AddItem "Male" sMale)
	(sexButton.AddItem "Female" sFemale)
	(sexButton.SetUndefinedText "--Sex--")
	
	(this.sexButton = sexButton)
	(this.uistack.AddTopLevelControl this.sexButton "sex")
	
	(IExpression nullExpression = ' ())
	
	(IDropValueMenu physTraits1 (NewDropValueMenu 3 this))
	
	(IExpression sStout = '((+ Strength 1 d 10)(+ Psyche 1 d 10)))
	(physTraits1.AddItem "Stout" sStout)
	
	(IExpression sSlim = '((+ Agility 1 d 10)(+ Wellness 2 d 10)))
	(physTraits1.AddItem "Slim" sSlim)
	
	(IExpression sAthletic = '((+ Strength 3 d 10)(+ Wellness 1 d 10)))
	(physTraits1.AddItem "Athletic" sAthletic)
	
	(physTraits1.SetUndefinedText "--Build--")	
	(this.physTraits1 = physTraits1)
	(this.uistack.AddTopLevelControl this.physTraits1 "phy_1")
	
	(IDropValueMenu physTraits2 (NewDropValueMenu 4 this))
	
	(IExpression sGiant = '((+ Strength 5 d 10)))
	(physTraits2.AddItem "Giant" sGiant)
	
	(IExpression sTall = '((+ Strength 4 d 10)))
	(physTraits2.AddItem "Tall" sTall)
	
	(IExpression sShort = '((+ Agility 1 d 10)(+ Wellness 1 d 10)))
	(physTraits2.AddItem "Short" sShort)
	
	(IExpression sMidget = '((+ Agility 2 d 10)))
	(physTraits2.AddItem "Midget" sMidget)
	(physTraits2.SetUndefinedText "--Stature--")
	(this.physTraits2 = physTraits2)
	(this.uistack.AddTopLevelControl this.physTraits2 "phy_2")
	
	(IDropValueMenu physTraits3 (NewDropValueMenu 7 this))
	
	(IExpression sBodyBuilder = ' ((+ Strength 5 d 100)(+ Strength 10 d 10)))
	(physTraits3.AddItem "Bodybuilder" sBodyBuilder)
	
	(IExpression sGynmast = ' ((+ Strength 1 d 100)(+ Strength 4 d 10)(+ Agility 5 d 100)(+ Agility 10 d 10)(+ Wellness 10 d 10)))
	(physTraits3.AddItem "Gymnast" sGynmast)
	
	(IExpression sPugilist = ' ((+ Strength 2 d 100)(+ Strength 4 d 10)(+ Agility 2 d 100)(+ Agility 10 d 10)(+ Wellness 20 d 10)))
	(physTraits3.AddItem "Pugilist" sPugilist)
	
	(IExpression sDancer = ' ((+ Strength 1 d 50)(+ Strength 4 d 10)(+ Agility 3 d 100)(+ Agility 10 d 10)(+ Wellness 40 d 10)))
	(physTraits3.AddItem "Dancer" sDancer)
	
	(IExpression sCerebral = ' ((+ Psyche 2 d 10)(+ Ego 2 d 10)(+ Maths 2 d 10)(+ Wellness 2 d 10)))
	(physTraits3.AddItem "Cerebral" sCerebral)
	
	(physTraits3.SetUndefinedText "--Sports--")
	(this.physTraits3 = physTraits3)
	(this.uistack.AddTopLevelControl this.physTraits3 "phy_3")
	
	(IDropValueMenu mentalTraits1 (NewDropValueMenu 4 this))
	
	(IExpression sDominant = ' ((+ Psyche 2 d 10)(+ Ego 2 d 10)))
	(mentalTraits1.AddItem "Dominant" sDominant)
	
	(IExpression sExtrovert = ' ((+ Psyche 2 d 10)(+ Wellness 2 d 10)))
	(mentalTraits1.AddItem "Extrovert" sExtrovert)
	
	(IExpression sIntrovert = ' ((+ Ego 4 d 10)(+ Maths 2 d 10)))
	(mentalTraits1.AddItem "Introvert" sIntrovert)
	
	(IExpression sIndependent = ' ((+ Psyche 1 d 10)(+ Ego 3 d 10)(+ Maths 1 d 10)))
	(mentalTraits1.AddItem "Independent" sIndependent)
	
	(mentalTraits1.SetUndefinedText "--Persona--")
	(this.mentalTraits1 = mentalTraits1)
	(this.uistack.AddTopLevelControl this.mentalTraits1 "ment_1")
	
	(IDropValueMenu mentalTraits2 (NewDropValueMenu 4 this))
	
	(mentalTraits2.AddItem "Miser" nullExpression)
	(mentalTraits2.AddItem "Charitable" nullExpression)
	(mentalTraits2.AddItem "Greedy" nullExpression)
	(mentalTraits2.AddItem "Altruistic" nullExpression)
	(mentalTraits2.SetUndefinedText "--Sociability--")
	(this.mentalTraits2 = mentalTraits2)
	(this.uistack.AddTopLevelControl this.mentalTraits2 "ment_2")
	
	(IDropValueMenu mentalTraits3 (NewDropValueMenu 5 this))
	(mentalTraits3.AddItem "Stubborn" nullExpression)
	(mentalTraits3.AddItem "Rational" nullExpression)
	(mentalTraits3.AddItem "Spiritual" nullExpression)
	(mentalTraits3.AddItem "Cynical" nullExpression)
	(mentalTraits3.AddItem "Contrarion" nullExpression)
	(mentalTraits3.SetUndefinedText "--Disposition--")
	(this.mentalTraits3 = mentalTraits3)
	(this.uistack.AddTopLevelControl this.mentalTraits3 "ment_3")
	
	(IDropValueMenu mentalTraits4 (NewDropValueMenu 5 this))
	(mentalTraits4.AddItem "Hedonist" nullExpression)
	(mentalTraits4.AddItem "Egoist" nullExpression)
	(mentalTraits4.AddItem "Gold-digger" nullExpression)
	(mentalTraits4.AddItem "Snob" nullExpression)
	(mentalTraits4.AddItem "Ostentatious" nullExpression)
	(mentalTraits4.SetUndefinedText "--Vice--")
	(this.mentalTraits4 = mentalTraits4)
	(this.uistack.AddTopLevelControl this.mentalTraits4 "ment_4")
	
	(IDropValueMenu mentalTraits5 (NewDropValueMenu 5 this))
	(mentalTraits5.AddItem "Angry" nullExpression)
	(mentalTraits5.AddItem "Compassionate" nullExpression)
	(mentalTraits5.AddItem "Giddy" nullExpression)
	(mentalTraits5.AddItem "Insouciant" nullExpression)
	(mentalTraits5.AddItem "Serene" nullExpression)
	(mentalTraits5.SetUndefinedText "--Attitude--")
	(this.mentalTraits5 = mentalTraits5)
	(this.uistack.AddTopLevelControl this.mentalTraits5 "ment_5")
	
	(IDropValueMenu profession (NewDropValueMenu 8 this))
	(profession.AddItem "Soldier" nullExpression)
	(profession.AddItem "Scout" nullExpression)
	(profession.AddItem "Sniper" nullExpression)
	(profession.AddItem "Monk" nullExpression)
	(profession.AddItem "Tactician" nullExpression)
	(profession.SetUndefinedText "--Role--")
	(this.profession = profession)
	(this.uistack.AddTopLevelControl profession "profession")
	
	(IDropValueMenu hobby (NewDropValueMenu 8 this))
	(IExpression sEngineer = ' ((+ Maths 2 d 10)(+ Ego 2 d 10)))
	(hobby.AddItem "Engineer" sEngineer)
	
	(IExpression sLinguist = ' ((+ Maths 1 d 10)(+ Ego 2 d 10)(+ Psyche 2 d 10)))
	(hobby.AddItem "Linguist" sLinguist)
	
	(IExpression sLabourer = ' ((+ Strength 3 d 10)(+ Agility 3 d 10)(+ Wellness 4 d 10)))
	(hobby.AddItem "Labourer" sLabourer)
	
	(IExpression sDiplomat = ' ((+ Ego 3 d 10)(+ Psyche 1 d 10)))
	(hobby.AddItem "Diplomat" sDiplomat)
	
	(IExpression sManager = ' ((+ Ego 1 d 10)(+ Psyche 3 d 10)))
	(hobby.AddItem "Manager" sManager)
	(hobby.SetUndefinedText "--Weekend Job--")
	(this.hobby = hobby)
	(this.uistack.AddTopLevelControl hobby "profession")
	
	(ILabelButton rollButton (NewLabelButton))
	(rollButton.SetLabel "Roll!")
	(this.rollButton = rollButton)
	
	(ILabelButton saveButton (NewLabelButton))
	(saveButton.SetLabel "Save")
	(this.saveButton = saveButton)
	
	(ILabelButton cancelButton (NewLabelButton))
	(cancelButton.SetLabel "Cancel")
	(this.cancelButton = cancelButton)
	
	(this.uistack.AddTopLevelControl rollButton "roll")
	(this.uistack.AddTopLevelControl saveButton "save")
	(this.uistack.AddTopLevelControl cancelButton "cancel")
	
	(this.toolTip = (NewToolTip))
	(this.uistack.AddTopLevelControl this.toolTip "toolTip")
	
	(this.Prep)
)

(method AddCharacterScreen.Prep -> :
	(this.nameEditor.Disable)
	(this.classEditor.Disable)
	(this.physTraits1.Disable)
	(this.physTraits2.Disable)
	(this.physTraits3.Disable)
	(this.mentalTraits1.Disable)
	(this.mentalTraits2.Disable)
	(this.mentalTraits3.Disable)
	(this.mentalTraits4.Disable)
	(this.mentalTraits5.Disable)
	(this.profession.Disable)
	(this.hobby.Disable)
	(this.rollButton.Disable)
	(this.saveButton.Disable)
	
	(this.toolTip.SetTarget this.sexButton)
	(this.toolTip.SetText "Character generation begins with....sex.&nSo click on the sex button a few times until you are happy with the private parts.")
	(this.sexButton.EnableGlow)
)

(function IsAtomic (IExpression s)-> (Bool isSo):
	(Int32 type = s.Type)
	(isSo = (type == (#ExpressionTypeAtomic)))
)

(function AssertAtomic (IExpression s)-> :
	(if (not (IsAtomic s))
		(s.Throw 0 "Expecting an atomic expression")
	)
)

(function IsCompound (IExpression s)-> (Bool isSo):
	(Int32 type = s.Type)
	(isSo = (type == (#ExpressionTypeCompound)))
)

(struct FindNextDirectiveArgs
	(IExpression s)
	(IString cmd)
	(Int32 startIndex) 
	(Int32 findIndex)
)

(function FindNextDirective (FindNextDirectiveArgs args) -> (IExpression directive):
	(Int32 nElements = args.s.ChildCount)
	(IExpression s = args.s)
	
	(IStringBuilder sb (StringBuilder 128))
	(Int32 i = args.startIndex)
	(while (i < nElements)
		(IExpression c = (s i))
		
		(if (IsCompound c)
			(IExpression sCmd = (c 0))
			(if (IsAtomic sCmd)
				(sb.Clear)
				(sCmd.AppendTextTo sb)
				(if (IsExactMatch sb args.cmd)
					(directive = c)
					(args.findIndex = i)
					(return)
				)
			)
		)
		
		(i += 1)
	)
	
	(args.findIndex = -1)
)

/*  (+ Strength 3 d 6)
*/

(function AssertChildCount (IExpression s)(Int32 count)-> :
	(if (count != s.ChildCount)
		(IStringBuilder sb (StringBuilder 256))
		(#build sb "AssertChildCount: Expecting " count " children")
		(s.Throw 0 sb)
	)
)

(function ExpressionToInt32 (IExpression s)->(Int32 value):
	(IString text = s.Text)
	(Bool isOK)
	(Sys.Maths.I32.FromString text -> value isOK)
	(if (not isOK)
		(s.Throw 0 "Expecting integer")
	)
)

(function ApplyAddDice (IAttributeControl control) (IExpression s)-> :
	(AssertChildCount s 5)
	(IExpression sstat = (s 1))
	(IExpression sNDice = (s 2))
	(IExpression sNSides = (s 4))
	
	(Int32 nDice = (ExpressionToInt32 sNDice))
	(Int32 nSides = (ExpressionToInt32 sNSides))
	(IString stat = sstat.Text)
	
	(control.AddValue stat (Sys.Random.RollDice nDice nSides))
)

(function ApplyModifiers (IAttributeControl control) (IExpression s)-> :
	(FindNextDirectiveArgs args = s "+" 0 -1)
	
	(IExpression boost = (FindNextDirective args))
	(while (args.findIndex != -1)
		(ApplyAddDice control boost)
		(args.startIndex = (args.findIndex + 1))
		(boost = (FindNextDirective args))
	)
)

(method AddCharacterScreen.OnButtonUp (ButtonClickArgs args) -> :
	(if (args.button == this.rollButton)
		(this.attributeControl.SetAttributeByName "Strength" (RollDice 10 18))
		(this.attributeControl.SetAttributeByName "Agility"  (RollDice 10 18))
		(this.attributeControl.SetAttributeByName "Wellness" (RollDice 10 18))
		(this.attributeControl.SetAttributeByName "Psyche"   (RollDice 10 18))
		(this.attributeControl.SetAttributeByName "Ego"      (RollDice 10 18))
		(this.attributeControl.SetAttributeByName "Maths"    (RollDice 10 18))
		
		(this.saveButton.Enable)
		(this.saveButton.EnableGlow)
		
		(IAttributeControl ac = this.attributeControl)
		
		(CallbackWithExpression onValue =
			(closure (IExpression s) -> :
				(ApplyModifiers ac s)
			)
		)
		(this.ForEachSelectedDropMenuValue onValue)
	else
		(if (args.button == this.cancelButton)
			(this.bundle.SetActiveScreen (#IdScreenOpening))
		else
			(if (args.button == this.saveButton)
				(this.Save)
				(this.bundle.SetActiveScreen (#IdScreenOpening))
			)
		)
	)
)

(method AddCharacterScreen.SetKeyboardFocus (PassEventHandlerArgs args) -> :
	(BoolArgs boolArgs)
	(boolArgs.value = false)
	(boolArgs.source = this)
	(this.keyboardSink.SetHasFocus boolArgs)

	(this.keyboardSink = args.sink)
	
	(boolArgs.value = true)
	(this.keyboardSink.SetHasFocus boolArgs)
)

(method AddCharacterScreen.OnAsciiChar (Int32 asciiValue)-> :
	(KeyboardCharArgs args)
	(args.asciiValue = asciiValue)
	(args.source = this)
	(this.keyboardSink.OnAsciiChar args)
)

(method AddCharacterScreen.OnSysKey (Bool isUp)(Int32 virtualKeyCode)-> :
	(KeyboardVKeyArgs args)
	(args.isUp = isUp)
	(args.virtualKeyCode = virtualKeyCode)
	(args.source = this)
	(this.keyboardSink.OnVirtualKey args)
)

(method AddCharacterScreen.OnMouseDown (Int32 button) (Float32 x)(Float32 y) -> :
	(Vec2 pos = x y)
	
	(IEventHandler evHandler = this)
		
	(OnUIStackItem q = 
		(closure (UIStackItem item)->(Bool terminate):
			(MouseClickArgs args = pos evHandler button)
			(item.handler.OnMouseDown args)
		)
	)
	(this.uistack.RouteMouseEvent pos q)
)

(method AddCharacterScreen.OnMouseUp (Int32 button)(Float32 x)(Float32 y) -> :
	(Vec2 pos = x y)
	
	(if (button == 1)
		(Rectf nameRect)
		(this.nameEditor.GetRect nameRect)
		
		(if (IsPointInRect pos nameRect)
			(IStringBuilder newName (StringBuilder 128))
			
			(IExpression s = (this.sexButton.GetSelectedValue))
			(if (s == this.sFemale)
				(AppendRandomFemaleBritishName newName)
			else
				(AppendRandomMaleBritishName newName)
			)
			(this.nameEditor.SetText newName)
		)
	else	
		(IEventHandler evHandler = this)
		
		(OnUIStackItem q = 
			(closure (UIStackItem item)->(Bool terminate):
				(MouseClickArgs args = pos evHandler button)
				(item.handler.OnMouseUp args)
			)
		)
		
		(this.uistack.RouteMouseEvent pos q)
	)
)

(method AddCharacterScreen.OnWheel (Int32 spin) -> :
)

(method AddCharacterScreen.Layout (IGui g) -> :
	(Float32 dy = 8)
	(Rectf attributeRect = 10 dy 250 310)
	(this.attributeControl.SetRect attributeRect)
	
	(Vec2 span)
	(g.GetScreenSpan span)
	
	(Rectf rollRect)
	(rollRect.left = attributeRect.left)
	(rollRect.top = (attributeRect.bottom + dy))
	(rollRect.right = (rollRect.left +  140))
	(rollRect.bottom = (rollRect.top + 50))
	(this.rollButton.SetRect "Tahoma" rollRect g)
	
	(Rectf saveRect)
	(saveRect.left = attributeRect.left)
	(saveRect.top = (rollRect.bottom + dy))
	(saveRect.right = (saveRect.left +  140))
	(saveRect.bottom = (saveRect.top + 50))
	(this.saveButton.SetRect "Tahoma" saveRect g)
	
	(Rectf cancelRect)
	(cancelRect.left = attributeRect.left)
	(cancelRect.top = (saveRect.bottom + dy))
	(cancelRect.right = (cancelRect.left +  140))
	(cancelRect.bottom = (cancelRect.top + 50))
	(this.cancelButton.SetRect "Tahoma" cancelRect g)
	
	(Rectf sexRect)
	(sexRect.left = (attributeRect.right + dy))
	(sexRect.top = attributeRect.top)
	(sexRect.right = (sexRect.left +  140))
	(sexRect.bottom = (sexRect.top + 50))
	(this.sexButton.SetRect "Tahoma" sexRect g)
	
	(Rectf nameRect)
	(nameRect.left = (sexRect.right + dy))
	(nameRect.top = attributeRect.top)
	(nameRect.right = (span.x - 10))
	(nameRect.bottom = (nameRect.top + 50))
	(this.nameEditor.SetRect "Tahoma" nameRect)
	
	(Rectf overlayRect)
	(overlayRect.left = (span.x - 355))
	(overlayRect.right = (span.x - 5))
	(overlayRect.top = nameRect.bottom)
	(overlayRect.bottom = (span.y - 5))
	(this.dropOverlay.SetRect overlayRect)
	
	(Rectf professionRect)
	(professionRect.left = nameRect.left )
	(professionRect.top = (nameRect.bottom + dy))
	(professionRect.right = (overlayRect.left + 4))
	(professionRect.bottom = (professionRect.top + 50))
	(this.profession.SetLine "Tahoma" professionRect g)
	
	(Rectf hobbyRect)
	(hobbyRect.left = nameRect.left )
	(hobbyRect.top = (professionRect.bottom + dy))
	(hobbyRect.right = professionRect.right)
	(hobbyRect.bottom = (hobbyRect.top + 50))
	(this.hobby.SetLine "Tahoma" hobbyRect g)
	
	(Rectf classRect)
	(classRect.left = hobbyRect.left)
	(classRect.top = (hobbyRect.bottom + dy))
	(classRect.right = hobbyRect.right)
	(classRect.bottom = (classRect.top + 50))	
	(this.classEditor.SetLine "Tahoma" classRect g)
	
	(Rectf phys1Rect)
	(phys1Rect.left = classRect.left)
	(phys1Rect.top = (classRect.bottom + dy))
	(phys1Rect.right = classRect.right)
	(phys1Rect.bottom = (phys1Rect.top + 50))
	(this.physTraits1.SetLine "Tahoma" phys1Rect g)
	
	(Rectf phys2Rect)
	(phys2Rect.left = phys1Rect.left)
	(phys2Rect.top = (phys1Rect.bottom + dy))
	(phys2Rect.right = phys1Rect.right)
	(phys2Rect.bottom = (phys2Rect.top + 50))
	(this.physTraits2.SetLine "Tahoma" phys2Rect g)
	
	(Rectf phys3Rect)
	(phys3Rect.left = phys2Rect.left)
	(phys3Rect.top = (phys2Rect.bottom + dy))
	(phys3Rect.right = phys2Rect.right)
	(phys3Rect.bottom = (phys3Rect.top + 50))
	(this.physTraits3.SetLine "Tahoma" phys3Rect g)
	
	(Rectf mentalTraits1Rect)
	(mentalTraits1Rect.left = phys3Rect.left)
	(mentalTraits1Rect.top = (phys3Rect.bottom + dy))
	(mentalTraits1Rect.right = phys3Rect.right)
	(mentalTraits1Rect.bottom = (mentalTraits1Rect.top + 50))
	(this.mentalTraits1.SetLine "Tahoma" mentalTraits1Rect g)
	
	(Rectf mentalTraits2Rect)
	(mentalTraits2Rect.left = mentalTraits1Rect.left)
	(mentalTraits2Rect.top = (mentalTraits1Rect.bottom + dy))
	(mentalTraits2Rect.right = mentalTraits1Rect.right)
	(mentalTraits2Rect.bottom = (mentalTraits2Rect.top + 50))
	(this.mentalTraits2.SetLine "Tahoma" mentalTraits2Rect g)
	
	(Rectf mentalTraits3Rect)
	(mentalTraits3Rect.left = mentalTraits2Rect.left)
	(mentalTraits3Rect.top = (mentalTraits2Rect.bottom + dy))
	(mentalTraits3Rect.right = mentalTraits2Rect.right)
	(mentalTraits3Rect.bottom = (mentalTraits3Rect.top + 50))
	(this.mentalTraits3.SetLine "Tahoma" mentalTraits3Rect g)
	
	(Rectf mentalTraits4Rect)
	(mentalTraits4Rect.left = mentalTraits3Rect.left)
	(mentalTraits4Rect.top = (mentalTraits3Rect.bottom + dy))
	(mentalTraits4Rect.right = mentalTraits3Rect.right)
	(mentalTraits4Rect.bottom = (mentalTraits4Rect.top + 50))
	(this.mentalTraits4.SetLine "Tahoma" mentalTraits4Rect g)
	
	(Rectf mentalTraits5Rect)
	(mentalTraits5Rect.left = mentalTraits4Rect.left)
	(mentalTraits5Rect.top = (mentalTraits4Rect.bottom + dy))
	(mentalTraits5Rect.right = mentalTraits4Rect.right)
	(mentalTraits5Rect.bottom = (mentalTraits5Rect.top + 50))
	(this.mentalTraits5.SetLine "Tahoma" mentalTraits5Rect g)
	
	(Rectf toolTipRect)
	(toolTipRect.left = (sexRect.right - 120))
	(toolTipRect.top = (hobbyRect.bottom + 20))
	(toolTipRect.right = (toolTipRect.left + 500))
	(toolTipRect.bottom = (toolTipRect.top + 300))
	(this.toolTip.SetRect toolTipRect)
)

(method AddCharacterScreen.RenderGui (IGui g) -> :
	(Vec2 screenSpan)
	(g.GetScreenSpan screenSpan)
	
	(Rectf focusRect = -1 -1 -1 -1)
	(this.keyboardSink.GetRect focusRect)
	
	(if (focusRect.left != -1)
		(Rectf renderFocusRect)
		(ShrinkRectf focusRect renderFocusRect -2)
		(g.DrawBorder focusRect 2 0xFFFFFFFF 0xFFA0A0A0 0xFF808080 0xFF606060)
	)
	
	(if (screenSpan != this.screenSpan)
		(this.screenSpan = screenSpan)
		(this.Layout g)
	)
	
	(Rectf nameRect)
	(this.nameEditor.GetRect nameRect)
	
	(IControl target = this.toolTip.GetTarget)
	(if (target != this.sexButton)
		(Rectf toolTip = nameRect)
		(toolTip.right -= 4)
		(toolTip.bottom -= 4)
		(Int32 align = ((#AlignmentFlagsRight) + (#AlignmentFlagsBottom)))
		(if (this.sysFont < 0)
			(this.sysFont = (GetLargestFontOfFamilyLessThanHeight g "Courier New" 18))
		)
		(g.DrawText toolTip align "right-click here to generate a random name" this.sysFont 0xFFC0C0C0)
	)
	
	(RenderTree this.uistack g)
)

(method AddCharacterScreen.ActivateOverlay (ActivateOverlayArgs args)-> :
	(args.menu.SetOverlay this.dropOverlay)
)

(factory RPG.NewAddCharacterScreen IScreen (IBundle bundle): 
	(construct AddCharacterScreen bundle)
)
