// 3d test

(' #include 
	"!scripts/mhost/mplat.types.sxy"
	"!scripts/mhost/mhost.sxh.sxy"
	"!scripts/mplat.sxh.sxy"
	"!scripts/types.sxy"
	"!scripts/mhost/mhost.include.sxy"
	"!scripts/mhost/widgets/widgets.sxy"
	"!scripts/mhost/t3d/t3d.world.sxy"
	"!scripts/mhost/t3d/t3d.config.sxy"
)

(namespace EntryPoint)
	(alias Main EntryPoint.Main)

(using Sys)
(using Sys.Maths)
(using Sys.Maths.F32)
(using Sys.Type)
(using Sys.Random)
(using Sys.Type.Strings)

(using MPlat)
(using MHost)
(using MHost.OS)
(using MHost.Graphics)
(using Rococo)
(using Rococo.Graphics)
(using Rococo.Entities)
(using Rococo.Audio)

(using Sys.Geometry.F32)
(using Sys.Maths.I32)

(namespace T3D)
(using T3D)

(interface T3D.IInputThread (attribute essential)
	(extends Sys.ICoroutine)
)

(class GuiInputThread 
	(implements T3D.IInputThread)
	(IEngine engine)
	(IScreen activeScreen)
	(IEventHandler modalSink)
	(IKeyboard keyboard)
	(IWorld world)
)

(method GuiInputThread.Destruct -> :
)

(method GuiInputThread.CaptureMouse (IEventHandler handler)-> :
	(this.modalSink = handler) 
	(this.engine.CaptureMouse)
)

(method GuiInputThread.ReleaseMouse (IEventHandler handler)-> :
	(IEventHandler nullHandler)
	(this.modalSink = nullHandler)
	(this.engine.ReleaseMouse)
)

(method GuiInputThread.Construct (IEngine engine)(IWorld world) : 
	(this.engine = engine)
	(this.world = world)
)

(factory T3D.NewGuiInputThread IInputThread (IEngine engine)(IWorld world):
	(construct GuiInputThread engine world)
)

(method GuiInputThread.Run -> :
	(IKeyboard keyboard (Keyboard))
	(Int32 leftKey = (keyboard.GetVKeyFromName "A"))
	(Int32 rightKey = (keyboard.GetVKeyFromName "D"))
	(Int32 fireKey = (keyboard.GetVKeyFromName "SPACEBAR"))
	(Int32 upKey = (keyboard.GetVKeyFromName "W"))
	(Int32 downKey = (keyboard.GetVKeyFromName "S")) 
	
	(MouseEvent mouseEvent)
	(KeyboardEvent keyEvent)
	
	(KeyState keys)
			
	(Vec2 oldPlayerDirection = 0 0)
	
	(while this.engine.IsRunning
		(KeyState keys)
		(this.engine.PollKeyState keys)
		
		(Vec2 playerDirection = 0 0)
	
		(if (IsKeyPressed keys leftKey)
			(playerDirection.x = -1)
		)
		
		(if (IsKeyPressed keys rightKey)
			(playerDirection.x = 1)
		)
		
		(if (IsKeyPressed keys upKey)
			(playerDirection.y = 1)
		)
		
		(if (IsKeyPressed keys downKey)
			(playerDirection.y = -1)
		)
		
		(if ((oldPlayerDirection.x != playerDirection.x) or (oldPlayerDirection.y != playerDirection.y))
		//	(this.world.SetPlayerDirection playerDirection)
			(oldPlayerDirection = playerDirection)
		)
		
		(Vec2 mouseDelta)
		(this.engine.GetNextMouseDelta mouseDelta)

		(if ((mouseDelta.x != 0) or (mouseDelta.y != 0))
			(Float32 mouseDegreesPerDelta = T3D.Config.UI.MouseDegreesPerDelta)
			(Vec2 mouseDeltaDegrees = mouseDegreesPerDelta * mouseDelta)
			(this.world.UpdateMouseLook mouseDeltaDegrees)
		)
		
		(yield 5000) // This gives 5ms per poll or 200 Hz
	)
)

(struct CommandButton
	(Rectf rect)
	(IString text)
)

(interface T3D.IWorld (attribute essential)
	(RenderGui (IGui g)->)
	(UpdateMouseLook (Vec2 delta)->)
	(GetCameraOrientation (WorldOrientation cameraOrientation)->)
)

(class GameBundle (defines T3D.IBundle)
	(ISprites sprites)
	(IEngine engine)
	(ILegacySoundControl sound)
	(IInputThread inputThread)
	(ICoroutineControl coroutines)
	(IWorld world)
)

(method GameBundle.Construct : 
	(ISprites sprites (Sprites))
	(sprites.AddEachSpriteInDirectory "!textures/faces/female")
	(sprites.LoadAllSprites)
	(this.sprites = sprites)
	
	(this.engine = (Engine))
	(this.sound = (Rococo.Audio.LegacySoundControl))
	
	(this.coroutines = (Coroutines))
	
	(this.world = (NewWorld))
	(this.inputThread = (NewGuiInputThread this.engine this.world))
	(this.coroutines.Add this.inputThread)
)

(method GameBundle.UIControl -> (IUIControl uiControl): 
	(uiControl = this.inputThread.UIControl)
)

(method GameBundle.Engine -> (IEngine engine):
	(engine = this.engine)
)

(method GameBundle.Sound -> (ILegacySoundControl sound):
	(sound = this.sound)
)

(method GameBundle.AddCoroutine -> (ICoroutine coroutine):
	(coroutines.Add coroutine)
)

(factory T3D.NewGameBundle T3D.IBundle : (construct GameBundle))

(function GetWorldToCameraQuat (WorldOrientation world)(Quat q)-> :
	/*
	(struct WorldOrientation
		(Degrees bearing) // 0 = North, 90 = East, 180 = South, 270 = West
		(Degrees elevation) // 0 = forward, 90 = up, -90 = down
		(Degrees roll) // anti-clockwise roll about direction vector
	)
	*/
	
	/* A world to camera quaternion gives the rotation and roll required to map a direction and roll
	defined in a WorldOrientation vector to an object facing -ve z, with x to the right and y up */
	
	// Consider the case of three rotations mapping -z to a direction N. The inverse transformation
	// of three rotations is three inverse rotations in reverse order. e.g (Rx.Ry.Rz)' = Rz'.Ry'.Rx'
	
	(Degrees invElevation = (-90 - world.elevation))
	
	(Quat invElevationYQ)
	(GetRotationQuat invElevation 1 0 0 invElevationYQ)
	
	(Degrees invBearing = (0 - world.bearing))
	
	(Degrees thetaXY = (0 - invBearing))
	
	(Quat invBearingZQ)
	(GetRotationQuat thetaXY 0 0 1 invBearingZQ)
	
	(Quat zy = invBearingZQ * invElevationYQ)

	(q = zy)
)

(method GameBundle.Run -> :
	(ISceneBuilder scene (SceneBuilder))
	(IInstances instances (Instances))
	(ICamera camera (Camera))
	
	(camera.SetRHProjection 60 0.1 1000.0)
	
	(Vec3 origin = 0 0 0)
	(camera.SetPosition origin)
	
	(Int64 cubeId = (instances.CreateCubeTexture "!textures/t3d/skybox/YokohamaSmall/" "jpg"))
	(scene.SetSkyBox cubeId)

	(while this.engine.IsRunning
		(while (this.coroutines.Continue > 0))
		
		(IWorld world = this.world)
		
		(GuiPopulator overlay =
			(closure (IGui gui) -> : 
				(world.RenderGui gui)
			)
		)
		
		(WorldOrientation cameraOrientation)
		(world.GetCameraOrientation cameraOrientation)
		
		(Quat cameraQuat)
		(GetWorldToCameraQuat cameraOrientation cameraQuat)
		
		(camera.SetOrientation cameraQuat)
		
		(this.engine.Render overlay)	
		(this.engine.YieldForSystemMessages 5)
	)
	
	(this.coroutines.ReleaseAll)
)

(function Main (Int32 id) -> (Int32 exitCode):
	(ISceneBuilder scene (SceneBuilder))
	
	(LightSpec light)
	(light.position = 0 3 1.2)
	(light.direction = 0 0.0 -1)
	(light.fov = 45)
	(light.diffuse = 3.0 3.0 3.0 1.0)
	(light.ambience = 0.6 0.6 0.6 0.5)
	(light.cutoffAngle = 25)
	(light.cutoffPower = 25)
	(light.attenuation = -0.5)
	(light.nearPlane = 0.1)
	(light.farPlane = 1000)
	(light.fogConstant = -0.1)
	
	(scene.SetLight light 0)
	
	(Sys.Random.Seed 0)
	(IBundle bundle (NewGameBundle))
	(bundle.Run)
)
