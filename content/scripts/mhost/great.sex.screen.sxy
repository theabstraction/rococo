(' #import (mhost "MHost"))

(namespace EntryPoint)
	(alias Main EntryPoint.Main)
	
(using Sys)
(using Sys.Maths)
(using Sys.Type)
(using Sys.Random)
(using MHost)
(using MHost.OS)
(using MHost.Graphics)
(using Rococo)
(using Rococo.Graphics)
(using Rococo.Audio)

(namespace RPG)
(using RPG)

(class GuiInputThread 
	(implements Sys.ICoroutine)
	(IEngine engine)
)

(method GuiInputThread.Construct (IEngine engine) : 
	(this.engine = engine)
)

(factory RPG.NewGuiInputThread ICoroutine (IEngine engine):
	(construct GuiInputThread engine)
)

(method GuiInputThread.Run -> :
	(IKeyboard keyboard (Keyboard))
/*	
	(Int32 leftKey = (keyboard.GetVKeyFromName "A"))
	(Int32 rightKey = (keyboard.GetVKeyFromName "D"))
	(Int32 fireKey = (keyboard.GetVKeyFromName "SPACEBAR"))
	(Int32 upKey = (keyboard.GetVKeyFromName "W"))
	(Int32 downKey = (keyboard.GetVKeyFromName "S")) 
*/
	
	(while this.engine.IsRunning
		(KeyState keys)
		(this.engine.PollKeyState keys)
		
		(yield 10000)
	)
)

(interface MHost.IWorld
	(Advance ->)
	(RenderGui (IGui gui)-> )
)

(class World 
	(implements IWorld)
	(implements ICoroutine)
	
	(IEngine engine)
	(Vec2 screenSpan)
)

(method World.Construct (IEngine engine) -> :
	(this.engine = engine)
)

(factory RPG.NewWorld IWorld (IEngine engine) : 
	(construct World engine)
)

(method World.Advance  -> :
)

(method World.RenderGui (IGui gc) -> :
	(gc.GetScreenSpan this.screenSpan)
)

(method World.Run -> :
	(while this.engine.IsRunning
		(this.Advance)
		(yield 1000)
	)
)

(function GetSexmlForGui -> (Sys.Reflection.IExpression sexml):
	(Sys.Reflection.IExpression s = '	(
	
// Taking liberties with indentation standards here - we want to demonstrate embedding a SEXML document within a SexyScript. Normally in a standalone SEXML file the SEXML tree is at the root, so we would have no containing parenthesis	
// and the root directives would be aligned to the left of the page without blankspace
	
	
// Start of SEXML
(Scheme :
	// This reads as Apply the colour defs to the states specified by their bit combinations. (None of which contained the hovered bit)
	// Since we have not specified the hovered bit, then this colour scheme applies to all situations that are *not* hovered
	(ApplyTo ([] RenderStates pressed focused))
	(ApplyTo ([] RenderStates pressed))
	(ApplyTo ([] RenderStates focused))
	(ColourContainerBackground (Red 0)(Green 40)(Blue 20)(Alpha 255))
)
(Scheme :
	// This reads as Apply the colour defs to the states specified by their bit combinations. (All of which contain the hovered bit)
	// Since we have specify the hovered bit in all permutations, then this colour scheme applies to all situations that *are* hovered
	(ApplyTo ([] RenderStates hovered pressed))
	(ApplyTo ([] RenderStates hovered focused))
	(ApplyTo ([] RenderStates hovered))
	(ColourContainerBackground (Red 0)(Green 60)(Blue 40)(Alpha 255))
)
(Div 
	(Panel.Description "OutermostDiv")
	([] Panel.Anchors left right hexpand top bottom vexpand) 
	(#Recti Panel.Padding 10 10 10 10)
	:
	(Div 
		(Panel.Description "InnerDiv")
		([] Panel.Anchors left right hexpand top bottom vexpand) 
		(#Recti Panel.Padding 20 20 20 20)
	)	
)
// End of SEXML



										)
	)	
	(sexml = s)
)

(function Main (Int32 id) -> (Int32 exitCode):
	(IEngine engine (Engine))
	
	(IWorld world (NewWorld engine))
	
	(ICoroutineControl coroutines (Coroutines))
	
	(ICoroutine guiThread (NewGuiInputThread engine))
	(coroutines.Add guiThread)
	
	(cast world -> ICoroutine worldThread)
	(coroutines.Add worldThread)
	
	(IKeyboard keyboard (Keyboard))
			
	(engine.AddSexmlSheet GetSexmlForGui)
	
	(while engine.IsRunning
		(while (coroutines.Continue > 0))
		
		(GuiPopulator p =
			(closure (IGui gui) -> : 
				(world.RenderGui gui)
			)
		)
		
		(engine.Render p)	
		(engine.YieldForSystemMessages 5)
	)
)