(' #include 
	"!scripts/mhost/mplat.types.sxy"
	"!scripts/mhost/mhost.sxh.sxy"
	"!scripts/mplat.sxh.sxy"
	"!scripts/types.sxy"
	"!scripts/mhost/mhost.include.sxy"
	"!scripts/mhost/widgets/fonts.sxy"
	"!scripts/mhost/widgets/widgets.sxy"
	"!scripts/mhost/widgets/menu.vertical.sxy"
	"!scripts/mhost/widgets/uistack.sxy"
	"!scripts/mhost/rpg/controls/credits.sxy"
	"!scripts/mhost/rpg/controls/add.character.sxy"
	"!scripts/mhost/rpg/controls/gen.name.sxy"
	"!scripts/mhost/rpg/controls/surnames.sxy"
	"!scripts/mhost/rpg/controls/female.names.sxy"
	"!scripts/mhost/rpg/controls/line.editor.sxy"
	"!scripts/mhost/rpg/controls/attribute.control.sxy"
)

(namespace EntryPoint)
	(alias Main EntryPoint.Main)
	
(using Sys)
(using Sys.Maths)
(using Sys.Type)
(using Sys.MPlat)
(using Sys.Random)
(using Sys.Type.Strings)
(using MHost)
(using MHost.OS)
(using MHost.Graphics)
(using Rococo)
(using Rococo.Graphics)
(using Rococo.Audio)

(using Sys.Maths.F32)
(using Sys.Maths.I32)

(namespace RPG)
(namespace MHost.Graphics)

(using RPG)

(interface RPG.IInputThread
	(extends Sys.ICoroutine)
	(SetScreen (IScreen screen)->)
)

(class GuiInputThread 
	(implements RPG.IInputThread)
	(IEngine engine)
	(IScreen activeScreen)
)

(method GuiInputThread.SetScreen (IScreen screen)-> :
	(this.activeScreen = screen)
)

(method GuiInputThread.Construct (IEngine engine) : 
	(this.engine = engine)
)

(factory RPG.NewGuiInputThread IInputThread (IEngine engine):
	(construct GuiInputThread engine)
)

(method GuiInputThread.Run -> :
	(IKeyboard keyboard (Keyboard))
/*	(Int32 leftKey = (keyboard.GetVKeyFromName "A"))
	(Int32 rightKey = (keyboard.GetVKeyFromName "D"))
	(Int32 fireKey = (keyboard.GetVKeyFromName "SPACEBAR"))
	(Int32 upKey = (keyboard.GetVKeyFromName "W"))
	(Int32 downKey = (keyboard.GetVKeyFromName "S")) */
	
	(MouseEvent ev)
	(KeyboardEvent key)
	
	(KeyState keys)
			
	(while this.engine.IsRunning
		(this.engine.PollKeyState keys)
		
		(while (this.engine.GetNextMouseEvent ev)
			(TranslateMouseEvent ev this.activeScreen)
		)
		
		(while (this.engine.GetNextKeyboardEvent key)
			(TranslateKeyboardEvent key this.activeScreen)
		)
		
		(yield 1000)
	)
)

(struct CommandButton
	(Rectf rect)
	(IString text)
)

(interface RPG.IOpeningScreen (extends MHost.IScreen)
	(OnMenuSelect (MenuSelectArgs args)->)
)

(class OpeningScreen 
	(implements RPG.IOpeningScreen)
	(implements MHost.IEventHandler)
	
	(IEngine engine) // The CPP side of flow control
	
	(Vec2 screenSpan)
	(Vec2 cursorPos)
	
	(IMenu menu)
	(ICreditsControl credits)
	
	(IUIStack uistack)
	(IBundle bundle)
)

(method OpeningScreen.Construct (IEngine engine)(IBundle bundle) -> : 
	(this.engine = engine)
	(this.bundle = bundle)
	
	(IMenu menu (MHost.Graphics.NewVerticalMenu 10))
	(menu.SetStyle 0 4 "Tahoma")
	
	(IWidgetContext nulWC)
	(menu.AddTextItem "New Game" nulWC) 				
	(menu.AddTextItem "Recruit Adventurerer" nulWC)	
	(menu.AddTextItem "Options" nulWC)					
	(menu.AddTextItem "Credits" nulWC)					
	(menu.AddTextItem "Exit Game" nulWC)	

	(this.menu = menu)
	
	(this.uistack = (MHost.Graphics.NewUIStack))
	(this.uistack.AddTopLevelControl menu "menu")
	(this.screenSpan = -1 -1)
	
	(this.credits = (NewCredits this.uistack))
)

(method OpeningScreen.OnMenuSelect (MenuSelectArgs args)-> :
	(if (args.menuIndex == 3)
		(this.uistack.AddTopLevelControl this.credits "credits")
		(this.credits.BeginScroll)
	)
	
	(if (args.menuIndex == 1)
		(this.bundle.SetActiveScreen (#IdScreenAddCharacter))
	)
	
	(if (args.menuIndex == 4)
		(this.engine.Shutdown)
	)
)

(method OpeningScreen.OnMouseDown (Int32 button) (Float32 x)(Float32 y) -> :
	(Vec2 pos = x y)
	
	(IEventHandler evHandler = this)
	
	(OnUIStackItem q =
		(closure (UIStackItem item)->(Bool terminate):
			(MouseClickArgs args = pos evHandler button)
			(item.handler.OnMouseDown args)
		)
	)
	
	(this.uistack.RouteMouseEvent pos q)
)

(method OpeningScreen.OnMouseUp (Int32 button)(Float32 x)(Float32 y) -> :
	(Vec2 pos = x y)
	
	(IEventHandler evHandler = this)
	
	(OnUIStackItem q = 
		(closure (UIStackItem item)->(Bool terminate):
			(MouseClickArgs args = pos evHandler button)
			(item.handler.OnMouseUp args)
		)
	)
	(this.uistack.RouteMouseEvent pos q)
)

(method OpeningScreen.OnWheel (Int32 spin) -> :
)

(method OpeningScreen.OnAsciiChar (Int32 asciiValue)-> :
	
)

(method OpeningScreen.OnSysKey (Bool isUp) (Int32 virtualKeyCode)-> :
)

(function Layout (OpeningScreen screen)(IGui g)-> :
	(Rectf menuRect)
	(MHost.Graphics.GetCentredRect screen.screenSpan 1100 620 menuRect)
	(screen.menu.LayoutFixedRect menuRect g)
)

(method OpeningScreen.RenderGui (IGui g) -> :
	(Vec2 screenSpan)
	(g.GetScreenSpan screenSpan)
	
	(if (screenSpan != this.screenSpan)
		(this.screenSpan = screenSpan)
		(this.credits.Centre 40 40 screenSpan)
		(Layout this g)
	)
	
	(RenderTree this.uistack g)
)

(factory RPG.NewOpeningScreen IScreen (IEngine engine) (IBundle bundle): 
	(construct OpeningScreen engine bundle)
)

(macro Rococo.IdScreenOpening in out (out.AddAtomic "1"))
(macro Rococo.IdScreenAddCharacter in out (out.AddAtomic "2"))

(class GameBundle (defines RPG.IBundle)
	(ISprites sprites)
	(IEngine engine)
	(ILegacySoundControl sound)
	(IInputThread inputThread)
	(ICoroutineControl coroutines)
	(IScreen openingScreen)
	(IScreen addCharacterScreen)
	(IScreen activeScreen)
)

(method GameBundle.Construct : 
	(ISprites sprites (Sprites))
	(sprites.AddEachSpriteInDirectory "!textures/mhost/rpg")
	(sprites.LoadAllSprites)
	(this.sprites = sprites)
	
	(this.engine = (Engine))
	(this.sound = (Rococo.Audio.LegacySoundControl))
	
	(this.coroutines = (Coroutines))
	
	(this.inputThread = (NewGuiInputThread this.engine))
	(this.coroutines.Add this.inputThread)
	
	(this.openingScreen = (NewOpeningScreen this.engine this))
	(this.addCharacterScreen = (NewAddCharacterScreen this.engine))
)

(method GameBundle.Engine -> (IEngine engine):
	(engine = this.engine)
)

(method GameBundle.Sound -> (ILegacySoundControl sound):
	(sound = this.sound)
)

(method GameBundle.AddCoroutine -> (ICoroutine coroutine):
	(coroutines.Add coroutine)
)

(factory RPG.NewGameBundle RPG.IBundle : (construct GameBundle))

(method GameBundle.Run -> :
	(while this.engine.IsRunning
		(while (this.coroutines.Continue > 0))
		
		(IScreen screen = this.activeScreen)
		
		(GuiPopulator p =
			(closure (IGui gui) -> : 
				(screen.RenderGui gui)
			)
		)
		
		(this.engine.Render p)	
		(this.engine.YieldForSystemMessages 5)
	)
	
	(this.coroutines.ReleaseAll)
)

(method GameBundle.SetActiveScreen (Int32 idScreen)-> :
	(IScreen screen)
	
	(if (idScreen == (#IdScreenOpening))
		(screen = this.openingScreen)
	else 
		(if (idScreen == (#IdScreenAddCharacter))
			(screen = this.addCharacterScreen)
		else
			(Sys.Throw 0 "Bad screen id")
		)
	)
	
	(this.inputThread.SetScreen screen)
	(this.activeScreen = screen)
)

(function Main (Int32 id) -> (Int32 exitCode):
	(Sys.Random.Seed 0)
	(IBundle bundle (NewGameBundle))
	(bundle.SetActiveScreen (#IdScreenOpening))
	(bundle.Run)
)
