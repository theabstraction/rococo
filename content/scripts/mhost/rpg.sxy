(' #import (mhost "MHost"))

(' #include 
	"!scripts/mhost/rpg/controls/credits.sxy"
	"!scripts/mhost/rpg/controls/gen.name.sxy"
	"!scripts/mhost/rpg/controls/surnames.sxy"
	"!scripts/mhost/rpg/controls/female.names.sxy"
	"!scripts/mhost/rpg/controls/line.editor.sxy"
	"!scripts/mhost/rpg/controls/attribute.control.sxy"
	"!scripts/mhost/rpg/controls/drop.menu.sxy"
	"!scripts/mhost/rpg/controls/tooltip.sxy"
	"!scripts/mhost/rpg/controls/toggle.label.sxy"
	"!scripts/mhost/rpg/controls/label.button.sxy"
	"!scripts/mhost/rpg/controls/screens/new.game.screen.sxy"
	"!scripts/mhost/rpg/controls/screens/world.screen.sxy"
	"!scripts/mhost/rpg/controls/screens/add.character.sxy"
	"!scripts/mhost/rpg/controls/image.button.sxy"
)

(namespace EntryPoint)
	(alias Main EntryPoint.Main)

(using Sys)
(using Sys.Maths)
(using Sys.Maths.F32)
(using Sys.Type)
(using Sys.Random)
(using Sys.Type.Strings)

(using MPlat)
(using MHost)
(using MHost.Events)
(using MHost.OS)
(using MHost.Graphics)
(using MHost.Graphics.Utils)
(using MHost.Graphics.Widgets)
(using Rococo)
(using Rococo.Graphics)
(using Rococo.Audio)

(using Sys.Maths.I32)

(namespace RPG)


(using RPG)

(interface RPG.IInputThread
	(extends Sys.ICoroutine)
	(SetScreen (IScreen screen)->)
	(UIControl -> (IUIControl uiControl))
)

(class GuiInputThread 
	(implements RPG.IInputThread)
	(implements MHost.OS.IUIControl)
	(IEngine engine)
	(IScreen activeScreen)
	(IEventHandler modalSink)
)

(method GuiInputThread.UIControl -> (IUIControl control):
	(control = this)
)

(method GuiInputThread.Destruct -> :
	(engine.ReleaseMouse)
)

(method GuiInputThread.CaptureMouse (IEventHandler handler)-> :
	(this.modalSink = handler) 
	(this.engine.CaptureMouse)
)

(method GuiInputThread.ReleaseMouse (IEventHandler handler)-> :
	(IEventHandler nullHandler)
	(this.modalSink = nullHandler)
	(this.engine.ReleaseMouse)
)

(method GuiInputThread.SetScreen (IScreen screen)-> :
	(this.activeScreen = screen)
)

(method GuiInputThread.Construct (IEngine engine) : 
	(this.engine = engine)
)

(factory RPG.NewGuiInputThread IInputThread (IEngine engine):
	(construct GuiInputThread engine)
)

(function MouseDegreesPerDelta -> (Float32 degreesPerDelta): (degreesPerDelta = 0.2))

(method GuiInputThread.Run -> :
	(IKeyboard keyboard (Keyboard))
/*	(Int32 leftKey = (keyboard.GetVKeyFromName "A"))
	(Int32 rightKey = (keyboard.GetVKeyFromName "D"))
	(Int32 fireKey = (keyboard.GetVKeyFromName "SPACEBAR"))
	(Int32 upKey = (keyboard.GetVKeyFromName "W"))
	(Int32 downKey = (keyboard.GetVKeyFromName "S")) */
	
	(MouseEvent mouseEvent)
	(KeyboardEvent keyEvent)
	
//	(KeyState keys)
			
	(while this.engine.IsRunning
	//	(this.engine.PollKeyState keys)
		
		(while (this.engine.GetNextMouseEvent mouseEvent)
			(TranslateMouseEvent mouseEvent this.activeScreen this.modalSink)
		)
			
		(while (this.engine.GetNextKeyboardEvent keyEvent)
			(TranslateKeyboardEvent keyEvent this.activeScreen)
		)
		
		(Vec2 mouseDelta)
		(this.engine.GetNextMouseDelta mouseDelta)

		(if ((mouseDelta.x != 0) or (mouseDelta.y != 0))
			(Float32 mouseDegreesPerDelta = MouseDegreesPerDelta)
			(Vec2 mouseDeltaDegrees = mouseDelta * mouseDegreesPerDelta)	

			(cast this.activeScreen -> IEventHandler dispatch)
			(dispatch.UpdateMouseLook mouseDeltaDegrees)
		)
		
		(yield 1000)
	)
)

(struct CommandButton
	(Rectf rect)
	(IString text)
)

(interface RPG.IOpeningScreen (extends MHost.Graphics.IScreen)
	(OnMenuSelect (MenuSelectArgs args)->)
)

(class OpeningScreen 
	(implements RPG.IOpeningScreen)
	(implements IEventHandler)
	
	(IEngine engine) // The CPP side of flow control
	
	(Vec2 screenSpan)
	(Vec2 cursorPos)
	
	(IMenu menu)
	(ICreditsControl credits)
	
	(IUIStack uistack)
	(IBundle bundle)
)

(method OpeningScreen.Construct (IEngine engine)(IBundle bundle) -> : 
	(this.engine = engine)
	(this.bundle = bundle)
	
	(IMenu menu (NewVerticalMenu 10))
	(menu.SetStyle 0 4 "Tahoma")
	
	(IWidgetContext nulWC)
	(menu.AddTextItem "New Game" nulWC) 				
	(menu.AddTextItem "Recruit Adventurerer" nulWC)	
	(menu.AddTextItem "Options" nulWC)					
	(menu.AddTextItem "Credits" nulWC)					
	(menu.AddTextItem "Exit Game" nulWC)	

	(this.menu = menu)
	
	(this.uistack = (MHost.Graphics.NewUIStack))
	(this.uistack.AddTopLevelControl menu "menu")
	(this.screenSpan = -1 -1)
	
	(this.credits = (NewCredits this.uistack))
)

(method OpeningScreen.OnMenuSelect (MenuSelectArgs args)-> :
	(if (args.menuIndex == 0)
		(this.bundle.SetActiveScreen (#IdScreenNewGame))
	)
	
	(if (args.menuIndex == 1)
		(this.bundle.SetActiveScreen (#IdScreenAddCharacter))
	)
	
	(if (args.menuIndex == 3)
		(this.uistack.RemoveFromTopLevel this.menu)
		(this.uistack.AddTopLevelControl this.credits "credits")
		(this.credits.BeginScroll)

		(IAudio audio (GetAudio))
		(audio.SetMP3Music "!music/credits.mp3")
	)
	
	(if (args.menuIndex == 4)
		(this.engine.Shutdown)
	)
)

(method OpeningScreen.OnMouseDown (Int32 button) (Float32 x)(Float32 y) -> :
	(Vec2 pos = x y)
	
	(IEventHandler evHandler = this)
	
	(OnUIStackItem q =
		(closure (UIStackItem item)->(Bool terminate):
			(MouseClickArgs args = pos evHandler button)
			(item.handler.OnMouseDown args)
		)
	)
	
	(this.uistack.RouteMouseEvent pos q)
)

(method OpeningScreen.OnMouseMove (Float32 x)(Float32 y) -> :
	(Vec2 pos = x y)
	
	(IEventHandler evHandler = this)
		
	(OnUIStackItem q = 
		(closure (UIStackItem item)->(Bool terminate):
			(MouseClickArgs args = pos evHandler 0)
			(item.handler.OnMouseMove args)
		)
	)
	(this.uistack.RouteMouseEvent pos q)
)

(method OpeningScreen.OnMouseUp (Int32 button)(Float32 x)(Float32 y) -> :
	(Vec2 pos = x y)
	
	(IEventHandler evHandler = this)
	
	(OnUIStackItem q = 
		(closure (UIStackItem item)->(Bool terminate):
			(MouseClickArgs args = pos evHandler button)
			(item.handler.OnMouseUp args)
		)
	)
	(this.uistack.RouteMouseEvent pos q)
)

(method OpeningScreen.OnWheel (Int32 spin) -> :
)

(method OpeningScreen.OnAsciiChar (Int32 asciiValue)-> :
	
)

(method OpeningScreen.OnSysKey (Bool isUp) (Int32 virtualKeyCode)-> :
)

(function Layout (OpeningScreen screen)(IGui g)-> :
	(Rectf menuRect = 10 10 400 200)
	//(MHost.Graphics.Utils.GetCentredRect screen.screenSpan 1100 620 menuRect)
	(screen.menu.LayoutFixedRect menuRect g)
)

(method OpeningScreen.RenderGui (IGui g) -> :
	(Vec2 screenSpan)
	(g.GetScreenSpan screenSpan)

	(BitmapLocation splashScreen)
	(if (this.engine.TryGetSpriteSpec "!portraits/painting_1.jpg" splashScreen)
		(Rectf fullScreenQuad = 0 0 screenSpan.x screenSpan.y)
		(g.StretchSprite fullScreenQuad splashScreen)
	)
	
	(if (screenSpan != this.screenSpan)
		(this.screenSpan = screenSpan)
		(this.credits.Centre 40 40 screenSpan)
		(Layout this g)
	)
	
	(if (this.uistack.NumberOfRootElements == 0)
		(this.uistack.AddTopLevelControl this.menu "menu")
	)
	
	(RenderTree this.uistack g)
)

(factory RPG.NewOpeningScreen IScreen (IEngine engine) (IBundle bundle): 
	(construct OpeningScreen engine bundle)
)

(macro RPG.IdScreenNewGame in out (out.AddAtomic "0"))
(macro RPG.IdScreenOpening in out (out.AddAtomic "1"))
(macro RPG.IdScreenAddCharacter in out (out.AddAtomic "2"))
(macro RPG.IdScreenWorld in out (out.AddAtomic "3"))

(class GameBundle (defines RPG.IBundle)
	(ISpriteBuilder spriteBuilder)
	(IEngine engine)
	(IInputThread inputThread)
	(ICoroutineControl coroutines)
	(IScreen openingScreen)
	(IScreen addCharacterScreen)
	(IScreen activeScreen)
	(IScreen newGameScreen)
	(IScreen worldScreen)
)

(method GameBundle.Construct : 
	(ISpriteBuilder spriteBuilder (SpriteBuilder))
	(spriteBuilder.Clear)
	(spriteBuilder.AddEachSpriteInDirectory "!textures/toolbars")
	(spriteBuilder.AddEachSpriteInDirectory "!textures/faces/male")
	(spriteBuilder.AddEachSpriteInDirectory "!textures/faces/female")
	(spriteBuilder.AddSprite "!portraits/painting_1.jpg")	
	(spriteBuilder.LoadAllSprites)
	(this.spriteBuilder = spriteBuilder)
	
	(this.engine = (Engine))
	(this.engine.SetEditorVisibility false)
	
	(this.coroutines = (Coroutines))
	
	(this.inputThread = (NewGuiInputThread this.engine))
	(this.coroutines.Add this.inputThread)
	
	(this.openingScreen = (NewOpeningScreen this.engine this))
	(this.addCharacterScreen = (NewAddCharacterScreen this))
	(this.newGameScreen = (NewNewGameScreen this))
	(this.worldScreen = (NewWorldScreen this))
)

(method GameBundle.UIControl -> (IUIControl uiControl): 
	(uiControl = this.inputThread.UIControl)
)

(method GameBundle.Engine -> (IEngine engine):
	(engine = this.engine)
)

(method GameBundle.AddCoroutine -> (ICoroutine coroutine):
	(coroutines.Add coroutine)
)

(factory RPG.NewGameBundle RPG.IBundle : (construct GameBundle))

(struct ArgsOnFrame
	(Int64 frameIndex)
	(Int64 frameTime)
	(Float32 dt)
)

(alias ArgsOnFrame RPG.ArgsOnFrame)

(method GameBundle.Run -> :
	(Int64 frameIndex = 0)
	(Int64 frameTime = 0)
	(Int64 frameStart = Sys.Time.TickCount)
	(Int64 tickHz = Sys.Time.TickHz)
	(Int64 maxDt = (tickHz / 10))
	
	(while this.engine.IsRunning
		(Int64 frameEnd = Sys.Time.TickCount)
		(Int64 dtTicks = frameEnd - frameStart)
		(dtTicks = Sys.Maths.I64.Clamp dtTicks 0 maxDt)
		(frameTime += dtTicks)
		
		(while (this.coroutines.Continue > 0))
		
		(IScreen screen = this.activeScreen)
		
		(GuiPopulator p =
			(closure (IGui gui) -> : 
				(screen.RenderGui gui)
			)
		)
		
		(cast screen -> IEventHandler dispatchToScreen)
		
		(Float32 dt = Sys.Maths.I64.ToFloat32 dtTicks)
		(ArgsOnFrame args = frameIndex frameTime dt)
		(dispatchToScreen.OnFrame args)
		
		(this.engine.Render p)	
		(this.engine.YieldForSystemMessages 5)
		
		(frameIndex += 1)
	)
	
	(this.coroutines.ReleaseAll)
)

(method GameBundle.SetActiveScreen (Int32 idScreen)-> :
	(IScreen screen)
	
	(if (idScreen == (#IdScreenNewGame))
		(screen = this.newGameScreen)
	else 
		(if (idScreen == (#IdScreenOpening))
			(screen = this.openingScreen)
		else 
			(if (idScreen == (#IdScreenAddCharacter))
				(screen = this.addCharacterScreen)
			else
				(if (idScreen == (#IdScreenWorld))
					(screen = this.worldScreen)
				)
			)
		)
	)
	
	(this.inputThread.SetScreen screen)
	(this.activeScreen = screen)
)

(function Main (Int32 id) -> (Int32 exitCode):
	(IRendererConfig rc (RendererConfig))
	
	(IAudio audio (GetAudio))
	(audio.SetMP3Music "!music/intro.mp3")
	
	(SampleStateDef fontDef)
	(fontDef.method = (#SampleMethodLinear))
	(fontDef.u = (#SampleFilterBorder))
	(fontDef.v = (#SampleFilterBorder))
	(fontDef.w = (#SampleFilterBorder))
	(fontDef.borderColour = 0 0 0 0)
	(rc.SetSampler fontDef (#SampleIndexFonts))

	(SampleStateDef hqFontDef)
	(hqFontDef.method = (#SampleMethodLinear))
	(hqFontDef.u = (#SampleFilterBorder))
	(hqFontDef.v = (#SampleFilterBorder))
	(hqFontDef.w = (#SampleFilterBorder))
	(hqFontDef.borderColour =	0 0 0 0)
	(rc.SetSampler hqFontDef (#SampleIndexHQFontGlyphs))
	
	(SampleStateDef spriteDef)
	(spriteDef.method = (#SampleMethodPoint))
	(spriteDef.u = (#SampleFilterBorder))
	(spriteDef.v = (#SampleFilterBorder))
	(spriteDef.w = (#SampleFilterBorder))
	(spriteDef.borderColour  = 0 0 0 0)
	(rc.SetSampler spriteDef (#SampleIndexSprites))

	(SampleStateDef matDef)
	(matDef.method = (#SampleMethodLinear))
	(matDef.u = (#SampleFilterWrap))
	(matDef.v = (#SampleFilterWrap))
	(matDef.w = (#SampleFilterWrap))
	(matDef.borderColour  =	0 0 0 0)
	(rc.SetSampler matDef (#SampleIndexMaterials))

	(SampleStateDef eDef)
	(eDef.method = (#SampleMethodLinear))
	(eDef.u = (#SampleFilterWrap))
	(eDef.v = (#SampleFilterWrap))
	(eDef.w = (#SampleFilterWrap))
	(eDef.borderColour = 0 0 0 0)
	(rc.SetSampler eDef (#SampleIndexEnvironmentalMap))

	(SampleStateDef shadowDef)
	(shadowDef.method = (#SampleMethodLinear))
	(shadowDef.u = (#SampleFilterBorder))
	(shadowDef.v = (#SampleFilterBorder))
	(shadowDef.w = (#SampleFilterBorder))
	(shadowDef.borderColour = 0 0 0 0)
	(rc.SetSampler shadowDef (#SampleIndexShadowMap))
	
	(Sys.Random.Seed 0)
	(IBundle bundle (NewGameBundle))
	(bundle.SetActiveScreen (#IdScreenOpening))
	(bundle.Run)
)
