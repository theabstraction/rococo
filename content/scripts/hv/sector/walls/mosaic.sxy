(' #file.type rococo.hv)

(' #include 
	"!scripts/mplat_sxh.sxy"
	"!scripts/hv_sxh.sxy"
	"!scripts/hv/hv.types.sxy"
	"!scripts/types.sxy"
	"!scripts/mplat_types.sxy"
)

(namespace EntryPoint)
	(alias Main EntryPoint.Main)
	

(using HV)
(using Rococo)
(using Rococo.Entities)
(using Rococo.Graphics)
(using Sys.Type)
(using Sys.Maths)
(using Sys.Geometry.F32)
(using Sys.Random)

(function TesselateWallAndShelf (WallSegment segment)(ISectorWallTesselator sector)(IQuadStackTesselator qst)(Float32 uStart)->(Float32 uEnd) :
	(IScriptConfig config (ScriptConfig))
	(Float32 uvScale = (config.GetFloat "UV scale" 0.0325 -100 100))
	(Float32 tileSize = (config.GetFloat "Tile size" 0.5 0.1 10))
	(Float32 relFreizeDrop = (config.GetFloat "Frieze drop" 0.9 0.6 0.999))
	(Float32 relSkirtHeight = (config.GetFloat "Skirt height" 0.1 0.001 0.3))
	
	(Float32 u0 = uStart)
	(Float32 u1 = (u0 + (segment.span.x * uvScale)))
	(uEnd = u1)
	
	(IInstances instances (Instances))
	
	(MaterialVertexData black)
	(sector.GetMaterial black "brickwork")
	
	(MaterialVertexData white)
	(sector.GetMaterial white "cement")
	
	(MaterialVertexData skirt)
	(sector.GetMaterial skirt "rails")
	
	(qst.SetBasis segment.tangent segment.normal segment.vertical)
	
	(qst.Clear)
		
	(QuadVertices qv)
	(qv.positions = segment.quad)
	(qv.normals.a = segment.normal)
	(qv.normals.b = segment.normal)
	(qv.normals.c = segment.normal)
	(qv.normals.d = segment.normal)
	(qv.uv.left = u0)
	(qv.uv.right = u1)
	(qv.uv.top = (segment.quad.a.z * uvScale))
	(qv.uv.right = u1)
	(qv.uv.bottom = (segment.quad.d.z * uvScale))
	
	(qst.PushQuad qv black)
	(qst.SplitAcrossTangent relFreizeDrop 0x00000000 black.colour black.colour skirt black)
	(qst.MoveOutputToInputWithMat black)
	(qst.SplitAcrossTangent relSkirtHeight black.colour black.colour 0x00000000 black skirt)
	(qst.MoveOutputToInputWithMat black)
	
	(Rectf uv = 0 0 1 1)
	(qst.TileMosaic black white uv tileSize)
	
	(ITriangleList tris = sector.WallTriangles)
	
	(VertexTriangle topLeft)
	(VertexTriangle bottomRight)
	(while (qst.PopOutputAsTriangles topLeft bottomRight)
		(tris.AddTriangle topLeft)
		(tris.AddTriangle bottomRight)
	)
)

(function Main (Int32 id)->(Int32 exitCode):
	(ISectorWallTesselator sector (SectorWallTesselator))
	(Int32 nSegments = sector.NumberOfSegments)
	(Float32 u = 0)
	
	(IQuadStackTesselator qst (QuadStackTesselator))
		
	(#for (Int32 i = 0)(i < nSegments)(#inc i)
		(WallSegment seg)
		(sector.GetSegment i seg)
		(TesselateWallAndShelf seg sector qst u -> u)
	)
)