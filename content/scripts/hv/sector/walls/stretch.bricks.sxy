(' #file.type rococo.hv)

(' #include 
	"!scripts/mplat.sxh.sxy"
	"!scripts/hv.sxh.sxy"
	"!scripts/hv/hv.types.sxy"
	"!scripts/types.sxy"
	"!scripts/mplat.types.sxy"
)

(namespace EntryPoint)
	(alias Main EntryPoint.Main)
	

(using HV)
(using Rococo)
(using Rococo.Entities)
(using Rococo.Graphics)
(using Sys.Type)
(using Sys.Maths)
(using Sys.Geometry.F32)
(using Sys.Random)

(function SetColours (QuadColours q)(Int32 colour)-> :
	(q.a = 0)
	(q.b = 0)
	(q.c = 0)
	(q.d = 0)
)

(function AddQuadToWall (ITriangleList tris)(QuadVertices q)(MaterialVertexData mat)-> :
	(ObjectVertex a = q.positions.a q.normals.a (q.uv.left  q.uv.top)    mat)
	(ObjectVertex b	= q.positions.b q.normals.b (q.uv.right q.uv.top)    mat)
	(ObjectVertex c = q.positions.c q.normals.c (q.uv.right q.uv.bottom) mat)
	(ObjectVertex d = q.positions.d q.normals.d (q.uv.left  q.uv.bottom) mat)
	(tris.AddQuad a b c d)
)

(function AddColouredQuadToWall (ITriangleList tris)(QuadVertices q)(MaterialVertexData mat)(Int32 aColour)(Int32 bColour)(Int32 cColour)(Int32 dColour)-> :
	(ObjectVertex a = q.positions.a q.normals.a (q.uv.left  q.uv.top)    mat)
	(ObjectVertex b	= q.positions.b q.normals.b (q.uv.right q.uv.top)    mat)
	(ObjectVertex c = q.positions.c q.normals.c (q.uv.right q.uv.bottom) mat)
	(ObjectVertex d = q.positions.d q.normals.d (q.uv.left  q.uv.bottom) mat)
	(a.mat.colour = aColour)
	(b.mat.colour = bColour)
	(c.mat.colour = cColour)
	(d.mat.colour = dColour)
	(tris.AddQuad a b c d)
)

(function TesselateBrickwork (IFieldTesselator ft)(WallSegment segment)(ISectorWallTesselator sector) (Float32 extrusion)(Float32 cementWidth)-> :
	(Int32 nColumns = ft.NumberOfColumns)
	(Int32 nRows = ft.NumberOfRows)
	
	(MaterialVertexData brick)
	(sector.GetMaterial brick "brickwork")
	
	(ITriangleList tris = sector.WallTriangles)
		
	(#for (Int32 i = 0)(i < nColumns)(#inc i)
		(QuadVertices q)
		(QuadVertices t)
		(QuadVertices l)
		(QuadVertices r)
		(QuadVertices b)
		
		(ft.GetStretchBondedBrick i 0 q t l r b cementWidth extrusion)	
		(AddColouredQuadToWall tris q brick 0 0 brick.colour brick.colour)
		(AddQuadToWall tris t brick)
		(AddColouredQuadToWall tris l brick brick.colour 0 0 brick.colour)
		(AddColouredQuadToWall tris r brick  0 0 brick.colour brick.colour)
		(AddQuadToWall tris b brick)
			
		(#for (Int32 j = 1)(j < (nRows - 1))(#inc j)		
			(ft.GetStretchBondedBrick i j q t l r b cementWidth extrusion)	
			(AddQuadToWall tris q brick)
			(AddQuadToWall tris t brick)
			(AddQuadToWall tris l brick)
			(AddQuadToWall tris r brick)
			(AddQuadToWall tris b brick)
		)
		
		(ft.GetStretchBondedBrick i (nRows - 1) q t l r b cementWidth extrusion)	
		(AddColouredQuadToWall tris q brick brick.colour brick.colour 0 0)
		(AddQuadToWall tris t brick)
		(AddColouredQuadToWall tris l brick 0 brick.colour brick.colour  0)
		(AddColouredQuadToWall tris r brick brick.colour brick.colour 0  0)
		(AddQuadToWall tris b brick)
	)
	
	(MaterialVertexData cement)
	(sector.GetMaterial cement "cement")
	
	(#for (Int32 i = 0)(i < nColumns)(#inc i)
		(QuadVertices q)	
		(ft.GetBrickJoinRight i 0 q cementWidth)	
		(AddColouredQuadToWall tris q cement 0 0 cement.colour cement.colour )
		(#for (Int32 j = 1)(j < (nRows - 1))(#inc j)		
			(ft.GetBrickJoinRight i j q cementWidth)			
			(AddQuadToWall tris q cement)
		)
		(ft.GetBrickJoinRight i (nRows - 1) q cementWidth)	
		(AddColouredQuadToWall tris q cement cement.colour cement.colour 0 0)
	)
	
	(QuadVertices q)
	(ft.GetBrickBedTop 0 q cementWidth)	
	(AddColouredQuadToWall tris q cement cement.colour cement.colour 0 0)	
	
	(#for (Int32 j = 1)(j < nRows)(#inc j)		
		(ft.GetBrickBedTop j q cementWidth)		
		(AddQuadToWall tris q cement)
	)
)

(function Main (Int32 id)->(Int32 exitCode):
	(ISectorWallTesselator sector (SectorWallTesselator))
	(Int32 nSegments = sector.NumberOfSegments)
	(Float32 u = 0)
	
	(IFieldTesselator ft (FieldTesselator))
	
	(IScriptConfig config (ScriptConfig))
	(Float32 dX = (config.GetFloat "Cell DX" 2.0 0.3 10))
	(Float32 dY = (config.GetFloat "Cell DY" 1.0 0.3 10))
	(Float32 uvScale = (config.GetFloat "UV Scale" 0.25 0.01 10))
	(Float32 extrusion = (config.GetFloat "Extrusion" 0.15 0.001 0.2))
	(Float32 cementWidth = (config.GetFloat "Cement thickness (m)" 0.005 0.001 1))
			
	(#for (Int32 i = 0)(i < nSegments)(#inc i)
		(WallSegment seg)
		(sector.GetSegment i seg)
		
		(ft.InitByFixedCellWidth seg.quad dX dY)
		
		(if (ft.NumberOfColumns < 2)
			(IMessaging messaging (Messaging))
			(messaging.Log "Cell width too great for the span of the room.")
			(return)
		)
		
		(Float32 u1 = (u + (uvScale * seg.span.x)))
		
		(Float32 v0 = (uvScale * seg.quad.a.z))
		(Float32 v1 = (uvScale * seg.quad.c.z))
		(Vec2 uvA = u  v0)
		(Vec2 uvC = u1 v1)
		
		(ft.SetUV uvA uvC)
		
		(Int32 nColumns = ft.NumberOfColumns)
		(Int32 nRows = ft.NumberOfRows)
		(#for (Int32 x = 0)(x < nColumns)(#inc x)
			(#for (Int32 y = 0)(y < nRows)(#inc y)
				(ft.RandomizeField x y 0 1)
			)
		)
		
		(TesselateBrickwork ft seg sector extrusion cementWidth)
		(u = u1)
	)
)