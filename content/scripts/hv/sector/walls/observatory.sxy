(' #file.type rococo.hv)

(' #include 
	"!scripts/mplat_sxh.sxy"
	"!scripts/hv_sxh.sxy"
	"!scripts/hv/hv.types.sxy"
	"!scripts/types.sxy"
		"!scripts/mplat_types.sxy"
)

(namespace EntryPoint)
	(alias Main EntryPoint.Main)
	

(using HV)
(using Rococo)
(using Rococo.Entities)
(using Rococo.Graphics)
(using Sys.Type)
(using Sys.Maths)
(using Sys.Geometry.F32)
(using Sys.Random)

(function TesselateWallAndShelf (WallSegment segment)(ISectorWallTesselator sector)(IQuadStackTesselator qst)(Float32 uStart)->(Float32 uEnd) :
	(IScriptConfig config (ScriptConfig))
	(Float32 uvScale = (config.GetFloat "UV scale" 0.5 -100 100))
	
	(Vec2 y0Range)
	(config.GetFloatRange "y0 range" y0Range 0.6 0.9 0.51 0.999)
	
	(Vec2 y1Range)
	(config.GetFloatRange "y1 range" y1Range 0.1 0.4 0.001 0.49)
	
	(Vec2 x1Range)
	(config.GetFloatRange "x1 range" x1Range 0.6 0.9 0.51 0.999)
	
	(Vec2 x0Range)
	(config.GetFloatRange "x0 range" x0Range 0.1 0.4 0.001 0.49)
	
	(Vec2 depthRange)
	(config.GetFloatRange "Depth range" depthRange 0.25 0.75 0.1 1)
	
	(Float32 relFreizeDrop = (config.GetFloat "Frieze drop" 0.9 0.6 0.999))
	(Float32 relSkirtHeight = (config.GetFloat "Skirt height" 0.1 0.001 0.3))
	
	(Float32 u0 = uStart)
	(Float32 u1 = (u0 + (segment.span.x * uvScale)))
	(uEnd = u1)
	
	(IInstances instances (Instances))
	
	(MaterialVertexData brick)
	(sector.GetMaterial brick "brickwork")
	
	(MaterialId metId = (instances.GetRandomMaterialId (#MaterialCategoryMetal)))
	(MaterialVertexData metal = 0x8F000000 metId 0.1)
	(MaterialVertexData glass = 0x10000000 metId 0.9)
	
	(MaterialVertexData frame)
	(sector.GetMaterial frame "rails")
	
	(Float32 y0 = (AnyFloat y0Range.x y0Range.y))
	(Float32 y1 = (AnyFloat y1Range.x y1Range.y))
	
	(Float32 x0 = (AnyFloat x0Range.x x0Range.y))
	(Float32 x1 = (AnyFloat x1Range.x x1Range.y))
	
	(Float32 depth = (AnyFloat depthRange.x depthRange.y))
	
	(Rectf hole = x0 y0 x1 y1)
	
	(qst.Clear)
		
	(QuadVertices qv)
	(qv.positions = segment.quad)
	(qv.normals.a = segment.normal)
	(qv.normals.b = segment.normal)
	(qv.normals.c = segment.normal)
	(qv.normals.d = segment.normal)
	(qv.uv.left = u0)
	(qv.uv.right = u1)
	(qv.uv.top = (segment.quad.a.z * uvScale))
	(qv.uv.right = u1)
	(qv.uv.bottom = (segment.quad.d.z * uvScale))
	(qv.colours.a = brick.colour)
	(qv.colours.b = brick.colour)
	(qv.colours.c = brick.colour)
	(qv.colours.d = brick.colour)
	
	(qst.PushQuad qv brick)
	(qst.SplitAcrossTangent relSkirtHeight brick.colour brick.colour 0x1F000000 brick brick)
	(qst.MoveOutputToInputWithMat brick)
	(qst.SplitAcrossTangent relFreizeDrop 0x1F000000 brick.colour brick.colour brick brick)
	(qst.MoveOutputToInputWithMat brick)
	
	(qst.Intrude hole depth uvScale metal glass)
	(qst.MoveOutputToInputWithMat metal)
	(qst.AddCuboid 0.85  1.0 0 1  0.1 0.25  frame)
	(qst.AddCuboid  0.8 0.85 0 1 0.05 0.25 frame)
	(qst.MoveInputToOutput)
	(qst.MoveOutputToInputWithMat glass)
	(qst.AddCuboid 0.45 0.55    0    1  0.09 0.25  frame)
	(qst.AddCuboid 0.49    1 0.45 0.55  0.08 0.25  frame)
	(qst.MoveInputToOutput)
	
	(ITriangleList tris = sector.WallTriangles)
	
	(VertexTriangle topLeft)
	(VertexTriangle bottomRight)
	(while (qst.PopOutputAsTriangles topLeft bottomRight)
		(tris.AddTriangle topLeft)
		(tris.AddTriangle bottomRight)
	)
)

(function Main (Int32 id)->(Int32 exitCode):
	(ISectorWallTesselator sector (SectorWallTesselator))
	(Int32 nSegments = sector.NumberOfSegments)
	(Float32 u = 0)
	
	(IQuadStackTesselator qst (QuadStackTesselator))
		
	(#for (Int32 i = 0)(i < nSegments)(#inc i)
		(WallSegment seg)
		(sector.GetSegment i seg)
		(TesselateWallAndShelf seg sector qst u -> u)
	)
)