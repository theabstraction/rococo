(' #file.type rococo.hv)

(' #include 
	"!scripts/mplat.sxh.sxy"
	"!scripts/hv.sxh.sxy"
	"!scripts/hv/hv.types.sxy"
	"!scripts/types.sxy"
	"!scripts/types.mplat.sxy"
)

(namespace EntryPoint)
	(alias Main EntryPoint.Main)
	

(using HV)
(using Rococo)
(using Rococo.Entities)
(using Rococo.Graphics)
(using Sys.Type)
(using Sys.Maths)
(using Sys.Geometry.F32)
(using Sys.Random)

(function TesselateWallAndShelf (WallSegment segment)(ISectorWallTesselator sector)(IQuadStackTesselator qst)(Float32 uStart)->(Float32 uEnd) :
	(Float32 uvScale = 0.5)
	
	(Float32 u0 = uStart)
	(Float32 u1 = (u0 + (segment.span.x * uvScale)))
	(uEnd = u1)
	
	(IInstances instances (Instances))
	
	(MaterialVertexData brick)
	(sector.GetMaterial brick "brickwork")
	
	(MaterialId metId = (instances.GetRandomMaterialId (#MaterialCategoryMetal)))
	(MaterialVertexData metal = 0x8F000000 metId 0.1)
	(MaterialVertexData glass = 0x10000000 metId 0.9)
	
	(MaterialId frameId = (instances.GetRandomMaterialId (#MaterialCategoryMarble)))
	(MaterialVertexData frame = 0x8F000000 frameId 0.0)
	
	(Float32 y0 = (AnyFloat 0.6 0.9))
	(Float32 y1 = (AnyFloat 0.1 0.4))
	
	(Float32 x0 = (AnyFloat 0.1 0.4))
	(Float32 x1 = (AnyFloat 0.6 0.9))
	
	(Float32 depth = (AnyFloat 0.25 0.75))
	
	(Rectf hole = x0 y0 x1 y1)
	
	(qst.Clear)
		
	(QuadVertices qv)
	(qv.positions = segment.quad)
	(qv.normals.a = segment.normal)
	(qv.normals.b = segment.normal)
	(qv.normals.c = segment.normal)
	(qv.normals.d = segment.normal)
	(qv.uv.left = u0)
	(qv.uv.right = u1)
	(qv.uv.top = (segment.quad.a.z * uvScale))
	(qv.uv.right = u1)
	(qv.uv.bottom = (segment.quad.d.z * uvScale))
	(qv.colours.a = brick.colour)
	(qv.colours.b = brick.colour)
	(qv.colours.c = brick.colour)
	(qv.colours.d = brick.colour)
	
	(qst.PushQuad qv brick)
	(qst.SplitAcrossTangent 0.1 brick.colour brick.colour 0x1F000000 brick brick)
	(qst.MoveOutputToInputWithMat brick)
	(qst.SplitAcrossTangent 0.9 0x1F000000 brick.colour brick.colour brick brick)
	(qst.MoveOutputToInputWithMat brick)
	
	(qst.Intrude hole depth uvScale metal glass)
	(qst.MoveOutputToInputWithMat metal)
	(qst.AddRod 0.85  1.0 0 1  0.1 0.25  frame)
	(qst.AddRod  0.8 0.85 0 1 0.05 0.25 frame)
	(qst.MoveInputToOutput)
	(qst.MoveOutputToInputWithMat glass)
	(qst.AddRod 0.45 0.55    0    1  0.09 0.25  frame)
	(qst.AddRod 0.49    1 0.45 0.55  0.08 0.25  frame)
	(qst.MoveInputToOutput)
	
	(ITriangleList tris = sector.WallTriangles)
	
	(VertexTriangle topLeft)
	(VertexTriangle bottomRight)
	(while (qst.PopOutputAsTriangles topLeft bottomRight)
		(tris.AddTriangle topLeft)
		(tris.AddTriangle bottomRight)
	)
)

(function Main (Int32 id)->(Int32 exitCode):
	(ISectorWallTesselator sector (SectorWallTesselator))
	(Int32 nSegments = sector.NumberOfSegments)
	(Float32 u = 0)
	
	(IQuadStackTesselator qst (QuadStackTesselator))
		
	(#for (Int32 i = 0)(i < nSegments)(#inc i)
		(WallSegment seg)
		(sector.GetSegment i seg)
		(TesselateWallAndShelf seg sector qst u -> u)
	)
)