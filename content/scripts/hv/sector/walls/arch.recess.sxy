(' #file.type rococo.hv)

(' #include 
	"!scripts/mplat_sxh.sxy"
	"!scripts/hv_sxh.sxy"
	"!scripts/hv/hv.types.sxy"
	"!scripts/types.sxy"
	"!scripts/mplat_types.sxy"
)

(namespace EntryPoint)
	(alias Main EntryPoint.Main)
	

(using HV)
(using Rococo)
(using Rococo.Entities)
(using Rococo.Graphics)
(using Sys.Type)
(using Sys.Maths)
(using Sys.Geometry.F32)
(using Sys.Random)

(function AddQuad (ITriangleList tris) (Quadf quad)(Float32 vStart)(Float32 uStart)(MaterialVertexData mat)->(Float32 uEnd)(Float32 vEnd)(Float32 uvScale) :
	(Triangle t = quad.a quad.b quad.c)
	(Vec3 n)
	(GetNormal t n)
	
	(Vec3 top = quad.b - quad.a)
	(Vec3 left = quad.a - quad.d)
	
	(Float32 uLen = (uvScale * (Length top)))
	(Float32 vLen = (uvScale * (Length left)))
	
	(vEnd = (vStart + vLen))
	(uEnd = (uStart + uLen))

	(ObjectVertex a = quad.a n  (uStart   vEnd) mat)
	(ObjectVertex b	= quad.b n  (uEnd     vEnd) mat)
	(ObjectVertex c = quad.c n  (uEnd   vStart) mat)	
	(ObjectVertex d = quad.d n  (uStart vStart) mat)
	
	(tris.AddQuad a b c d)
)

(function AddReverseQuad (ITriangleList tris) (Quadf quad)(Float32 vStart)(Float32 uStart)(MaterialVertexData mat)(Float32 uvScale)->(Float32 uEnd)(Float32 vEnd) :
	(Triangle t = quad.b quad.a quad.c)
	(Vec3 n)
	(GetNormal t n)
	
	(Vec3 top = quad.b - quad.a)
	(Vec3 left = quad.a - quad.d)
	
	(Float32 uLen = (uvScale * (Length top)))
	(Float32 vLen = (uvScale * (Length left)))
	
	(vEnd = (vStart + vLen))
	(uEnd = (uStart + uLen))

	(ObjectVertex a = quad.a n  (uStart   vEnd) mat)
	(ObjectVertex b	= quad.b n  (uEnd     vEnd) mat)
	(ObjectVertex c = quad.c n  (uEnd   vStart) mat)	
	(ObjectVertex d = quad.d n  (uStart vStart) mat)
	
	(tris.AddQuad d c b a)
)

(function AddTriangle (ITriangleList tris) (Triangle t)(Triangle2d uv)(MaterialVertexData mat)-> :
	(Vec3 n)
	(GetNormal t n)
	
	(ObjectVertex a = t.a n uv.a mat)
	(ObjectVertex b	= t.b n uv.b mat)
	(ObjectVertex c = t.c n uv.c mat)	
	
	(tris.AddTriangleByVertices a b c)
)

(function AddReverseTriangle (ITriangleList tris) (Triangle t)(Triangle2d uv)(MaterialVertexData mat)-> :
	(Vec3 n)
	(GetNormal t n)
	(Vec3 np = -1.0 * n)
	
	(ObjectVertex a = t.a np uv.a mat)
	(ObjectVertex b	= t.b np uv.b mat)
	(ObjectVertex c = t.c np uv.c mat)	
	
	(tris.AddTriangleByVertices b a c)
)

(function AddRecessToWall  (WallSegment segment)(ITriangleList tris)(IRimTesselator rim)(MaterialVertexData mat)(Float32 intrusion)(Float32 uvScale)-> :
	(rim.ClearFaces)
		
	(Matrix4x4 rotate =
		(segment.tangent.x   segment.vertical.x   segment.normal.x   0)
		(segment.tangent.y   segment.vertical.y   segment.normal.y   0)
		(segment.tangent.z   segment.vertical.z   segment.normal.z   0)
		(0                  0                  0                     1)
	)
	
	(Float32 sx = (0.5 * segment.span.x))
	(Float32 sy = (1.0 * segment.span.y))
	
	(Matrix4x4 scale =
		(1   0  0  0)
		(0   1  0  0)
		(0   0  1  0)
		(0   0  0  1)
	)
	
	(rim.Scale sx sy)
	
	(Vec3 sum = segment.quad.c + segment.quad.d)
	(Vec3 origin = 0.5 * sum)
	
	(Matrix4x4 translate =
		(1              0               0  origin.x)
		(0              1               0  origin.y)
		(0              0               1  origin.z)
		(0              0               0  1)
	)
	
	(Matrix4x4 sr = rotate * scale)
	(Matrix4x4 tsr = translate * sr)
	
	(rim.SetTransform tsr)
	
	(Int32 count = rim.PerimeterVertices)
	
	(Float32 z0 = (0 - intrusion))
	(Float32 z1 = 0.0)
	
	(Float32 u = 0)
	(Float32 v = segment.quad.c.z)
	(#for (Int32 i = 0)(i < count)(#inc i)
		(Quadf q)
		(rim.GetRimQuad z0 z1 i q)		
		(AddReverseQuad tris q 0 v mat uvScale -> u v)			
	)
	
	(Int32 triangles = rim.TesselateUniform)
	
	(Triangle t)
	(Triangle2d uv)
	
	(#for (Int32 j = 0)(j < triangles)(#inc j)
		(rim.GetBottomTriangle j t uv z0)
		(AddReverseTriangle tris t uv mat)
	)
	
)

(function AddRimFrameToWall  (WallSegment segment)(ITriangleList tris)(IRimTesselator rim)(MaterialVertexData mat)-> :
	(rim.ClearFaces)
		
	(Matrix4x4 rotate =
		(segment.tangent.x   segment.vertical.x   segment.normal.x   0)
		(segment.tangent.y   segment.vertical.y   segment.normal.y   0)
		(segment.tangent.z   segment.vertical.z   segment.normal.z   0)
		(0                  0                  0                     1)
	)
	
	(Float32 sx = (0.5 * segment.span.x))
	(Float32 sy = (1.0 * segment.span.y))
	
	(Matrix4x4 scale =
		(1   0  0  0)
		(0   1  0  0)
		(0   0  1  0)
		(0   0  0  1)
	)
	
	(rim.Scale sx sy)
	
	(Vec3 sum = segment.quad.c + segment.quad.d)
	(Vec3 origin = 0.5 * sum)
	
	(Matrix4x4 translate =
		(1              0               0  origin.x)
		(0              1               0  origin.y)
		(0              0               1  origin.z)
		(0              0               0  1)
	)
	
	(Matrix4x4 sr = rotate * scale)
	(Matrix4x4 tsr = translate * sr)
	
	(rim.SetTransform tsr)
	
	(Float32 z0 = -0.1)
	(Float32 z1 =  0.0)
	
	(Int32 triangles = rim.TesselateUniform)
	
	(Triangle t)
	(Triangle2d uv)
	
	(#for (Int32 j = 0)(j < triangles)(#inc j)
		(rim.GetTopTriangle j t uv z1)
		(AddTriangle tris t uv mat)
	)
)

(function BuildArchVertices (IRimTesselator rim)-> :
	(rim.AddPointXY -0.9     0)
	(rim.AddPointXY -0.8   0.4)
	(rim.AddPointXY -0.6   0.6)
	(rim.AddPointXY -0.5   0.8)
	(rim.AddPointXY  0.0  0.85)
	(rim.AddPointXY  0.5   0.8)
	(rim.AddPointXY  0.6   0.6)
	(rim.AddPointXY  0.8   0.4)
	(rim.AddPointXY  0.9     0) 	
)

(function TesselateArch (WallSegment segment)(ISectorWallTesselator sector)(Float32 uStart)->(Float32 uEnd) :
	(IScriptConfig config (ScriptConfig))
	(Float32 uvScale = (config.GetFloat "UV Scale" 0.5 0.01 10))
	(Float32 intrusion = (config.GetFloat "Intrusion" 0.1 0.001 1))
	
	(Float32 u0 = uStart)
	(Float32 u1 = (u0 + (segment.span.x * uvScale)))
	(uEnd = u1)
	
	(IInstances instances (Instances))
	
	(MaterialVertexData brick)
	(sector.GetMaterial brick "brickwork")
	
	(IRimTesselator rim (RimTesselator))	
	(rim.Clear)
	(BuildArchVertices rim)	
	(rim.CloseLoop)	
	(AddRecessToWall segment sector.WallTriangles rim brick intrusion uvScale) 
	
	(rim.Clear)
	(BuildArchVertices rim)
	(rim.AddPointXY     1 0)
	(rim.AddPointXY     1 1)
	(rim.AddPointXY    -1 1)
	(rim.AddPointXY    -1 0)
	(rim.CloseLoop)	
	
	(MaterialVertexData cement)
	(sector.GetMaterial cement "cement")
	
	(AddRimFrameToWall segment sector.WallTriangles rim cement)
)

(function Main (Int32 id)->(Int32 exitCode):
	(ISectorWallTesselator sector (SectorWallTesselator))
	(Int32 nSegments = sector.NumberOfSegments)
	(Float32 u = 0)
			
	(#for (Int32 i = 0)(i < nSegments)(#inc i)
		(WallSegment seg)
		(sector.GetSegment i seg)
		(TesselateArch seg sector u -> u)
	)
)