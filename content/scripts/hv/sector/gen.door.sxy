(' #file.type rococo.hv)

(' #include 
	"!scripts/mplat.sxh.sxy"
	"!scripts/hv.sxh.sxy"
	"!scripts/hv/hv.types.sxy"
	"!scripts/types.sxy"
	"!scripts/types.mplat.sxy"
)

(namespace EntryPoint)
	(alias Main EntryPoint.Main)
	

(using HV)
(using Rococo)
(using Rococo.Graphics)
(using Rococo.Entities)
(using Sys.Type)
(using Sys.Maths)
(using Sys.Geometry.F32)
(using Sys.Random)

(function AddTriangle (IMeshBuilder mb) (Triangle t)(Triangle2d uv)(MaterialId id)-> :
	(Vec3 n)
	(GetNormal t n)
	
	(MaterialVertexData noColour = 0xFF000000 id)
	
	(ObjectVertex a = t.a n uv.a noColour)
	(ObjectVertex b	= t.b n uv.b noColour)
	(ObjectVertex c = t.c n uv.c noColour)	
	
	(mb.AddTriangle a b c)
)

(function AddQuad (IMeshBuilder mb) (Quadf quad)(Float32 uScale)(Float32 vScale)(MaterialId id)-> :
	(Triangle t = quad.a quad.b quad.c)
	(Vec3 n)
	(GetNormal t n)
	
	(Vec3 top = quad.b - quad.a)
	(Vec3 left = quad.a - quad.d)
	(Float32 u = (uScale * (Length top)))
	(Float32 v = (vScale * (Length left)))
	
	(MaterialVertexData noColour = 0xFF000000 id)
	
	(ObjectVertex a = quad.a n (0 0) noColour)
	(ObjectVertex b	= quad.b n (u 0) noColour)
	(ObjectVertex c = quad.c n (u v) noColour)	
	(ObjectVertex d = quad.d n (0 v) noColour)	
	
	(mb.AddTriangle a b c)
	(mb.AddTriangle c d a)
)

(function AddBox (IMeshBuilder mb)(Vec3 v)(Vec3 w)(Float32 uScale)(Float32 vScale)(MaterialId id)-> :
	(Vec3 usw   = v.x v.y w.z)
	(Vec3 use   = w.x v.y w.z)
	(Vec3 lse   = w.x v.y v.z)
	(Vec3 lsw   = v.x v.y v.z)
	
	(Vec3 unw   = v.x w.y w.z)
	(Vec3 une   = w.x w.y w.z)
	(Vec3 lne   = w.x w.y v.z)
	(Vec3 lnw   = v.x w.y v.z)
	
	(Quadf south = usw use lse lsw)
	(AddQuad mb south uScale vScale id) // south
	
	(Quadf north = une unw lnw lne)
	(AddQuad mb north uScale vScale id) // north
	
	(Quadf lower = lsw lse lne lnw)
	(AddQuad mb lower uScale vScale id) // lower
	
	(Quadf upper = unw une use usw)
	(AddQuad mb upper uScale vScale id) // upper
	
	(Quadf left = unw usw lsw lnw)
	(AddQuad mb left uScale vScale id) // left
	
	(Quadf right = use une lne lse)
	(AddQuad mb right uScale vScale id) // right
)

(archetype HV.ObjectFunction (IMeshBuilder mb)->)

(function AddObject (IString texture)(IString localName)(ObjectFunction f)-> :
	(ICorridor corridor (Corridor))
	(IStringBuilder meshName (StringBuilder 256))
	(corridor.GetComponentMeshName localName meshName)
	
	(IMeshBuilder mb (MeshBuilder))
	(mb.Clear)
	(mb.Begin meshName)
	
	(f mb)
	
	(mb.End)
	
	(corridor.CentreComponent localName meshName texture)
)

(function AddRimObject (IMeshBuilder mb)(IRimTesselator rim)(Float32 uvScale)(Float32 z0)(Float32 z1)(MaterialId id)-> :
	(rim.ClearFaces)
	(Int32 count = rim.PerimeterVertices)
	(#for (Int32 i = 0)(i < count)(#inc i)
		(Quadf q)
		(rim.GetRimQuad z0 z1 i q)			
		(AddQuad mb q uvScale uvScale id)			
	)
	
	(Int32 triangles = rim.TesselateUniform)
	(#for (Int32 j = 0)(j < triangles)(#inc j)
		(Triangle t)
		(Triangle2d uv)
		(rim.GetTopTriangle j t uv z1)
		(AddTriangle mb t uv id)
		(rim.GetBottomTriangle j t uv z0)
		(AddTriangle mb t uv id)
	)
)

(function Main (Int32 id)->(Int32 exitCode):
	(ICorridor corridor (Corridor))
	(Vec3 span)
	(corridor.GetSpan span)
	(Float32 x0 = (0.5 * (0 - span.x)))
	(Float32 x1 = (0.5 * span.x))
	(Float32 halfWidth = (AnyOf 0.1 0.5))
	(Float32 y0 = (0 - halfWidth))
	(Float32 y1 = halfWidth)
	(Float32 z0 = 0)
	(Float32 z1 = span.z)
	
	(Float32 f =  (AnyOf 0.65 0.8))
	(Float32 t0 = (f * y0))
	(Float32 t1 = (f * y1))
	
	(IInstances instances (Instances))
	(MaterialId doorMatId = (instances.GetRandomMaterialId (#MaterialCategoryMetal)))
	
	(ObjectFunction door = 
		(closure (IMeshBuilder mb)-> :
			(Vec3 v = x0 t0 z0)
			(Vec3 w = x1 t1 z1)
			(Float32 uvScale = (AnyOf 0.1 1.0))
			(AddBox mb v w uvScale uvScale doorMatId)
		)
	)

	(AddObject "!textures/walls/metal2.jpg" "door" door)
	
	(Float32 pillarWidth =  (AnyOf 0.1 0.45))
	(Float32 baseWidth =  (AnyOf 0.1 0.45))
	(Float32 capWidth =  (AnyOf 0.35 0.5))
	
	(MaterialId pillarMatId = (instances.GetRandomMaterialId (#MaterialCategoryStone)))
	
	(ObjectFunction pillars = 
		(closure (IMeshBuilder mb)-> :
			(IRimTesselator rim (RimTesselator))
			
			(Float32 xA = (x0 + pillarWidth))
			(Float32 xB = (x1 - pillarWidth))
			
			(Float32 xA1 = (x0 + baseWidth))
			(Float32 xB1 = (x1 - baseWidth))
			
			(Float32 dy1 = (halfWidth + pillarWidth))
			(Float32 dy2 = (0 - dy1))
			(Float32 zB = (z1 - pillarWidth))
			   
			(rim.Clear)
			
			(rim.AddPointXY x0  z0)
			(rim.AddPointXY x0  z1)
			(rim.AddPointXY x1  z1)
			(rim.AddPointXY x1  z0)
			(rim.AddPointXY xB1  z0)
			(rim.AddPointXY xB  (zB - capWidth))
			(rim.AddPointXY (xB - capWidth) zB)
			(rim.AddPointXY (xA + capWidth) zB)
			(rim.AddPointXY xA (zB - capWidth))
			(rim.AddPointXY xA1  z0)
			(rim.CloseLoop)
			
			(Float32 uvScale = (AnyOf 0.1 1.0))
			
			(Matrix4x4 transform1 =
				(1 0  0  0)
				(0 0 -1 dy1)
				(0 1  0  0)
				(0 0  0  1)
			)
			
			(rim.SetTransform transform1)
			(AddRimObject mb rim uvScale (0 - pillarWidth) pillarWidth pillarMatId)
			
			(Matrix4x4 transform2 =
				(1 0  0  0)
				(0 0 -1 dy2)
				(0 1  0  0)
				(0 0  0  1)
			)
			
			(rim.SetTransform transform2)
			(AddRimObject mb rim uvScale (0 - pillarWidth) pillarWidth pillarMatId)
			
			(
				(Float32 switchY0 = ((y0 - ( 2 * pillarWidth)) - 0.25) )
				(Float32 switchY1 = ((y0 - ( 2 * pillarWidth)) - 0.1) )
				(Float32 switchZ0 = 1.5)
				(Float32 switchZ1 = 1.55)
				(Float32 switchX0 = (x0 + 0.025))
				(Vec3 v = x0       switchY0 z0)
				(Vec3 w = switchX0 switchY1 switchZ1)
				(AddBox mb v w uvScale uvScale pillarMatId) // switch base
			)
			
			(
				(Float32 switchY0 = ((y1 + ( 2 * pillarWidth)) + 0.1) )
				(Float32 switchY1 = ((y1 + ( 2 * pillarWidth)) + 0.25) )
				(Float32 switchZ0 = 1.5)
				(Float32 switchZ1 = 1.55)
				(Float32 switchX0 = (x1 - 0.025))
				(Vec3 v = switchX0    switchY0 z0)
				(Vec3 w = x1          switchY1 switchZ1)
				(AddBox mb v w uvScale uvScale pillarMatId) // switch base
			)
		)
	)
	(AddObject "!textures/walls/metal3.jpg" "door.pillars" pillars)
	
	(MaterialId railsMatId = (instances.GetRandomMaterialId (#MaterialCategoryRock)))
	
	(ObjectFunction rails = 
		(closure (IMeshBuilder mb)-> :
			(Float32 quadLeft = (x0 + 0.01))
			(Float32 uvScale = (AnyOf 0.1 1.0))
			(Float32 z = (z1 - 0.01))
			(
				(Quadf q = 
					(quadLeft y0 z1)
					(quadLeft y1 z1)
					(quadLeft y1 -1.0)
					(quadLeft y0 -1.0)
				)
				(AddQuad mb q uvScale uvScale railsMatId)
			)
			
			(Float32 quadRight = (x1 - 0.01))
			(
				(Quadf q = 
					(quadRight y1 z1)
					(quadRight y0 z1)
					(quadRight y0 -1.0)
					(quadRight y1 -1.0)
				)
				(AddQuad mb q uvScale uvScale railsMatId)
			)
			
			(
				(Quadf q = 
					(x0 y0 z)
					(x1 y0 z)
					(x1 y1 z)
					(x0 y1 z)
				)
				(AddQuad mb q uvScale uvScale railsMatId)
			)
		)
	)
	(AddObject "!textures/walls/black.tif" "door.rails" rails)
)