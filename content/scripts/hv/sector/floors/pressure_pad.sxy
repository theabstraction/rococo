(' #file.type rococo.hv)

(' #include 
	"!scripts/hv.sxh.sxy"
	"!scripts/types.sxy"
	"!scripts/mplat.sxh.sxy"
	"!scripts/hv/hv.types.sxy"
)

(namespace EntryPoint)
	(alias Main EntryPoint.Main)
	
(using Sys.Maths)
(using Sys.Maths.I32)
(using Sys.Maths.F32)
(using HV)
(using Sys.Type)
(using Sys.Geometry.F32)
(using Sys.Random)
(using Rococo)
(using Rococo.Graphics)
(using Rococo.Entities)

(function GenerateFloorMesh (QuadVertices floorQuad)(ISectorFloorTesselator sector)(IQuadStackTesselator qst) -> :
	(MaterialVertexData floor)
	(sector.GetMaterial floor "floor")
		
	(qst.PushQuad floorQuad floor)
	(qst.MoveInputToOutput)
		
	(VertexTriangle topLeft)
	(VertexTriangle bottomRight)
	(while (qst.PopOutputAsTriangles topLeft bottomRight)
		(sector.AddFloorTriangle topLeft)
		(sector.AddFloorTriangle bottomRight)
	)
)

(function GenerateSpecialFloorMesh (QuadVertices floorQuad)(ISectorFloorTesselator sector)(IQuadStackTesselator qst) -> :
	(MaterialVertexData floor)
	(sector.GetMaterial floor "floor")
	
	(MaterialVertexData rod)
	(sector.GetMaterial rod "rails")
	
	(MaterialVertexData blank)
	(sector.GetMaterial blank "casing")
	
	(blank.gloss = 5)
	
	(MaterialVertexData cfloor = floor)
	(cfloor.gloss = 1.2)
	
	(MaterialVertexData panels)
	(sector.GetMaterial panels "panels")
	
	(MaterialVertexData water)
	(sector.GetMaterial water "brickwork")
	(water.colour = 0x3F8080A0)
	(water.gloss = 0.2)
		
	(qst.PushQuad floorQuad floor)
	
	(Rectf uv = 0 0 1 1)
	(qst.SetTextureRect uv)
	
	(Rectf hole = 0.1 0.9 0.9 0.1)
	(qst.Intrude hole 0.25 0.5 floor water)
	
	(qst.MoveOutputToInputWithMat water)
	
	(qst.ClearInput)
	
	(VertexTriangle topLeft)
	(VertexTriangle bottomRight)
	(while (qst.PopOutputAsTriangles topLeft bottomRight)
		(sector.AddFloorTriangle topLeft)
		(sector.AddFloorTriangle bottomRight)
	)
	
	(ISectorComponents components (SectorComponents))
	
	(components.BuildComponent "pressure_pad")
	
	(floorQuad.positions.a.z = (floorQuad.positions.a.z - 0.1))
	(floorQuad.positions.b.z = (floorQuad.positions.b.z - 0.1))
	(floorQuad.positions.c.z = (floorQuad.positions.c.z - 0.1))
	(floorQuad.positions.d.z = (floorQuad.positions.d.z - 0.1))
	
	(qst.PushQuad floorQuad floor)
	(qst.Shrink hole)
	(qst.AddCuboid -0.001 1.001 -0.001 1.001 0.097 0.25 floor)
	(qst.ClearInput)
	(while (qst.PopOutputAsTriangles topLeft bottomRight)
		(components.AddTriangle topLeft)
		(components.AddTriangle bottomRight)
	)
	
	(components.CompleteComponent true)
)

(function GenerateCeilingMesh (QuadVertices ceilingQuad)(ISectorFloorTesselator sector)(IQuadStackTesselator qst) -> :
	(MaterialVertexData ceiling)
	(sector.GetMaterial ceiling "ceiling")

	(qst.PushQuad ceilingQuad ceiling)
	(qst.MoveInputToOutput)

	(VertexTriangle roofTL)
	(VertexTriangle roofBR)
	(while (qst.PopOutputAsTriangles roofTL roofBR)
		(sector.AddCeilingTriangle roofTL)
		(sector.AddCeilingTriangle roofBR)
	)
)

(function Main (Int32 id)->(Int32 exitCode):
	(IInstances instances (Instances))
	
	(ISectorFloorTesselator sector (SectorFloorTesselator))
	(IQuadStackTesselator qst (QuadStackTesselator))
	
	(Int32 nSquares = sector.NumberOfSquares)
	
	(if (sector.FoundationsExist == false)
		// First generate the physics mesh
		(#for(Int32 i = 0)(i < nSquares)(#inc i)
			(QuadVertices q)
			(sector.FloorQuad i q)
			
			(MaterialVertexData barrier)
			(sector.GetMaterial barrier "physics.hull")

			(qst.PushQuad q barrier)
			(qst.MoveInputToOutput)
			
			(VertexTriangle physicsHullTL)
			(VertexTriangle physicsHullBR)
			(while (qst.PopOutputAsTriangles physicsHullTL physicsHullBR)
				(sector.AddFloorTriangle physicsHullTL)
				(sector.AddFloorTriangle physicsHullBR)
			)
		)
	
		(#for(Int32 i = 0)(i < nSquares)(#inc i)
			(QuadVertices ceiling)
			(sector.CeilingQuad i ceiling)	
			(GenerateCeilingMesh ceiling sector qst)
		)

	
		(qst.Clear)
		
		(QuadVertices floor)
		(sector.FloorQuad 0 floor)	// The first and largest square used for the floor feature
		(GenerateSpecialFloorMesh floor sector qst)
		
		(qst.Clear)
		(#for(Int32 i = 1)(i < nSquares)(#inc i)
			(sector.FloorQuad i floor)	
			(GenerateFloorMesh floor sector qst)
		)
	else
		(IMessaging messaging (Messaging))
		(messaging.Log "The script requires a sector to be a square")
	)
)