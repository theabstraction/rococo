(' #file.type rococo.hv)

(' #include 
	"!scripts/hv.sxh.sxy"
	"!scripts/types.sxy"
	"!scripts/mplat.sxh.sxy"
	"!scripts/hv/hv.types.sxy"
	"!scripts/mplat.types.sxy"
)

(namespace EntryPoint)
	(alias Main EntryPoint.Main)
	
(using Sys.Maths)
(using Sys.Maths.I32)
(using Sys.Maths.F32)
(using HV)
(using Sys.Type)
(using Sys.Geometry.F32)
(using Sys.Random)
(using Rococo)
(using Rococo.Graphics)
(using Rococo.Entities)

(function GenerateFloorMesh (Rectf rect)(Float32 zGround)(Float32 zCeiling)(ISectorFloorTesselator sector)(IQuadStackTesselator qst) -> :
	(MaterialVertexData floor)
	(sector.GetMaterial floor "floor")
	
	(MaterialVertexData rod)
	(sector.GetMaterial rod "rails")
	
	(MaterialVertexData casing)
	(sector.GetMaterial casing "casing")
	
	(MaterialVertexData cfloor = floor)
	(cfloor.gloss = 1.2)
	
	(MaterialVertexData panels)
	(sector.GetMaterial panels "panels")
	
	(MaterialVertexData water)
	(sector.GetMaterial water "brickwork")
	(water.colour = 0x3F8080A0)
	(water.gloss = 0.2)
	
	(IScriptConfig config (ScriptConfig))
	(Float32 uvScale = (config.GetFloat "UV size" 0.5 0.01 10))
	
	/*
	(struct QuadVertices
		(Sys.Maths.Quadf positions)
		(Sys.Maths.Rectf uv)
		(Sys.Maths.Quadf normals)
		(Rococo.QuadColours colours)
	)
	*/
	
	(Vec3 up = 0 0 1)
	
	(Float32 dx = (rect.right - rect.left))
	(Float32 dy = (rect.top - rect.bottom))
	
	(QuadVertices floorQuad)
	(floorQuad.positions.a = rect.left rect.top zGround)
	(floorQuad.positions.b = rect.right rect.top zGround)
	(floorQuad.positions.c = rect.right rect.bottom zGround)
	(floorQuad.positions.d = rect.left rect.bottom zGround)
	(floorQuad.normals.a = up)
	(floorQuad.normals.b = up)
	(floorQuad.normals.c = up)
	(floorQuad.normals.d = up)
	
	(Vec3 down = 0 0 -1)
	(QuadVertices ceilingQuad)
	(ceilingQuad.positions.a = rect.left rect.bottom zCeiling)
	(ceilingQuad.positions.b = rect.right rect.bottom zCeiling)
	(ceilingQuad.positions.c = rect.right rect.top zCeiling)
	(ceilingQuad.positions.d = rect.left rect.top zCeiling)
	(ceilingQuad.normals.a = down)
	(ceilingQuad.normals.b = down)
	(ceilingQuad.normals.c = down)
	(ceilingQuad.normals.d = down)
	
	(Float32 u0 = (dx * uvScale))
	(Float32 v0 = (dy * uvScale))
	(ceilingQuad.uv = 0 0 u0 v0)
	
	(GenerateCeilingMesh ceilingQuad sector qst)
	
	(Vec2 holeRangeX)
	(Vec2 holeRangeY)
	(config.GetFloatRange "Hole range X" holeRangeX 0.01 0.99 0 1)
	(config.GetFloatRange "Hole range Y" holeRangeY 0.01 0.99 0 1)
	
	(qst.PushQuad floorQuad floor)
	
	(Rectf uv = 0 0 uvScale uvScale)
	(qst.SetTextureRect uv)
	
	(Rectf hole = holeRangeX.x holeRangeY.y holeRangeX.y holeRangeY.x)
	(qst.Intrude hole 14 uvScale floor water)
	
	(VertexTriangle topLeft)
	(VertexTriangle bottomRight)
	(while (qst.PopOutputAsTriangles topLeft bottomRight)
		(sector.AddFloorTriangle topLeft)
		(sector.AddFloorTriangle bottomRight)
	)
	
	(floorQuad.positions.a.z += -0.15)
	(floorQuad.positions.b.z += -0.15)
	(floorQuad.positions.c.z += -0.15)
	(floorQuad.positions.d.z += -0.15)
	
	(qst.PushQuad floorQuad floor)
	(qst.Shrink hole)
	
	(Float32 thickness = (0.025 / dy))
	
	(Float32 yDelta = 0.0125)
	
	(Rectf uvTemp = uv)
	
	(Float32 y = 0.001)
	(#for (Int32 j = 0)(j < 80)(#inc j)
		(Float32 dU = (AnyFloat -1 1))
		(Float32 dV = (AnyFloat -1 1))
		(uvTemp.left += dU)
		(uvTemp.right += dU)
		(uvTemp.top += dV)
		(uvTemp.bottom += dV)
		
		(qst.SetTextureRect uvTemp)
		
		(Int32 die = (RollDie 6))
		(if (die < 4)
			(qst.AddCuboid 0 1 y (y + thickness) 0.10 0.5 panels)
		else
			(Float32 d = (AnyFloat 0.0 0.01))
			(qst.AddCuboid 0 1 y (y + thickness) 0.10 0.5 casing)
		)
		(y = (y + yDelta))
	)
	
	(while (qst.PopOutputAsTriangles topLeft bottomRight)
		(sector.AddFloorTriangle topLeft)
		(sector.AddFloorTriangle bottomRight)
	)
)

(function GenerateCeilingMesh (QuadVertices ceilingQuad)(ISectorFloorTesselator sector)(IQuadStackTesselator qst) -> :
	(MaterialVertexData ceiling)
	(sector.GetMaterial ceiling "ceiling")

	(qst.PushQuad ceilingQuad ceiling)
	(qst.MoveInputToOutput)

	(VertexTriangle roofTL)
	(VertexTriangle roofBR)
	(while (qst.PopOutputAsTriangles roofTL roofBR)
		(sector.AddCeilingTriangle roofTL)
		(sector.AddCeilingTriangle roofBR)
	)
)


(function Main (Int32 sectorId)->(Int32 exitCode):
	(IInstances instances (Instances))
	
	(ISectorFloorTesselator sector (SectorFloorTesselator))
	(IQuadStackTesselator qst (QuadStackTesselator))
	
	(ISectorEnumerator sectors (SectorEnumerator))
	(ISectorLayout layout = (sectors.GetSectorById sectorId))
	
	(Int32 nSquares = sector.NumberOfSquares)
	
	(MaterialVertexData barrier)
	(sector.GetMaterial barrier "physics.hull")
	
	(Rectf floorRect)
	(Bool isRectangular)
	(layout.TryGetAsRectangle floorRect -> isRectangular)	
	(if (not isRectangular)
		(IMessaging messaging (Messaging))
		(IStringBuilder sb = NewPathBuilder)
		(#build sb "The gutter script requires that sector " sectorId " is an axis-aligned rectangule")
		(messaging.Log sb)
	)
	
	(Vec2 altitude)
	(layout.Altitude altitude)
	(GenerateFloorMesh floorRect altitude.x altitude.y sector qst)
	
	(qst.Clear)
	
	(#for(Int32 i = 0)(i < nSquares)(i += 1)
		(QuadVertices q)
		(sector.FloorQuad i q)
		
		(qst.PushQuad q barrier)
		(qst.MoveInputToOutput)
		
		(VertexTriangle physicsHullTL)
		(VertexTriangle physicsHullBR)
		(while (qst.PopOutputAsTriangles physicsHullTL physicsHullBR)
			(sector.AddFloorTriangle physicsHullTL)
			(sector.AddFloorTriangle physicsHullBR)
		)
	)
)