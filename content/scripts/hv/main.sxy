(' #file.type rococo.hv)

(' #include 
	"!scripts/hv.sxh.sxy"
	"!scripts/types.sxy"
)

(namespace EntryPoint)
	(alias Main EntryPoint.Main)
	
(using Sys.Maths)
(using Sys.Maths.I32)
(using Sys.Maths.F32)
(using HV.Graphics)
(using HV.Entities)
(using HV)
(using Sys.Type)
(using Sys.Geometry.F32)

/*
	struct ObjectVertex
	{
		Vec3 position;
		Vec3 normal;
		RGBAb emissiveColour; // 0x[Alpha][Blue][Green][Red]
		RGBAb diffuseColour;
		float u;
		float v;
	};
*/

(function ScaleVector (Vec3 v)(Float32 s)(Vec3 vs)-> :
	(vs.x = (v.x * s))
	(vs.y = (v.y * s))
	(vs.z = (v.z * s))
)

(function ProjectLine (Vec3 origin)(Vec3 delta)(Float32 t)(Vec3 projectedPoint)-> :
	(Vec3 scaledDelta)
	(ScaleVector delta t scaledDelta)
	(projectedPoint = scaledDelta + origin)
)

(struct FloorDef
	(Float32 low)
	(Float32 high) 
	(Int32 colour) 
)

(function IntrudeWall (IMeshBuilder mb)(Vec3 start) (Vec3 end) (Float32 leftDelta)(Float32 rightDelta)(Float32 intrusiion)(FloorDef floor) -> :
	(Vec3 delta = end - start)
	(Float32 deltaLen = (Length delta))
	(Vec3 up = 0 0 1)
	(Vec3 normal = delta * up)
	(Normalize normal)
	
	(Vec3 leftintrude)
	(Vec3 rightintrude)
	(Vec3 leftinside)
	(Vec3 rightinside)
	
	(ProjectLine  start delta leftDelta leftintrude)
	(ProjectLine  start delta rightDelta rightintrude)
	(ProjectLine  leftintrude  normal intrusiion leftinside)
	(ProjectLine  rightintrude normal intrusiion rightinside)

	(DefineRandomWall mb start        leftintrude  floor)
	(DefineRandomWall mb leftintrude  leftinside   floor)
	(DefineRandomWall mb leftinside   rightinside  floor)
	(DefineRandomWall mb rightinside  rightintrude floor)
	(DefineRandomWall mb rightintrude end          floor)
)

(function RecessWall (IMeshBuilder mb)(Vec3 start) (Vec3 end) (FloorDef floor)-> :
	(Vec3 tangent = end - start)
	(Float32 wallLength = (Length tangent))
	(Normalize tangent)
	(Vec3 up = 0 0 1)
	(Vec3 normal = tangent * up)
	(Normalize normal)
	(Float32 height = (floor.high - floor.low))
	
	(Float32 recessMetres = -0.3)
	
	(Vec3 oil)
	(ProjectLine start normal recessMetres oil)
	

	( // left
		(Vertex outerBottomLeft  = (start.x start.y floor.low)  (tangent.x tangent.y tangent.z) 0x00000000 floor.colour  (0 0))
		(Vertex outerTopLeft     = (start.x start.y floor.high) (tangent.x tangent.y tangent.z) 0x00000000 floor.colour  (0 height ))
		(Vertex innerBottomLeft  = (oil.x oil.y floor.low)      (tangent.x tangent.y tangent.z) 0x00000000 floor.colour  (0.3 0))
		(Vertex innerTopLeft     = (oil.x oil.y floor.high)     (tangent.x tangent.y tangent.z) 0x00000000 floor.colour  (0.3 height))
		
		(mb.AddTriangle outerBottomLeft outerTopLeft innerTopLeft) 
		(mb.AddTriangle innerTopLeft innerBottomLeft outerBottomLeft)
	)
	
	(Vec3 nullVector = 0 0 0)
	(Vec3 reverseTangent = nullVector - tangent)
	
	(Vec3 xax)
	(ProjectLine end normal recessMetres xax)
	
	(ProjectLine start normal recessMetres oil)
	
	( // left
		(Vertex outerBottomRight  = (end.x end.y floor.low)  (reverseTangent.x reverseTangent.y reverseTangent.z) 0x00000000 floor.colour  (0 0))
		(Vertex outerTopRight     = (end.x end.y floor.high) (reverseTangent.x reverseTangent.y reverseTangent.z) 0x00000000 floor.colour  (0 height ))
		(Vertex innerBottomRight  = (xax.x xax.y floor.low)  (reverseTangent.x reverseTangent.y reverseTangent.z) 0x00000000 floor.colour  (0.3 0))
		(Vertex innerTopRight     = (xax.x xax.y floor.high) (reverseTangent.x reverseTangent.y reverseTangent.z) 0x00000000 floor.colour  (0.3 height))
		
		(mb.AddTriangle innerBottomRight innerTopRight outerTopRight) 
		(mb.AddTriangle outerTopRight outerBottomRight innerBottomRight)
	)
	
	( // right
		(Vertex outerBottomLeft   = (start.x start.y floor.low) (up.x up.y up.z) 0x00000000 floor.colour  (0                0))
		(Vertex outerBottomRight  = (end.x   end.y   floor.low) (up.x up.y up.z) 0x00000000 floor.colour  (wallLength       0))
		(Vertex innerBottomLeft   = (oil.x   oil.y   floor.low) (up.x up.y up.z) 0x00000000 floor.colour  (0              0.3))
		(Vertex innerBottomRight  = (xax.x   xax.y   floor.low) (up.x up.y up.z) 0x00000000 floor.colour  (wallLength     0.3))
		
		(mb.AddTriangle outerBottomLeft innerBottomLeft innerBottomRight) 
		(mb.AddTriangle innerBottomRight outerBottomRight outerBottomLeft)
	)
	
	( // bottom
		(Vertex outerBottomLeft   = (start.x start.y floor.low) (up.x up.y up.z) 0x00000000 floor.colour  (0                0))
		(Vertex outerBottomRight  = (end.x   end.y   floor.low) (up.x up.y up.z) 0x00000000 floor.colour  (wallLength       0))
		(Vertex innerBottomLeft   = (oil.x   oil.y   floor.low) (up.x up.y up.z) 0x00000000 floor.colour  (0              0.3))
		(Vertex innerBottomRight  = (xax.x   xax.y   floor.low) (up.x up.y up.z) 0x00000000 floor.colour  (wallLength     0.3))
		
		(mb.AddTriangle outerBottomLeft innerBottomLeft innerBottomRight) 
		(mb.AddTriangle innerBottomRight outerBottomRight outerBottomLeft)
	)
	
	(Vec3 down = nullVector - up)
	
	( // top
		(Vertex outerTopLeft   = (start.x start.y floor.high) (down.x down.y down.z) 0x00000000 floor.colour  (0                0))
		(Vertex outerTopRight  = (end.x   end.y   floor.high) (down.x down.y down.z) 0x00000000 floor.colour  (wallLength       0))
		(Vertex innerTopLeft   = (oil.x   oil.y   floor.high) (down.x down.y down.z) 0x00000000 floor.colour  (0              0.3))
		(Vertex innerTopRight  = (xax.x   xax.y   floor.high) (down.x down.y down.z) 0x00000000 floor.colour  (wallLength     0.3))
		
		(mb.AddTriangle outerTopLeft outerTopRight innerTopRight) 
		(mb.AddTriangle innerTopRight innerTopLeft outerTopLeft)
	)
	
	(TesselateWindow mb oil xax floor.low floor.high)
)

(function CentreWindowInWall (IMeshBuilder mb)(Vec3 start) (Vec3 end) (FloorDef floor)-> :
/*
	
	|--------------------------------------------------|
	|                                                  |
	|                                                  |
	|                    Window Cap                    |
	|                                                  |
	|                                                  |
	|--------------------------------------------------|
	|WCL      |WCL1                     WCR1|       WCR| 
	|         |                             |          |
	|         |                             |          |
	|  Left   |                             | Right    |
	|  Column |                             | Column   |
	|         |                             |          |
	|         |                             |          |
	|         |                             |          |
	|         |                             |          |
	|         |                             |          |
	|         |                             |          |
	|         |                             |          |
	|         |                             |          |
	|         |                             |          |
	|WBL      | WBL1                    WBR1|       WBR|
	|--------------------------------------------------|
	|                                                  |
	|                                                  |
	|                Window Base                       |
	|                                                  |
	| start                                       end  |
	|--------------------------------------------------|
	
*/
	(Vec3 tangent = end - start)
	(Float32 wallLength = (Length tangent))
	(Normalize tangent)
	(Vec3 up = 0 0 1)
	(Float32 height = (floor.high - floor.low))
	(Float32 windowHeight = 3.0)
	(Float32 verticalBorder = (height - windowHeight))
	(Float32 baseHeight = (0.5 * verticalBorder))
	(Float32 windowWidth = 1.5)
	(Float32 horzBorder = (wallLength - windowWidth))
	(Float32 columnWidth = (0.5 * horzBorder))
	
	(Vec3 wbl)
	(ProjectLine start up baseHeight wbl)
	
	(Vec3 wcl)
	(ProjectLine start up (height - baseHeight) wcl)
	
	(Vec3 wbr)
	(ProjectLine end up baseHeight wbr)
	
	(Vec3 wcr)
	(ProjectLine end up (height - baseHeight) wcl)
	
	(Vec3 wbl1)
	(ProjectLine wbl tangent columnWidth wbl1)
	
	(Vec3 wbr1)
	(ProjectLine wbl tangent (wallLength - columnWidth) wbr1)
	
	(Vec3 wcl1)
	(ProjectLine wcl tangent columnWidth wcl1)
	
	(Vec3 wcr1)
	(ProjectLine wcl tangent (wallLength - columnWidth) wcr1)
	
	(Float32 topBase = (floor.low + baseHeight))
	(FloorDef windowBase = floor.low topBase floor.colour)
	(TesselateBlankWall mb start end windowBase)
	
	(Float32 capBase = (floor.high - baseHeight))
	(FloorDef windowCap = capBase floor.high floor.colour)
	(TesselateBlankWall mb start end windowCap)
	
	(FloorDef vertWindow = topBase capBase floor.colour)
	(TesselateBlankWall mb wbl wbl1 vertWindow)
	(TesselateBlankWall mb wbr1 wbr vertWindow)
	
	(RecessWall mb wbl1 wbr1 vertWindow)
	//(TesselateWindow mb wbl1 wbr1 topBase capBase)
)

(function TesselateWindow (IMeshBuilder mb)(Vec3 start) (Vec3 end) (Float32 y0)(Float32 y1)   -> :
	(Vec3 tangent = end - start)
	(Float32 tangentLen = (Length tangent))
	(Vec3 up = 0 0 1)
	(Vec3 normal = tangent * up)
	(Normalize normal)
	(Float32 u0 = 0)
	(Float32 u1 = (tangentLen * 0.125))	
	
	(Float32 yb = (y0 - 0.001))
	(Float32 yt = (y1 + 0.001))
	
	(Float32 v0 = (yb * 0.125))
	(Float32 v1 = (yt * 0.215))
	
	(Vec3 p0)
	(ProjectLine start tangent -0.001 p0)
	
	(Vec3 p1)
	(ProjectLine end   tangent  0.001 p1)
	
	
	(Vertex bottomLeft  = (p0.x p0.y yb) (normal.x normal.y normal.z) 0xFF000000 0x00FFFFFF  (u0 v0))
	(Vertex topLeft     = (p0.x p0.y yt) (normal.x normal.y normal.z) 0xFFFFFFFF 0x00FFFFFF  (u0 v1))
	(Vertex bottomRight = (p1.x p1.y yb) (normal.x normal.y normal.z) 0xFF000000 0x00FFFFFF  (u1 v0))
	(Vertex topRight    = (p1.x p1.y yt) (normal.x normal.y normal.z) 0xFFFFFFFF 0x00FFFFFF  (u1 v1))
		
	(mb.AddTriangle bottomLeft topLeft topRight) 
	(mb.AddTriangle topRight bottomRight bottomLeft)
)

(function TesselateBlankWall (IMeshBuilder mb)(Vec3 start) (Vec3 end) (FloorDef floor)   -> :
	(Vec3 delta = end - start)
	(Float32 deltaLen = (Length delta))
	(Vec3 up = 0 0 1)
	(Vec3 normal = delta * up)
	
	(Float32 y0 = (floor.low - 0.001))
	(Float32 y1 = floor.high)
	(Normalize normal)
	(Float32 u0 = 0)
	(Float32 u1 = (deltaLen * 0.125))
	(Float32 v0 = (y0 * 0.125))
	(Float32 v1 = (y1 * 0.215))
	
	(Vertex bottomLeft  = (start.x start.y y0) (normal.x normal.y normal.z) 0x00000000 floor.colour (u0 v0))
	(Vertex topLeft     = (start.x start.y y1) (normal.x normal.y normal.z) 0x00000000 floor.colour (u0 v1))
	(Vertex bottomRight = (end.x   end.y   y0) (normal.x normal.y normal.z) 0x00000000 floor.colour (u1 v0))
	(Vertex topRight    = (end.x   end.y   y1) (normal.x normal.y normal.z) 0x00000000 floor.colour (u1 v1))
		
	(mb.AddTriangle bottomLeft topLeft topRight) 
	(mb.AddTriangle topRight bottomRight bottomLeft)
)

(function TesselateSegment (IMeshBuilder mb)(Vec3 start) (Vec3 end) (FloorDef floor) -> :
	(Float32 height = (floor.high - floor.low))
	(Float32 bestSubfloorHeight = 4.5 )
	(Int32 subfloorCount = (ToInt32 (height / bestSubfloorHeight)))
	(Float32 subfloorHeight = (height / (ToFloat32 subfloorCount)))
	(Float32 y = floor.low)
	(#for(Int32 i = 0)(i < subfloorCount)(#inc i)
		(Float32 y1 = (y + subfloorHeight))
		(FloorDef subfloor = y y1 floor.colour)
		(CentreWindowInWall mb start end subfloor)
		(y = (y + subfloorHeight))
	)
)

(function TesselateWall (IMeshBuilder mb)(Vec3 start) (Vec3 end) (FloorDef floor)   -> :
	(Vec3 tangent = end - start)
	(Float32 tangentLen = (Length tangent))
	(Vec3 up = 0 0 1)
	(Vec3 normal = tangent * up)
	(Normalize normal)
	(Normalize tangent)
	(Float32 height = (floor.high - floor.low))
	(if ((tangentLen > 3.0) and (height > 6.0)) 
		(Int32 segmentCount = (ToInt32 (tangentLen / 3.0)))
		(Float32 segmentLength = (tangentLen / (ToFloat32 segmentCount)))
		(Float32 x = 0)
		(#for(Int32 i = 0)(i < segmentCount)(#inc i)
			(Vec3 startSegment)
			(ProjectLine start tangent x startSegment)
			(x = (x + segmentLength))
			(Vec3 endSegment)
			(ProjectLine start tangent x endSegment)
			(TesselateSegment mb startSegment endSegment floor)
		)
	else	
		(TesselateBlankWall mb start end floor)
	)
)

(function DefineRandomWall (IMeshBuilder mb)(Vec3 start) (Vec3 end) (FloorDef floor)  -> :
	(TesselateWall mb start end floor)
)

(function DefineRandomBulding (IString name) (Float32 height) -> :
	(IMeshBuilder mb (MeshBuilder))
	(mb.Clear)
	(mb.Begin name)
	
	(
		(Vec3 sw = -96 -28 0)
		(Vec3 se =  96 -28 0)
		(Vec3 ne =  96  29 0)
		(Vec3 nw = -96  29 0)
		
		(FloorDef floor = 0 20 0x00FFFFFF) 
		(IntrudeWall mb sw se 0.3 0.7 -2.0 floor) 
		(DefineRandomWall mb se ne floor)
		(IntrudeWall mb ne nw 0.3 0.7 -2.0 floor) 
		(DefineRandomWall mb nw sw floor)
	)
	
	(
		(Vec3 sw = -50 -25 0)
		(Vec3 se =  50 -25 0)
		(Vec3 ne =  50  25 0)
		(Vec3 nw = -50  25 0)
		
		(FloorDef floor = 20 60 0x00FFFFFF) 
		(IntrudeWall mb sw se 0.3 0.7 -2.0 floor) 
		(DefineRandomWall mb se ne floor)
		(IntrudeWall mb ne nw 0.3 0.7 -2.0 floor) 
		(DefineRandomWall mb nw sw floor)
	)
	
	(
		(Vec3 sw = -48 -20 0)
		(Vec3 se =  48 -20 0)
		(Vec3 ne =  48  20 0)
		(Vec3 nw = -48  20 0)
		
		(FloorDef floor = 60 180 0x00FFFFFF) 
		(DefineRandomWall mb sw se floor)
		(IntrudeWall mb se ne 0.3 0.7 -2.0 floor)
		(DefineRandomWall mb ne nw floor)
		(IntrudeWall mb nw sw 0.3 0.7 -2.0 floor)
	)
	
	(
		(Vec3 sw = -38 -20 0)
		(Vec3 se =  38 -20 0)
		(Vec3 ne =  38  20 0)
		(Vec3 nw = -38  20 0)
		
		(FloorDef floor = 180 370 0x00FFFFFF) 
		(DefineRandomWall mb sw se floor)
		(IntrudeWall mb se ne 0.3 0.7 -6.0 floor)
		(DefineRandomWall mb ne nw floor)
		(IntrudeWall mb nw sw 0.3 0.7 -6.0 floor)
	)
	
	(
		(Vec3 sw = -32 -20 0)
		(Vec3 se =  32 -20 0)
		(Vec3 ne =  32  20 0)
		(Vec3 nw = -32  20 0)
		
		(FloorDef floor = 370 389 0x00FFFFFF) 
		(IntrudeWall mb sw se 0.3 0.7 -2.0 floor) 
		(IntrudeWall mb se ne 0.3 0.7 -2.0 floor)
		(IntrudeWall mb ne nw 0.3 0.7 -2.0 floor) 
		(IntrudeWall mb nw sw 0.3 0.7 -2.0 floor)
	)
	
	(mb.End)
)

(function Main (Int32 id)->(Int32 exitCode):
	(IInstances instances (Instances))
	(IMobiles mobiles (Mobiles))
	
	(IStringBuilder buildingMeshName (StringBuilder 256))
	
	(Int32 one = 1)
	(#build buildingMeshName "mesh.skyscraper.empire.state" one)
	
	
	(DefineRandomBulding buildingMeshName 380.0 )
		
	(Int64 playerId)
	(
		(Matrix4x4 model =
			(1 0 0 5)
			(0 1 0 -35)
			(0 0 1 1.65)
			(0 0 0 1)
		)
		
		(Vec3 scale = 1 1 1)
		(instances.AddGhost model scale 0 -> playerId)
		(mobiles.Link playerId)
	)
	
	(ISceneBuilder scene (SceneBuilder))
	
	(#for (Int32 i = 0)(i < 1)(i = (i + 1))
		(#for (Int32 j = 0)(j < 1)(j = (j + 1))
			(Vec3 scale = 1 1 1)
			(Float32 x = (ToFloat32(i * 400)))
			(Float32 y = (ToFloat32(j * 400)))
			(Matrix4x4 model =
				(1 0 0 x)
				(0 1 0 y)
				(0 0 1 0)
				(0 0 0 1)
			)
			
			(Int64 cubeId = (instances.AddBody buildingMeshName "!textures/walls/brick1.jpg" model scale 0))
			(scene.AddStatics cubeId)
		)
	)

	(IPlayer player (Player 0))
	(player.SetPlayerEntity playerId)
	(player.SetControlFPS)
	
	(ICamera camera (Camera))
	(camera.SetRHProjection 60 0.3 1000)
	(camera.FollowEntity playerId)
	(camera.OrientateWithEntity playerId (#OrientationFlagsHeading))
	
	(scene.SetClearColour 1.0 1.0 1.0)
	
	(Vec3 sun = 0.35 0.65 -2.0)
	(scene.SetSunDirection sun)
)