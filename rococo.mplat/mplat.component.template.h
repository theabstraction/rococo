#include <rococo.types.h>
#include <rococo.component.entities.h>
#include "DeclarationsInclude"
#include <rococo.functional.h>

namespace Rococo::Components
{
    struct ComponentFactories
    {
// #BEGIN_INSTANCED#
        IComponentFactory<IComponentInterface>& componentVariableFactory;
// #END_INSTANCED#
    };

    struct ActiveComponents
    {
// #BEGIN_INSTANCED#
        bool hasComponentVariable : 1;
// #END_INSTANCED#
    };

    ROCOCO_INTERFACE IROIDCallback
    {
        virtual EFlowLogic OnROID(ROID id) = 0;
    };

    template<class T> ROCOCO_INTERFACE IComponentCallback
    {
        virtual EFlowLogic OnComponent(ROID id, T& item) = 0;
    };

    ROCOCO_INTERFACE IRCObjectTableBase
    {
        // Returns the number of ROIDS in use. 
        [[nodiscard]] virtual size_t ActiveRoidCount() const = 0;

        // Called periodically to remove deprecated and unreferenced entities and components
        virtual void CollectGarbage() = 0;

        // Mark a ROID as deprecated, existant Ref<IComponentInterfaces> will be valid, but, when all new references can no longer be accessed.
        virtual bool Deprecate(ROID roid) = 0;

        // Mark all ROIDs as deprecated. Best followed up by a CollectGarbage.
        virtual void DeprecateAll() = 0;

        // Invoke the cb.OnROID for every ROID
        virtual void Enumerate(IROIDCallback& cb) = 0;

        // Returns the component flags structure.
        [[nodiscard]] virtual ActiveComponents GetActiveComponents(ROID id) const = 0;

        // Returns true if a ROID is in the system and not deprecated
        [[nodiscard]] virtual bool IsActive(ROID id) const = 0;

        // Returns the maximum number of ROIDS that can be managed by this system.
        [[nodiscard]] virtual uint32 MaxTableEntries() const = 0;

        // Creates a new ROID and returns the result
        [[nodiscard]] virtual ROID NewROID() = 0;
    };

    ROCOCO_INTERFACE IRCObjectTable: IRCObjectTableBase
    {     
// #BEGIN_INSTANCED#

        [[nodiscard]] virtual Ref<IComponentInterface> AddComponentVariable(ROID id) = 0;

        // Marks the ComponentVariable as deprecated, when all outstanding refences are out of scope the object can be garbage collected
        virtual bool DeprecateComponentVariable(ROID id) = 0;

        // Enumerate all ComponentVariable elements. The reference in the callback cb.OnComponent is valid only for the callback lifetime. 
        // While enumerating garbage collection is suspended and new items cannot be added.
        virtual void ForEachComponentVariable(IComponentCallback<IComponentInterface>& cb) = 0;

        // Enumerate all ComponentVariable elements. The reference in the callback cb.OnComponent is valid only for the callback lifetime. 
        // While enumerating garbage collection is suspended and new items cannot be added.
        virtual void ForEachComponentVariable(Rococo::Function<EFlowLogic(ROID id, IComponentInterface& component)> functor) = 0;

        // Attempt to get a reference to the component with a given ROID
        virtual Ref<IComponentInterface> GetComponentVariable(ROID id) = 0;

        // Populate an array of ROIDs and return the number appended. If roidOutput is null then the return value is the number of ComponentVariables in the table
        [[nodiscard]] virtual size_t GetComponentVariableIDs(ROID* roidOutput, size_t nElementsInOutput) = 0;
// #END_INSTANCED#
    };

    ROCOCO_INTERFACE IRCObjectTableSupervisor : IRCObjectTable
    {
        virtual void Free() = 0;
    };

    namespace Factories
    {
        /*
        *   Returns an interface to a new RCO ECS system.
        *   The factories structure is generated by rococo.cpp_master acting upon component.template.cpp and component.template.h
        *   The maxSizeInBytes value gives the memory dedicated to the entity tables, not the associated components. 2GB is the default
        */
        [[nodiscard]] IRCObjectTableSupervisor* Create_RCO_EntityComponentSystem(ComponentFactories& factories, uint64 maxSizeInBytes = 2 * 1024 * 1024 * 1024ULL);
    }
} // Rococo::Components
