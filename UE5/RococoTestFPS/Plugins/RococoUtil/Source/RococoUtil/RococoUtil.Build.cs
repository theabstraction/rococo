// Copyright Epic Games, Inc. All Rights Reserved.

using System.IO;
using UnrealBuildTool;
using System.Collections.Generic;
using System.Text;
using System;

public class RococoUtil : ModuleRules
{
    private string rococoIncludeDirectory;
	private string rococoSexyIncludeDirectory;
	private string rococoHomeDirectory;
    private string rococoSourceDirectory;
	private string thisSourceDirectory;

    private void PrepRococoDirectories()
	{
        if (rococoIncludeDirectory == null)
        {
            string dir = PluginDirectory;
            string fullPath = dir;
            string lastFullPath;

            do
            {
                lastFullPath = fullPath;

                fullPath = Path.GetFullPath(Path.Combine(fullPath, ".."));

                string candidateIncludeDirectory = Path.Combine(fullPath, "source/rococo/include/");
                if (Directory.Exists(candidateIncludeDirectory))
                {
					rococoHomeDirectory = fullPath;
                    rococoIncludeDirectory = candidateIncludeDirectory;
					rococoSourceDirectory = Path.Combine(fullPath, "source");
					thisSourceDirectory = Path.Combine(PluginDirectory, "Source/RococoUtil/Private");
					rococoSexyIncludeDirectory = Path.Combine(fullPath, "source/rococo/sexy/Common");
					if (!Directory.Exists(thisSourceDirectory))
					{
						throw new System.Exception("Expecting directory to exist: " + thisSourceDirectory);
                    }
                    return;
                }

            } while (lastFullPath != fullPath);

            throw new System.Exception("Could not find rococo directory by enumerating ancestors of " + dir);
        }
    }

    private void CreateBundleDirect(string bundleName, string headerFile, string prelude, string postlude, string sourceDirectory, List<string> sourceNames)
    {
		StringBuilder sb = new StringBuilder();

		sb.AppendLine("// Bundle generated by Rococo.Util.Build.cs");
		sb.AppendLine("// Created: " + DateTime.UtcNow.ToString("d MMM yyyy HH:mm:ss") + " UTC");
		sb.AppendLine();

		if (headerFile != null)
		{
			sb.AppendLine("#include \"" + headerFile + "\"");
        }

		if (prelude != null)
		{
			sb.AppendLine(File.ReadAllText(Path.Combine(thisSourceDirectory, prelude)));
		}

        foreach (var sourceName in sourceNames)
		{
			string fullPath = Path.Combine(rococoSourceDirectory, sourceDirectory, sourceName);
            fullPath = fullPath.Replace("\\", "/");
            if (!File.Exists(fullPath))
			{
				throw new System.Exception("Could not find bundle file " + fullPath);
			}

			sb.AppendFormat("#include <{0}>", fullPath);
			sb.AppendLine();
		}

        if (postlude != null)
        {
            sb.AppendLine(File.ReadAllText(Path.Combine(thisSourceDirectory, postlude)));
        }

        string fullBundlePath = Path.Combine(thisSourceDirectory, bundleName);
		if (!fullBundlePath.EndsWith(".rococo-bundle.cpp"))
		{
			throw new System.Exception("Expecting bundle file to end with .rococo-bundle.cpp");
		}

		if (File.Exists(fullBundlePath))
		{
			string existingText = File.ReadAllText(fullBundlePath);
			if (sb.ToString() != existingText)
			{
				File.WriteAllText(fullBundlePath, sb.ToString());
			}
		}
		else
		{
            File.WriteAllText(fullBundlePath, sb.ToString());
        }
    }

    private void CreateBundleByMatch(string bundleName, string prelude, string postlude, string sourceDirectory, List<string> matchPatterns)
    {
		string fullSrcPath = Path.Combine(rococoSourceDirectory, sourceDirectory);

		var files = new System.Collections.Generic.HashSet<string>();

        foreach (var mp in matchPatterns)
        {
			foreach(var file in Directory.EnumerateFiles(fullSrcPath, mp))
			{
				files.Add(file);
			}
        }

		List<string> fileList = new List<string>();

		foreach(var file in files)
		{
            fileList.Add(file);
		}

		CreateBundleDirect(bundleName, null, prelude, postlude, sourceDirectory, fileList);
    }

    private void CreateBundles()
	{
		CreateBundleDirect("rococo.s-parser.rococo-bundle.cpp", "rococo.UE5.h", null, null, "rococo/sexy/SP/sexy.s-parser",
			new List<string>()
			{
				"sexy.s-parser.cpp",
				"sexy.s-builder.cpp",
				"sexy.s-parser.s-block.cpp"
            }
		);

        CreateBundleDirect("rococo.s-utils.rococo-bundle.cpp", "rococo.UE5.h", null, null, "rococo/sexy/Utilities",
            new List<string>()
            {
                "sexy.util.cpp"
            }
        );

        CreateBundleDirect("rococo.sexml.rococo-bundle.cpp", "rococo.UE5.h", null, null, "rococo/rococo.sexml",
          new List<string>()
          {
                "rococo.sexml.builder.cpp",
                "rococo.sexml.parser.cpp",
                "rococo.sexml.user.cpp"
          }
		);

        CreateBundleByMatch("rococo.gui-retained.rococo-bundle.cpp", "rococo.UE5.prelude.h", "rococo.UE5.postlude.h", "rococo/rococo.gui.retained",
          new List<string>()
          {
                "rococo.gr.*.cpp"
          }
        );

        CreateBundleDirect("rococo.maths.rococo-bundle.cpp", "rococo.UE5.h", null, null, "rococo/rococo.maths",
          new List<string>()
          {
                "rococo.integer.formatting.cpp"
          }
        );
    }

    public string RococoIncludeDirectory
	{
		get { return rococoIncludeDirectory; }
	}

    public string SexyIncludeDirectory
    {
        get { return rococoSexyIncludeDirectory; }
    }

    public string RococoHomeDirectory
    {
        get { return rococoHomeDirectory; }
    }

    public RococoUtil(ReadOnlyTargetRules Target) : base(Target)
	{
        PrepRococoDirectories();
		CreateBundles();

		PCHUsage = ModuleRules.PCHUsageMode.UseExplicitOrSharedPCHs;

		PublicIncludePaths.AddRange(
			new string[] {
                RococoIncludeDirectory,
                SexyIncludeDirectory
            }
			);
				
		
		PrivateIncludePaths.AddRange(
			new string[] {
				// ... add other private include paths required here ...
			}
			);
			
		
		PublicDependencyModuleNames.AddRange(
			new string[]
			{
				"Core",
				// ... add other public dependencies that you statically link with here ...
			}
			);
			
		
		PrivateDependencyModuleNames.AddRange(
			new string[]
			{
				"CoreUObject",
				"Engine",
				"Slate",
				"SlateCore",
				"ApplicationCore",
				"RococoOS"
				// ... add private dependencies that you statically link with here ...	
			}
			);
		
		
		DynamicallyLoadedModuleNames.AddRange(
			new string[]
			{
				// ... add any modules that your module loads dynamically here ...
			}
			);
	}
}
