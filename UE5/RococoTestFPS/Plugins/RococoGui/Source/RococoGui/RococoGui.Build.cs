// Copyright Epic Games, Inc. All Rights Reserved.

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnrealBuildTool;

public class RococoGui : ModuleRules
{
    private string rococoIncludeDirectory;
    private string rococoSexyIncludeDirectory;
    private string rococoHomeDirectory;
    private string rococoSourceDirectory;
    private string thisSourceDirectory;

    private void PrepRococoDirectories()
    {
        if (rococoIncludeDirectory == null)
        {
            string dir = PluginDirectory;
            string fullPath = dir;
            string lastFullPath;

            do
            {
                lastFullPath = fullPath;

                fullPath = Path.GetFullPath(Path.Combine(fullPath, ".."));

                string candidateIncludeDirectory = Path.Combine(fullPath, "source/rococo/include/");
                if (Directory.Exists(candidateIncludeDirectory))
                {
                    rococoHomeDirectory = fullPath;
                    rococoIncludeDirectory = candidateIncludeDirectory;
                    rococoSourceDirectory = Path.Combine(fullPath, "source");
                    thisSourceDirectory = Path.Combine(PluginDirectory, "Source/RococoGui/Private");
                    rococoSexyIncludeDirectory = Path.Combine(fullPath, "source/rococo/sexy/Common");
                    if (!Directory.Exists(thisSourceDirectory))
                    {
                        throw new System.Exception("Expecting directory to exist: " + thisSourceDirectory);
                    }
                    return;
                }

            } while (lastFullPath != fullPath);

            throw new System.Exception("Could not find rococo directory by enumerating ancestors of " + dir);
        }
    }

    private void CreateBundleDirect(string bundleName, string headerFile, string prelude, string postlude, string sourceDirectory, List<string> sourceNames)
    {
        StringBuilder sb = new StringBuilder();

        sb.AppendLine("// Bundle generated by Rococo.Util.Build.cs");
        sb.AppendLine("// Created: " + DateTime.UtcNow.ToString("d MMM yyyy HH:mm:ss") + " UTC");
        sb.AppendLine();

        if (headerFile != null)
        {
            sb.AppendLine("#include \"" + headerFile + "\"");
        }

        if (prelude != null)
        {
            sb.AppendLine(File.ReadAllText(Path.Combine(thisSourceDirectory, prelude)));
        }

        foreach (var sourceName in sourceNames)
        {
            string fullPath = Path.Combine(rococoSourceDirectory, sourceDirectory, sourceName);
            fullPath = fullPath.Replace("\\", "/");
            if (!File.Exists(fullPath))
            {
                throw new System.Exception("Could not find bundle file " + fullPath);
            }

            sb.AppendFormat("#include <{0}>", fullPath);
            sb.AppendLine();
        }

        if (postlude != null)
        {
            sb.AppendLine(File.ReadAllText(Path.Combine(thisSourceDirectory, postlude)));
        }

        string fullBundlePath = Path.Combine(thisSourceDirectory, bundleName);
        if (!fullBundlePath.EndsWith(".rococo-bundle.cpp"))
        {
            throw new System.Exception("Expecting bundle file to end with .rococo-bundle.cpp");
        }

        if (File.Exists(fullBundlePath))
        {
            string existingText = File.ReadAllText(fullBundlePath);
            if (sb.ToString() != existingText)
            {
                File.WriteAllText(fullBundlePath, sb.ToString());
            }
        }
        else
        {
            File.WriteAllText(fullBundlePath, sb.ToString());
        }
    }

    public string RococoIncludeDirectory
    {
        get { return rococoIncludeDirectory; }
    }

    public string SexyIncludeDirectory
    {
        get { return rococoSexyIncludeDirectory; }
    }

    public string RococoHomeDirectory
    {
        get { return rococoHomeDirectory; }
    }
    private void CreateBundles()
    {
    }

    public RococoGui(ReadOnlyTargetRules Target) : base(Target)
    {
        PrepRococoDirectories();
        CreateBundles();

		PCHUsage = ModuleRules.PCHUsageMode.UseExplicitOrSharedPCHs;

        PublicIncludePaths.AddRange(
           new string[] {
                RococoIncludeDirectory,
                SexyIncludeDirectory
           }
           );


        PrivateIncludePaths.AddRange(
			new string[] {
				// ... add other private include paths required here ...
			}
			);
			
		
		PublicDependencyModuleNames.AddRange(
			new string[]
			{
				"Core",
                "UMG",
                "Slate",
                "SlateCore",
				// ... add other public dependencies that you statically link with here ...
			}
			);
			
		
		PrivateDependencyModuleNames.AddRange(
			new string[]
			{
				"CoreUObject",
				"Engine",
				"Slate",
				"SlateCore",
                "RococoOS",
                "RococoUtil",
                "EngineSettings"
				// ... add private dependencies that you statically link with here ...	
			}
			);
		
		
		DynamicallyLoadedModuleNames.AddRange(
			new string[]
			{
				// ... add any modules that your module loads dynamically here ...
			}
			);


        string libTiffWin64 = Path.Combine(rococoHomeDirectory, @"gen\lib\win64\Release\lib-tiff.lib");
        string libJpegWin64 = Path.Combine(rococoHomeDirectory, @"gen\lib\win64\Release\lib-jpg.lib");

        PublicAdditionalLibraries.Add(libTiffWin64);
        PublicAdditionalLibraries.Add(libJpegWin64);
    }
}
