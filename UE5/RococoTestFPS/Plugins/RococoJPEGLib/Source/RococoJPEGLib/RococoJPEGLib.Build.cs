// Copyright Epic Games, Inc. All Rights Reserved.

using System;
using System.Collections.Generic;
using System.IO;
using System.Net.NetworkInformation;
using System.Text;
using UnrealBuildTool;

public class RococoJPEGLib : ModuleRules
{
    private string rococoIncludeDirectory;
    private string rococoSexyIncludeDirectory;
    private string rococoHomeDirectory;
    private string rococoSourceDirectory;
    private string thisSourceDirectory;

    private static string RococoConfigPath
    {
        get
        {
            string userLocalApps = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
            string rococoConfig = Path.Combine(userLocalApps, "19th-Century-Software", "Rococo.cfg");
            return rococoConfig;
        }
    }

    private static string ReadRococoHomeFromConfig()
    {
        if (File.Exists(RococoConfigPath))
        {
            string rococoPath = File.ReadAllText(RococoConfigPath);
            rococoPath = rococoPath.Trim();
            if (!Directory.Exists(rococoPath))
            {
                throw new Exception(RococoConfigPath + " exists, but the directory name within did not match a directory: " + rococoPath);
            }

            return rococoPath;
        }

        return null;
    }

    private void InitPathFromRococoHome(string _rococoHomeDirectory)
    {
        rococoHomeDirectory = _rococoHomeDirectory;
        rococoIncludeDirectory = Path.Combine(rococoHomeDirectory, "source/rococo/include/").Replace('/', Path.DirectorySeparatorChar);
        rococoSexyIncludeDirectory = Path.Combine(rococoHomeDirectory, "source/rococo/sexy/Common/").Replace('/', Path.DirectorySeparatorChar);
        rococoSourceDirectory = Path.Combine(_rococoHomeDirectory, "source").Replace('/', Path.DirectorySeparatorChar);
    }

    private string PrivateSourceRelPath
    {
        get
        {
            return "Source/RococoJPEGLib/Private".Replace('/', Path.DirectorySeparatorChar);
        }
    }

    private void PrepRococoDirectories()
    {
        if (rococoIncludeDirectory == null)
        {
            string dir = PluginDirectory;
            string fullPath = dir;
            string lastFullPath;

            thisSourceDirectory = Path.Combine(PluginDirectory, PrivateSourceRelPath);
            if (!Directory.Exists(thisSourceDirectory))
            {
                throw new System.Exception("Expecting directory to exist: " + thisSourceDirectory);
            }

            string rococoHomeFromConfig = ReadRococoHomeFromConfig();

            if (rococoHomeFromConfig != null)
            {
                InitPathFromRococoHome(rococoHomeFromConfig);
                return;
            }


            do
            {
                lastFullPath = fullPath;

                fullPath = Path.GetFullPath(Path.Combine(fullPath, ".."));

                string candidateIncludeDirectory = Path.Combine(fullPath, "source/rococo/include/").Replace('/', Path.DirectorySeparatorChar);
                if (Directory.Exists(candidateIncludeDirectory))
                {
                    InitPathFromRococoHome(fullPath);
                    return;
                }

            } while (lastFullPath != fullPath);

            throw new System.Exception("Could not find rococo directory from either " + RococoConfigPath + " or  enumerating ancestors of " + dir);
        }
    }
    private void CreateSeparateFilesDirect(string root, string headerFile, string prelude, string postlude, string sourceDirectory, List<string> sourceNames)
    {
        foreach (var sourceName in sourceNames)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("// Bundle generated by Rococo.TiffJPEG.Build.cs");
            sb.AppendLine("// Created: " + DateTime.UtcNow.ToString("d MMM yyyy HH:mm:ss") + " UTC");
            sb.AppendLine();

            if (headerFile != null)
            {
                sb.AppendLine("#include \"" + headerFile + "\"");
            }

            if (prelude != null)
            {
                sb.AppendLine(File.ReadAllText(Path.Combine(thisSourceDirectory, prelude)));
            }

            string fullPath = Path.Combine(rococoSourceDirectory, sourceDirectory, sourceName);
            fullPath = fullPath.Replace("\\", "/");
            if (!File.Exists(fullPath))
            {
                throw new System.Exception("Could not find file " + fullPath);
            }

            sb.AppendFormat("#include \"{0}\"", fullPath);
            sb.AppendLine();

            if (postlude != null)
            {
                sb.AppendLine(File.ReadAllText(Path.Combine(thisSourceDirectory, postlude)));
            }

            string wrappedPath = Path.Combine(thisSourceDirectory, root + sourceName);

            if (File.Exists(wrappedPath))
            {
                string existingText = File.ReadAllText(wrappedPath);
                if (sb.ToString() != existingText)
                {
                    File.WriteAllText(wrappedPath, sb.ToString());
                }
            }
            else
            {
                File.WriteAllText(wrappedPath, sb.ToString());
            }
        }
    }

    private void DeleteFiles(IEnumerable<string> shortFilenames)
    {
        foreach(string shortFilename in shortFilenames)
        {
            string fullPath = Path.Combine(thisSourceDirectory, shortFilename);
            if (File.Exists(fullPath))
            {
                File.Delete(fullPath);
            }
        }
    }

    private void CreateBundles()
    {
        var items = new List<string>()
        {
            "jcapimin.c",
            "jcapistd.c",
            "jccoefct.c",
            "jccolor.c",
            "jcdctmgr.c",
            "jchuff.c",
            "jcinit.c",
            "jcmainct.c",
            "jcmarker.c",
            "jcmaster.c",
            "jcomapi.c",
            "jcphuff.c",
            "jcprepct.c",
            "jcsample.c",
            "jctrans.c",
            "jdapimin.c",
            "jdatafromem.c",
            "jdatasrc.c",
            "jdatadst.c",
            "jdatastream.h",
            "jdcoefct.c",
            "jdcolor.c",
            "jddctmgr.c",
            "jdhuff.c",
            "jdinput.c",
            "jdmainct.c",
            "jdmarker.c",
            "jdmaster.c",
            "jdmerge.c",
            "jdphuff.c",
            "jdpostct.c",
            "jdsample.c",
            "jdtrans.c",
            "jerror.c",
            "jfdctflt.c",
            "jfdctfst.c",
            "jfdctint.c",
            "jidctflt.c",
            "jidctint.c",
            "jidctfst.c",
            "jidctred.c",
            "jmemmgr.c",
            "jmemnobs.c",
            "jquant1.c",
            "jquant2.c",
            "jutils.c",
            "rdbmp.c",
            "rdcolmap.c",
            "rdgif.c",
            "rdppm.c",
            "rdrle.c",
            "rdswitch.c",
            "rdtarga.c",
            "wrbmp.c",
            "wrgif.c",
            "wrppm.c",
            "wrrle.c",
            "wrtarga.c"
        };

        CreateSeparateFilesDirect("wrap.", "rococo.jpg.UE5.h", "rococo.jpg.prelude.dll.h", "rococo.jpg.postlude.dll.h", "3rd-Party/libjpg/jpeg-6b",
               new List<string>()
               {
                    "jcparam.c",
                    "jdapistd.c",
                    "transupp.c"
               }
        );

        CreateSeparateFilesDirect("wrap.", "rococo.jpg.UE5.h", "rococo.jpg.prelude.h", "rococo.jpg.postlude.h", "3rd-Party/libjpg/jpeg-6b", items);

        CreateSeparateFilesDirect("wrap.", "rococo.jpg.UE5.h", "rococo.jpg.prelude.decl.h", "rococo.jpg.postlude.h", "3rd-Party/libjpg/",
            new List<string>()
            {
                "readimage.cpp",
                "writeimage.cpp"
            }
        );
    }
    public RococoJPEGLib(ReadOnlyTargetRules Target) : base(Target)
	{
        PrepRococoDirectories();
        CreateBundles();

        bEnableExceptions = true;

        if (Target.LinkType == TargetLinkType.Monolithic)
        {
            PublicDefinitions.Add("ROCOCO_BUILD_IS_MONOLITHIC");
        }

        PCHUsage = ModuleRules.PCHUsageMode.UseExplicitOrSharedPCHs;

        PublicDefinitions.Add("_CRT_SECURE_NO_WARNINGS");

		PublicIncludePaths.AddRange(
			new string[] {
				rococoIncludeDirectory,
                Path.Combine(rococoSourceDirectory, "3rd-Party/libjpg/jpeg-6b")
            }
			);
				
		
		PrivateIncludePaths.AddRange(
			new string[] {
				// ... add other private include paths required here ...
			}
			);
			
		
		PublicDependencyModuleNames.AddRange(
			new string[]
			{
				"Core",
				// ... add other public dependencies that you statically link with here ...
			}
			);
			
		
		PrivateDependencyModuleNames.AddRange(
			new string[]
			{
				"CoreUObject",
				"Engine",
				"Slate",
				"SlateCore",
				// ... add private dependencies that you statically link with here ...	
			}
			);
		
		
		DynamicallyLoadedModuleNames.AddRange(
			new string[]
			{
				// ... add any modules that your module loads dynamically here ...
			}
		);
    }
}
