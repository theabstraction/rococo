// Copyright Epic Games, Inc. All Rights Reserved.

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnrealBuildTool;

public class RococoOS : ModuleRules
{
    private string rococoIncludeDirectory;
    private string rococoSexyCommonDirectory;
    private string rococoHomeDirectory;
    private string rococoSourceDirectory;
    private string thisSourceDirectory;

    private void PrepRococoDirectories()
    {
        if (rococoIncludeDirectory == null)
        {
            string dir = PluginDirectory;
            string fullPath = dir;
            string lastFullPath;

            do
            {
                lastFullPath = fullPath;

                fullPath = Path.GetFullPath(Path.Combine(fullPath, ".."));

                string candidateIncludeDirectory = Path.Combine(fullPath, "source/rococo/include/");
                if (Directory.Exists(candidateIncludeDirectory))
                {
                    rococoHomeDirectory = fullPath;
                    rococoIncludeDirectory = candidateIncludeDirectory;
                    rococoSexyCommonDirectory = Path.Combine(rococoHomeDirectory, "source/rococo/sexy/Common/");
                    rococoSourceDirectory = Path.Combine(fullPath, "source");
                    thisSourceDirectory = Path.Combine(PluginDirectory, "Source/RococoOS/Private");
                    if (!Directory.Exists(thisSourceDirectory))
                    {
                        throw new System.Exception("Expecting directory to exist: " + thisSourceDirectory);
                    }
                    return;
                }

            } while (lastFullPath != fullPath);

            throw new System.Exception("Could not find rococo directory by enumerating ancestors of " + dir);
        }
    }

    private void CreateBundleDirect(string bundleName, string headerFile, string prelude, string postlude, string sourceDirectory, List<string> sourceNames)
    {
        StringBuilder sb = new StringBuilder();

        sb.AppendLine("// Bundle generated by Rococo.Util.Build.cs");
        sb.AppendLine("// Created: " + DateTime.UtcNow.ToString("d MMM yyyy HH:mm:ss") + " UTC");
        sb.AppendLine();

        if (headerFile != null)
        {
            sb.AppendLine("#include \"" + headerFile + "\"");
        }

        if (prelude != null)
        {
            sb.AppendLine(File.ReadAllText(Path.Combine(thisSourceDirectory, prelude)));
        }

        foreach (var sourceName in sourceNames)
        {
            string fullPath = Path.Combine(rococoSourceDirectory, sourceDirectory, sourceName);
            fullPath = fullPath.Replace("\\", "/");
            if (!File.Exists(fullPath))
            {
                throw new System.Exception("Could not find bundle file " + fullPath);
            }

            sb.AppendFormat("#include <{0}>", fullPath);
            sb.AppendLine();
        }

        if (postlude != null)
        {
            sb.AppendLine(File.ReadAllText(Path.Combine(thisSourceDirectory, postlude)));
        }

        string fullBundlePath = Path.Combine(thisSourceDirectory, bundleName);
        if (!fullBundlePath.EndsWith(".rococo-bundle.cpp"))
        {
            throw new System.Exception("Expecting bundle file to end with .rococo-bundle.cpp");
        }

        if (File.Exists(fullBundlePath))
        {
            string existingText = File.ReadAllText(fullBundlePath);
            if (sb.ToString() != existingText)
            {
                File.WriteAllText(fullBundlePath, sb.ToString());
            }
        }
        else
        {
            File.WriteAllText(fullBundlePath, sb.ToString());
        }
    }

    private void CreateBundleByMatch(string bundleName, string prelude, string postlude, string sourceDirectory, List<string> matchPatterns)
    {
        string fullSrcPath = Path.Combine(rococoSourceDirectory, sourceDirectory);

        var files = new System.Collections.Generic.HashSet<string>();

        foreach (var mp in matchPatterns)
        {
            foreach (var file in Directory.EnumerateFiles(fullSrcPath, mp))
            {
                files.Add(file);
            }
        }

        List<string> fileList = new List<string>();

        foreach (var file in files)
        {
            fileList.Add(file);
        }

        CreateBundleDirect(bundleName, null, prelude, postlude, sourceDirectory, fileList);
    }
    private void CreateBundles()
    {
        CreateBundleDirect("rococo.util-os.rococo-bundle.cpp", "rococo.os.UE5.h", null, null, "rococo/rococo.util",
            new List<string>()
            {
                "rococo.strings.cpp",
                "rococo.base.cpp",
                "rococo.heap.string.cpp",
                "rococo.allocators.cpp",
                "rococo.throw.cr_sex.cpp"
            }
        );
    }

    public RococoOS(ReadOnlyTargetRules Target) : base(Target)
	{
        PrepRococoDirectories();
        CreateBundles();

        PCHUsage = ModuleRules.PCHUsageMode.UseExplicitOrSharedPCHs;

        bEnableExceptions = true;
		
		PublicIncludePaths.AddRange(
			new string[] {
                rococoIncludeDirectory,
                rococoSexyCommonDirectory
            }
			);
				
		
		PrivateIncludePaths.AddRange(
			new string[] {
				// ... add other private include paths required here ...
			}
			);
			
		
		PublicDependencyModuleNames.AddRange(
			new string[]
			{
				"Core",
				// ... add other public dependencies that you statically link with here ...
			}
			);
			
		
		PrivateDependencyModuleNames.AddRange(
			new string[]
			{
				"CoreUObject",
				"Engine",
				"Slate",
				"SlateCore",
                "ApplicationCore"
				// ... add private dependencies that you statically link with here ...	
			}
			);
		
		
		DynamicallyLoadedModuleNames.AddRange(
			new string[]
			{
				// ... add any modules that your module loads dynamically here ...
			}
			);
	}
}
