#pragma once

// Generated at: Jul 14 2023 06:56 UTC
#include <components/rococo.ecs.ex.h>
#include "mplat.components.decl.h"
#include <rococo.functional.h>

namespace Rococo::Components
{
    struct ComponentFactories
    {
        IComponentFactory<IParticleSystemComponent>& particleSystemComponentFactory;
        IComponentFactory<IRigsComponent>& rigsComponentFactory;
    };

    struct ActiveComponents
    {
        bool hasAnimationComponent : 1;
        bool hasBodyComponent : 1;
        bool hasSkeletonComponent : 1;
        bool hasParticleSystemComponent : 1;
        bool hasRigsComponent : 1;
    };

    ROCOCO_INTERFACE IRCObjectTableBase
    {
    };

    ROCOCO_INTERFACE IRCObjectTable: IRCObjectTableBase
    {     
    };

    ROCOCO_INTERFACE IRCObjectTableSupervisor : IRCObjectTable
    {
        virtual void Free() = 0;
    };

    namespace Factories
    {
        /*
        *   Returns an interface to a new RCO ECS system.
        *   The factories structure is generated by rococo.cpp_master acting upon component.template.cpp and component.template.h
        *   The maxSizeInBytes value gives the memory dedicated to the entity tables, not the associated components. 2GB is the default
        */
        [[nodiscard]] IRCObjectTableSupervisor* Create_RCO_EntityComponentSystem(ComponentFactories& factories, uint64 maxSizeInBytes = 2 * 1024 * 1024 * 1024ULL);
    }
} // Rococo::Components

