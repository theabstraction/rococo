(' #include "!scripts/sexml-reader.sxy" "!scripts/Sys/Type/Strings/StringMatch.sxy")


(namespace EntryPoint)

(alias Main EntryPoint.Main)

(using Sys.IO)
(using Sys.Type)

(function GetCmd (IString key) -> (IString result):
	(IStringBuilder candidate = NewPathBuilder)
	(IStringBuilder value = NewPathBuilder)
	(for (Int32 i = 0)(i < Sys.IO.GetCmdArgCount)(i += 1)
		(candidate.Clear) // Note - code complete did not add IStringBuilder methods
		(value.Clear)
		(Sys.IO.AppendCmdKeyAndValue i candidate value)
		(if ((Sys.Type.Strings.CompareInsensitive key candidate) == 0)
			(result = value)
			(return)
		)
	)
)

(function NamespaceConvertSxyToCpp (IString sxyNamespace) -> (IString cppNamespace):
	(IStringBuilder sb = (Sys.Type.NewStringBuilder 256))
	(sb sxyNamespace)
	(sb.Replace 0 "." "::")
	(cppNamespace = sb)
)

// Examples: Dog gets converted to dog. apple would remain as apple
(function ToCamelCase (IString pascalCase) -> (IString camelCase):
	(IStringBuilder sb = (Sys.Type.NewStringBuilder (pascalCase.Length + 1)))
	(sb pascalCase)
	(sb.ToLower 0 0)
	(camelCase = sb)
)

(function BuildMethodsArray (Sys.Sexml.ISEXMLDirective interfaceDirective) (array Sys.Sexml.ISEXMLDirective methods) -> :
	(Int32 i = 0)
	
	(Sys.Sexml.ISEXMLDirectiveList interfaceSubdirectives = interfaceDirective.SubDirectives)
	
	(while true
		(Sys.Sexml.ISEXMLDirective methodDirective)
		(Int32 directiveIndex)
		
		(interfaceSubdirectives.GetNextDirective i "Method" -> methodDirective directiveIndex)
		(if (directiveIndex < 0)
			(break)
		)
			
		(i = directiveIndex + 1)
		
		(methods.Push methodDirective)
	)
)

(struct DommeContext
	(Sys.Type.IStringBuilder cppBuilder)
	(Sys.Type.IStringBuilder headerBuilder)
	(IString factoryPrefix)
)

(function IsConstArgument (Sys.Sexml.ISEXMLDirective argDirective) -> (Bool result):
	(for (Int32 i = 0)(i < argDirective.AttributeCount)(i += 1)
		(Sys.Sexml.ISEXMLAttribute a = (argDirective.Attribute i))
		(IString value = (a.ValueAsString true))
		(if (Sys.Type.Strings.IsExactMatch a.Key "Attribute")
			(if (Sys.Type.Strings.IsExactMatch value "const")
				(result = true)
				(break)
			)
		)
	)
	
	(result = false)
)

(function BuildMethodArgCPP (Sys.Sexml.ISEXMLDirective argDirective) (Sys.Type.IStringBuilder argsBuilder)-> :
	(IString name = (argDirective.GetAttributeString "Name" true))
	(IString type = (argDirective.GetAttributeString "Type" true))
	
	(if (IsConstArgument argDirective)
		(argsBuilder "const ")		
	)
	
	(#build argsBuilder type " " name)
)

(function BuildMethodArgsCPP (Sys.Sexml.ISEXMLDirective methodDirective) (Sys.Type.IStringBuilder argsBuilder) -> :
	(Sys.Sexml.ISEXMLDirectiveList directives = (methodDirective.SubDirectives))
	
	(Bool first = true)

	(Int32 i)
	(while true
		(Sys.Sexml.ISEXMLDirective argumentDirective)
		(Int32 directiveIndex)
		
		(directives.GetNextDirective i "Arg" -> argumentDirective directiveIndex)
		(if (directiveIndex < 0)
			(break)
		)
			
		(i = directiveIndex + 1)
		
		(if first
			(first = false)
		else
			(argsBuilder ", ")
		)
		
		(BuildMethodArgCPP argumentDirective argsBuilder)
	)
)
		
(function BuildDommeObjectCPP (DommeContext dc) (Sys.Sexml.ISEXMLDirective domme) -> :
	(IString sxyNamespace = (domme.GetAttributeString "SxyNamespace" true))
	(IString cppNamespace = (NamespaceConvertSxyToCpp sxyNamespace))
	
	(Sys.Sexml.ISEXMLDirectiveList dommeSubdirectives = domme.SubDirectives)
	
	(Sys.Sexml.ISEXMLDirective interfaceDirective = (dommeSubdirectives.GetFirstDirective "Interface" true))
	
	(IString interfaceName = (interfaceDirective.GetAttributeString "Name" true))
	(IString implementationClass = (interfaceDirective.GetAttributeString "Implementation" true))
	
	// TODO Sexysense did not give code completion on cppBuilder, though it works for factoryPrefix
	(Sys.Type.IStringBuilder sb = dc.cppBuilder)
			
	(#build sb "namespace " cppNamespace "::Implementation&n")
	
	(sb "{&n")
	(#build sb "&tstruct " implementationClass " : " interfaceName "Supervisor&n")
	(sb "&t{&n")
	(sb "&t&tDommeObject D;&n&n")
	
	(#build sb "&t&t" implementationClass "(ScriptingResources& _scripting, cstr sourceName) : D(_scripting, sourceName, &"" interfaceName "&")&n")
	(sb "&t&t{&n")
	
	(array Sys.Sexml.ISEXMLDirective methods 1)
	(BuildMethodsArray interfaceDirective methods)
	
	(foreach methodDirective # methods
		(IString methodName = (methodDirective.GetAttributeString "Name" true))
		(IString methodVariableName = (ToCamelCase methodName))		
		(#build sb "&t&t&t" methodVariableName "Index = D.GetMethodIndex(&"" methodName "&", 1, 0);&n")
	)
	
	(sb "&t&t}&n&n")
	
	(#build sb "&t&t&~" implementationClass "()&n")
	(sb "&t&t{&n")
	(sb "&t&t}&n&n&n")
	
	(sb "&t&tvoid Free() override&n")
	(sb "&t&t{&n")
	(sb "&t&t&tdelete this;&n")
	(sb "&t&t}&n")
	
	// TODO - make sexysense work with iteration variables of foreach
	(foreach methodDirective # methods	
		(IString methodName = (methodDirective.GetAttributeString "Name" true))
		(IString methodVariableName = (ToCamelCase methodName))
		
		(#build sb "&n&t&tint " methodVariableName "Index = -1;&n&n")
		
		(IStringBuilder args = (Sys.Type.NewStringBuilder 256))

		(BuildMethodArgsCPP methodDirective args)
		
		(#build sb "&t&tvoid " methodName "(" args ") override&n")
		(sb "&t&t{&n")

		(#build sb "&t&t&tD.CallVirtualMethod(" methodVariableName "Index);&n")
		(sb "&t&t}&n")
	)
	
	(sb "&t};&n")
	(sb "}&n&n")
	
	(#build sb "namespace " cppNamespace "&n")
	(sb "{&n")
	(#build sb "&t" interfaceName "Supervisor* " dc.factoryPrefix implementationClass "(ScriptingResources& scripting, cstr sourceFile)&n")
	(sb "&t{&n")
	(#build sb "&t&treturn new Implementation::" implementationClass "(scripting, sourceFile);&n")
	(sb "&t}&n")
	(sb "}&n&n")
)

(function BuildDommeObjectH (DommeContext dc) (Sys.Sexml.ISEXMLDirective domme) -> :
	(IString sxyNamespace = (domme.GetAttributeString "SxyNamespace" true))
	(IString cppNamespace = (NamespaceConvertSxyToCpp sxyNamespace))
	
	(Sys.Sexml.ISEXMLDirectiveList dommeSubdirectives = domme.SubDirectives)
	
	(Sys.Sexml.ISEXMLDirective interfaceDirective = (dommeSubdirectives.GetFirstDirective "Interface" true))
	
	(IString interfaceName = (interfaceDirective.GetAttributeString "Name" true))
	(IString implementationClass = (interfaceDirective.GetAttributeString "Implementation" true))
	
	// TODO Sexysense did not give code completion on cppBuilder, though it works for factoryPrefix
	(Sys.Type.IStringBuilder sb = dc.headerBuilder)
			
	(#build sb "namespace " cppNamespace "&n")
	
	(sb "{&n")
	(#build sb "&tstruct " interfaceName "&n")
	(sb "&t{&n")
	
	(array Sys.Sexml.ISEXMLDirective methods 1)
	(BuildMethodsArray interfaceDirective methods)
	
	// TODO - make sexysense work with iteration variables of foreach
	(foreach methodDirective # methods	
		(IString methodName = (methodDirective.GetAttributeString "Name" true))
		(IString methodVariableName = (ToCamelCase methodName))
		
		(IStringBuilder args = (Sys.Type.NewStringBuilder 256))

		(BuildMethodArgsCPP methodDirective args)
		
		(#build sb "&t&tvirtual void " methodName "(" args ") = 0;&n")
	)
	
	(sb "&t};&n&n")
	
	(#build sb "&tstruct " interfaceName "Supervisor: "  interfaceName "&n")
	(sb "&t{&n")
	(sb "&t&tvirtual void Free() = 0;&n")
	(sb "&t};&n&n")
	
	(#build sb "&t" interfaceName "Supervisor* " dc.factoryPrefix implementationClass "(Rococo::Domme::ScriptingResources& scripting, cstr sourceFile);&n")
	
	(sb "}&n&n")
)

(function Main (Int32 id)->(Int32 exitCode):
	(IString exprPath = (GetCmd "sexml"))
	(if (not (exprPath ?))
		(#printf "Usage: " Sys.IO.ExeName " run=gen_domme_objects.sxy sexml=<domme-sexml-spec-path>")
		(exitCode = -1)
		(return)
	)
	(Sys.Reflection.IExpression expr = (Sys.IO.LoadExpression exprPath))
	(Sys.Sexml.ISEXMLReader reader (Sys.Sexml.ReadSexml expr))
	
	(Sys.Sexml.ISEXMLDirective header = (reader.GetFirstDirective "Header" true))
	
	(IString headerType = (header.GetAttributeString "Type" true))
	(if (not (Sys.Type.Strings.IsExactMatch headerType "Rococo_Domme"))
		(Sys.Reflection.IExpression s = header.S)
		(s.Throw 0 "Cannot find (Type Rococo_Domme) in Header directive")
	)
	
	(IString defaultFactoryPrefix = "New")
	
	(IString headerName = "ICat.h")
	
	(IStringBuilder sb = Sys.Type.NewStringBuilder 4096)
	(IStringBuilder sbHeader = Sys.Type.NewStringBuilder 4096)
		
	(#build sb "#include &"" headerName "&"&n")
	(sb "#include <rococo.domme.h>&n&n")

	(sb "using namespace Rococo;&n")
	(sb "using namespace Rococo::Domme;&n&n")	
		
	(sbHeader "#pragma once&n&n")
	
	(sbHeader "#include <rococo.types.h>&n&n")
	
	(sbHeader "namespace Rococo::Domme&n")
	(sbHeader "{&n")
	(sbHeader "&tstruct ScriptingResources;&n")
	(sbHeader "}&n&n")
	
	(for(Int32 i = 0)(i < reader.DirectiveCount)(i += 1)
		(Sys.Sexml.ISEXMLDirective rootDirective = (reader.Directive i))
		(if (Sys.Type.Strings.IsExactMatch rootDirective.Name "SetDefaults")		
			(defaultFactoryPrefix = (rootDirective.GetAttributeString "CppFactoryPrefix" true))
			(continue)
		)
		
		(DommeContext context = sb sbHeader defaultFactoryPrefix)
		
		(if (Sys.Type.Strings.IsExactMatch rootDirective.Name "Domme")
			(BuildDommeObjectCPP context rootDirective)
			(BuildDommeObjectH context rootDirective)
			(continue)
		)
	)
	
	// define our tab here as four spaces
	(sb.Replace 0 "&t" "    ")
	(#printf sb)
	
	(sbHeader.Replace 0 "&t" "    ")
	(#printf sbHeader)
)