(' #include "!scripts/sexml-reader.sxy" "!scripts/Sys/Type/Strings/StringMatch.sxy")


(namespace EntryPoint)

(alias Main EntryPoint.Main)

(using Sys.IO)
(using Sys.Type)

(function GetCmd (IString key) -> (IString result):
	(IStringBuilder candidate = NewPathBuilder)
	(IStringBuilder value = NewPathBuilder)
	(for (Int32 i = 0)(i < Sys.IO.GetCmdArgCount)(i += 1)
		(candidate.Clear) // Note - code complete did not add IStringBuilder methods
		(value.Clear)
		(Sys.IO.AppendCmdKeyAndValue i candidate value)
		(if ((Sys.Type.Strings.CompareInsensitive key candidate) == 0)
			(result = value)
			(return)
		)
	)
)

(function Main (Int32 id)->(Int32 exitCode):
	(IString exprPath = (GetCmd "sexml"))
	(if (not (exprPath ?))
		(#printf "Usage: " Sys.IO.ExeName " run=gen_domme_objects.sxy sexml=<domme-sexml-spec-path>")
		(exitCode = -1)
		(return)
	)
	(Sys.Reflection.IExpression expr = (Sys.IO.LoadExpression exprPath))
	(Sys.Sexml.ISEXMLReader reader (Sys.Sexml.ReadSexml expr))
	
	(Sys.Sexml.ISEXMLDirective header = (reader.GetFirstDirective "Header" true))
	
	(IString headerType = (header.GetAttributeString "Type" true))
	(if (not (Sys.Type.Strings.IsExactMatch headerType "Rococo_Domme"))
		(Sys.Reflection.IExpression s = header.S)
		(s.Throw 0 "Cannot find (Type Rococo_Domme) in Header directive")
	)
	
	(IString defaultFactoryPrefix = "New")
	
	(for(Int32 i = 0)(i < reader.DirectiveCount)(i += 1)
		(Sys.Sexml.ISEXMLDirective rootDirective = (reader.Directive i))
		(if (Sys.Type.Strings.IsExactMatch rootDirective.Name "SetDefaults")		
			(defaultFactoryPrefix = (rootDirective.GetAttributeString "CppFactoryPrefix" true))
		)
	)
	
	(IStringBuilder sb = (Sys.Type.NewStringBuilder 4096))
	
	(IString headerName = "ICat.h")
	(IString nsTarget = "Rococo::Animals")
	(IString implementationClass = "Cat")
	(IString interfaceName = "ICat")
	
	(#build sb "#include &"" headerName "&"&n")
	(sb "#include <rococo.domme.h>&n&n")

	(sb "using namespace Rococo;&n")
	(sb "using namespace Rococo::Domme;&n&n")

	(#build sb "namespace " nsTarget "::Implementation&n")
	
	(sb "{&n")
	(#build sb "&tstruct " implementationClass " : " interfaceName "Supervisor&n")
	(sb "&t{&n")
	(sb "&t&tDommeObject D;&n&n")
	
	(#build sb "&t&t" implementationClass "(ScriptingResources& _scripting, cstr sourceName) : D(_scripting, sourceName, &"" interfaceName "&")&n")
	(sb "&t&t{&n")
	(#build sb "&t&t&tmakeBiscuitsIndex = D.GetMethodIndex(&"MakeBiscuits&", 1, 0);&n")
	(sb "&t&t}&n&n")
	
	(#build sb "&t&t&~" implementationClass "()&n")
	(sb "&t&t{&n")
	(sb "&t&t}&n&n&n")
	
	(sb "&t&tvoid Free() override&n")
	(sb "&t&t{&n")
	(sb "&t&t&tdelete this;&n")
	(sb "&t&t}&n&n")

	(sb "&t&tint makeBiscuitsIndex = -1;&n&n")

	(sb "&t&tvoid MakeBiscuits() override&n")
	(sb "&t&t{&n")

	(sb "&t&t&tD.CallVirtualMethod(makeBiscuitsIndex);&n")
	(sb "&t&t}&n")
	
	(sb "&t};&n")
	(sb "}&n&n")
	
	(#build sb "namespace " nsTarget "&n")
	(sb "{&n")
	(#build sb "&t" interfaceName "Supervisor* Create" implementationClass "(ScriptingResources& scripting, cstr sourceFile)&n")
	(sb "&t{&n")
	(#build sb "&t&treturn new Implementation::" implementationClass "(scripting, sourceFile);&n")
	(sb "&t}&n")
	(sb "}&n")
	
	// define our tab here as four spaces
	(sb.Replace 0 "&t" "    ")
	
	(#printf sb)
)