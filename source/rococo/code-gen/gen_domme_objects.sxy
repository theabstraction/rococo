(' #include "!scripts/sexml-reader.sxy" "!scripts/Sys/Type/Strings/StringMatch.sxy" "!scripts/typedef-repo.sxy")


(namespace EntryPoint)

(alias Main EntryPoint.Main)

(using Sys.IO)
(using Sys.Type)

(function GetCmd (IString key) -> (IString result):
	(IStringBuilder candidate = NewPathBuilder)
	(IStringBuilder value = NewPathBuilder)
	(for (Int32 i = 0)(i < Sys.IO.GetCmdArgCount)(i += 1)
		(candidate.Clear) // Note - code complete did not add IStringBuilder methods
		(value.Clear)
		(Sys.IO.AppendCmdKeyAndValue i candidate value)
		(if ((Sys.Type.Strings.CompareInsensitive key candidate) == 0)
			(result = value)
			(return)
		)
	)
)

(function NamespaceConvertSxyToCpp (IString sxyNamespace) -> (IString cppNamespace):
	(IStringBuilder sb = (Sys.Type.NewStringBuilder 256))
	(sb sxyNamespace)
	(sb.Replace 0 "." "::")
	(cppNamespace = sb)
)

// Examples: Dog gets converted to dog. apple would remain as apple
(function ToCamelCase (IString pascalCase) -> (IString camelCase):
	(IStringBuilder sb = (Sys.Type.NewStringBuilder (pascalCase.Length + 1)))
	(sb pascalCase)
	(sb.ToLower 0 0)
	(camelCase = sb)
)

(struct DommeContext
	(Sys.Type.Domme.ITypeDefs typedefs)
	(IString factoryPrefix)
)

(function AssertCompound (Sys.Reflection.IExpression s)(IString exMessage) -> :
	(if (s.Type != (#Sys.Reflection.ExpressionTypeCompound))
		(
			(#paragraph msg "Expecting compound expression: " exMessage)
			(s.Throw 0 msg)
		)
	)
)

(function GetAtomicWithAssert  (Sys.Reflection.IExpression s)(Int32 childIndex)(IString exMessage) -> (IString value):
	(Sys.Reflection.IExpression child = (s.Child childIndex))
	(if (not (child ?))
		(
			(#paragraph msg "No child at position " childIndex ": " exMessage)
			(child.Throw 0 msg)
		)
	)
	
	(if (child.Type != (#Sys.Reflection.ExpressionTypeAtomic))
		(
			(#paragraph msg "Expecting atomic expression: " exMessage)
			(child.Throw 0 msg)
		)
	)
	
	(child.Text -> value)
)

(function CountInputAndOutputs (Sys.Reflection.IExpression sMethod)->(Int32 nInputs)(Int32 nOutputs):
	// (MakeBiscuits (int nBiscuits)(float dt)) : output indicator = -1, nInputs = 2, nOutputs = 0, child count = 3
	// (MakeBiscuits (int nBiscuits)(float dt)->) : output indicator = 3, nInputs = 2, nOutputs = 0, child count = 4
	// (MakeBiscuits (int nBiscuits)(float dt)->(Bool isvalid)) : output indicator = 3, nInputs = 2, nOutputs = 1, child count = 5

	(Int32 outputIndicatorIndex = (FindTopLevelAtomic sMethod "->"))
	(if (outputIndicatorIndex == -1)
		(nInputs = sMethod.ChildCount - 1)
	else
		(nInputs = outputIndicatorIndex - 1)			
		(nOutputs = ((sMethod.ChildCount - outputIndicatorIndex) - 1))
	)
)

(struct TargetContext
	(IString sxyNamespace)
	(IString interfaceName)
)

(function GetTargetPath (TargetContext tc) (Sys.Sexml.ISEXMLDirective interfaceDirective) (IString attrName) -> (IString targetPath) : 
	(IString attrValue = (interfaceDirective.GetAttributeString attrName true))
	(IStringBuilder sb = (NewPathBuilder))
	(sb.ThrowIfAppendWouldTruncate)
	(sb attrValue)
	
	(sb.Replace 0 "$(InterfaceName)" tc.interfaceName)
	
	(IStringBuilder interfacePath = (NewPathBuilder))
	(interfacePath.ThrowIfAppendWouldTruncate)
	
	(interfacePath tc.sxyNamespace)
	(interfacePath.Replace 0 "." "/")
	(interfacePath "/")
	(interfacePath tc.interfaceName)
	
	(sb.Replace 0 "$(InterfacePath)" interfacePath)
	
	(IStringBuilder interfacePathTrailer = (NewPathBuilder))
	(interfacePathTrailer.ThrowIfAppendWouldTruncate)
	
	(Int32 startPos = (Sys.Type.Strings.FindLeftNoCase tc.sxyNamespace 0 ".") + 1)
	
	(interfacePathTrailer.AppendSubstring tc.sxyNamespace startPos tc.sxyNamespace.Length)
	(interfacePathTrailer.Replace 0 "." "/")
	(interfacePathTrailer "/")
	(interfacePathTrailer tc.interfaceName)
		
	(sb.Replace 0 "$(InterfacePathTrailer)" interfacePathTrailer)
	
	(IStringBuilder currentDir = NewPathBuilder)
	(Sys.IO.AppendCurrentDirectory currentDir)
	
	(sb.Replace 0 "$(CurrentDir)" currentDir)
	
	(targetPath = sb)
)

(function BuildDommeObjectCPP (DommeContext dc) (Sys.Sexml.ISEXMLDirective domme) -> :
	(IString sxyNamespace = (domme.GetAttributeString "SxyNamespace" true))
	(IString cppNamespace = (NamespaceConvertSxyToCpp sxyNamespace))
	
	(Sys.Sexml.ISEXMLDirectiveList dommeSubdirectives = domme.SubDirectives)
	
	(Sys.Sexml.ISEXMLDirective interfaceDirective = (dommeSubdirectives.GetFirstDirective "Interface" true))
	
	(IString interfaceName = (interfaceDirective.GetAttributeString "Name" true))
	(IString implementationClass = (interfaceDirective.GetAttributeString "Implementation" true))
	
	(TargetContext tc = sxyNamespace interfaceName)
	
	(IString cppInclude = (GetTargetPath tc interfaceDirective "CppInclude"))
	(IString cppSourceTarget = (GetTargetPath tc interfaceDirective "CppSourceTarget"))
	
	(IStringBuilder sb = Sys.Type.NewStringBuilder 4096)
	
	(BuildTimestamp sb)
		
	(#build sb "#include " cppInclude "&n")
	(sb "#include <rococo.domme.h>&n&n")

	(sb "using namespace Rococo;&n")
	(sb "using namespace Rococo::Domme;&n&n")	
			
	(#build sb "namespace " cppNamespace "::Implementation&n")
	
	(sb "{&n")
	(#build sb "&tstruct " implementationClass " : " interfaceName "Supervisor&n")
	(sb "&t{&n")
	(sb "&t&tDommeObject D;&n&n")
	
	(#build sb "&t&t" implementationClass "(ScriptingResources& _scripting, cstr sourceName) : D(_scripting, sourceName, &"" sxyNamespace "&", &"" interfaceName "&")&n")
	(sb "&t&t{&n")
	
	(Sys.Sexml.ISEXMLAttribute methods = (interfaceDirective.FindAttribute "Methods"))
		
	// (' Methods ...)
	(Sys.Reflection.IExpression sMethods = methods.S)
	(for (Int32 i = 2)(i < sMethods.ChildCount)(i += 1)
		(Sys.Reflection.IExpression sMethod = (sMethods.Child i))
		(AssertCompound sMethod "Method spec - (Method-Name (input1...)(input2...)->(return-expression)). void methods omit the output indicator '->' and the return-expression")
		
		(IString methodName = (GetAtomicWithAssert sMethod 0 "Expecting method name"))
		(IString methodVariableName = (ToCamelCase methodName))		
		
		(Int32 nInputs)
		(Int32 nOutputs)
		(CountInputAndOutputs sMethod -> nInputs nOutputs)
		(#build sb "&t&t&t" methodVariableName "Index = D.GetMethodIndex(&"" methodName "&", " nInputs ", " nOutputs ");&n")
	)
	
	(sb "&t&t}&n&n")
	
	(#build sb "&t&t&~" implementationClass "()&n")
	(sb "&t&t{&n")
	(sb "&t&t}&n&n&n")
	
	(sb "&t&tvoid SV_Free() override&n")
	(sb "&t&t{&n")
	(sb "&t&t&tdelete this;&n")
	(sb "&t&t}&n&n")
	(sb "&t&tvoid SV_Terminate() override&n")
	(sb "&t&t{&n")
	(sb "&t&t&tD.Terminate();&n")
	(sb "&t&t}&n")
	
	(for (i = 2)(i < sMethods.ChildCount)(i += 1)
		(Sys.Reflection.IExpression sMethod = (sMethods.Child i))
		(AssertCompound sMethod "Method spec - (Method-Name (input1...)(input2...)->(return-expression)). void methods omit the output indicator '->' and the return-expression")
		
		(IString methodName = (GetAtomicWithAssert sMethod 0 "Expecting method name"))
		(IString methodVariableName = (ToCamelCase methodName))		
		
		(#build sb "&n&t&tint " methodVariableName "Index = -1;&n&n")
		
		(IStringBuilder args = (Sys.Type.NewStringBuilder 256))

		(BuildMethodArgsCPP dc methodName sMethod args false)
		
		(#build sb "&t&t" args " override&n")
		(sb "&t&t{&n")
		
		(BuildMarshallingCPP dc methodVariableName sMethod sb)
		(sb "&t&t}&n")
	)
	
	(sb "&t};&n")
	(sb "}&n&n")
	
	(#build sb "namespace " cppNamespace "&n")
	(sb "{&n")
	(#build sb "&t" interfaceName "Supervisor* " dc.factoryPrefix implementationClass "(ScriptingResources&& scripting, cstr sourceFile)&n")
	(sb "&t{&n")
	(#build sb "&t&treturn new Implementation::" implementationClass "(scripting, sourceFile);&n")
	(sb "&t}&n")
	(sb "}&n&n")
		
	// define our tab here as four spaces
	(sb.Replace 0 "&t" "    ")
	(#printf sb)
	
	(OverwriteIfDifferent cppSourceTarget sb)
)

(function GetFirstChar (IString s) -> (Int32 codePoint):
	(codePoint = (s 0))
)

(function EscapeCPPString (Sys.Type.IStringBuilder argBuilder)(IString s)(Sys.Reflection.IExpression source) -> :
	(argBuilder "&"")
	
	(argBuilder.SetFormat 2 2 true false)
	
	(for (Int32 i = 0)(i < s.Length)(i += 1)
		(Int32 codePoint = (s i))
		
		(#Sys.Type.Strings.CharMatch codePoint
			("&"" (argBuilder "\&""))
			("\" (argBuilder "\\"))
			("&r" (argBuilder "\r"))
			("&n" (argBuilder "\n"))
			("&t" (argBuilder "\t"))
		else
			(if (codePoint >= 32)
				(argBuilder.AppendChar codePoint)
			else				
				(argBuilder "\x")
				(argBuilder Sys.Type.Formatters.Hex)
				(argBuilder codePoint)
			)
		)
	)
	
	(argBuilder "&"")
	
	(argBuilder.SetFormat 0 0 false false)
)

(function BuildMethodInputArgCPP (DommeContext dc) (Sys.Reflection.IExpression sParameter)(Sys.Type.IStringBuilder argBuilder)(Bool includeDefaultValues)-> :
// sParameter will be of form (const <typename> <variableName) = <defaultValue>)
// The const and default values may be omitted. 
	(Bool expectingType = true)
	(Bool expectingName = true)
	(Bool expectingDefaultAssignment = true)

	(for (Int32 i = 0)(i < sParameter.ChildCount)(i += 1)
		(IString q = (GetAtomicWithAssert sParameter i "Expecting atomic qualifier to method argument"))
		(Sys.Reflection.IExpression sQ = (sParameter i))
		
		(if (#eq q "const")
			(argBuilder "const ")
		else
			(if expectingType
				(expectingType = false)
				
				(Sys.Type.Domme.ITypeDef typedefArgType = (dc.typedefs.Find q))
				(if (not (typedefArgType ?))
					(sQ.Throw 0 "Could not match type to a typedef")
				)
				
				(IString cppTypeAndRef = typedefArgType.CppTypeAndRef)
				
				(argBuilder cppTypeAndRef)
			
			else 
				(if expectingName
					(expectingName = false)
					(argBuilder " ")
					(argBuilder q)
				
				else
					(if (not includeDefaultValues)
						(return)
					)
					
					(if expectingDefaultAssignment
						(if (#eq q "=")
							(expectingDefaultAssignment = false)
							(argBuilder " = ")
							(Sys.Reflection.IExpression sDefault = (sParameter (i + 1)))
							(if (not (sDefault ?))
								(sQ.Throw 0 "Expecting default value to follow the assignment operator")
							)
							
							(if (sDefault.Type == (#Sys.Reflection.ExpressionTypeAtomic))
								(argBuilder sDefault.Text)
							else 
								(if (sDefault.Type == (#Sys.Reflection.ExpressionTypeString))
									(EscapeCPPString argBuilder sDefault.Text sDefault)
									(argBuilder "_fstring")
								else
									(sDefault.Throw 0 "Expecting atomic or string literal as the default value")
								)
							)
							
							(break)
							
						else
							(sQ.Throw 0 "Expecting assignment operator '=' to follow the variable name")
						)
					)
				)
			)
		)
	)
)

(function BuildMethodInputArgSXY (DommeContext dc) (Sys.Reflection.IExpression sParameter)(Sys.Type.IStringBuilder argBuilder)-> :
// sParameter will be of form (const <typename> <variableName) = <defaultValue>)
// The const and default values may be omitted. 
	(Bool expectingType = true)
	(Bool expectingName = true)
	(Bool expectingDefaultAssignment = true)
	
	(argBuilder "(")

	(for (Int32 i = 0)(i < sParameter.ChildCount)(i += 1)
		(IString q = (GetAtomicWithAssert sParameter i "Expecting atomic qualifier to method argument"))
		(Sys.Reflection.IExpression sQ = (sParameter i))
		
		(if (#eq q "const")
			(argBuilder "const ")
		else
			(if expectingType
				(expectingType = false)
				
				(Sys.Type.Domme.ITypeDef typedefArgType = (dc.typedefs.Find q))
				(if (not (typedefArgType ?))
					(sQ.Throw 0 "Could not match type to a typedef")
				)
				
				(IString sxyTypeAndRef = typedefArgType.SxyType)
							
				(argBuilder sxyTypeAndRef)
			
			else 
				(if expectingName
					(expectingName = false)
					(argBuilder " ")
					(argBuilder q)
					(argBuilder ")")
				else
					(return)
				)
			)
		)
	)
)

(function BuildMethodOutputArgCPP (DommeContext dc) (Sys.Reflection.IExpression sParameter)(Sys.Type.IStringBuilder argsBuilder)-> :
	(if (not (sParameter ?))
		(argsBuilder "void")
	)
	
	(if (sParameter.ChildCount != 2)
		(sParameter.Throw 0 "Expecting two arguments to the output specification (<type> <name>. C++ will use the name as a comment, while sxy will use it to name the output parameter")
	)
	
	(Sys.Reflection.IExpression sOutputType = (sParameter 0))
	(Sys.Reflection.IExpression sOutputName = (sParameter 1))
	
	(IString type = (GetAtomicWithAssert sParameter 0 "<type> must be an atomic expression"))
	(IString name = (GetAtomicWithAssert sParameter 1 "<name> must be an atomic expression"))
	
	(#build argsBuilder type " /* " name " */")
)

(function IsAtomicMatch (Sys.Reflection.IExpression s)(IString target) -> (Bool isMatch):
	(if (s.Type == (#Sys.Reflection.ExpressionTypeAtomic))
		(isMatch = (#eq s.Text target))
	)
)

(function FindTopLevelAtomic (Sys.Reflection.IExpression s)(IString target) -> (Int32 index):
	(for (Int32 i = 0)(i < s.ChildCount)(i += 1)
		(Sys.Reflection.IExpression child = (s i))
		(if (IsAtomicMatch child target)
			(index = i)
			(return)
		)
	)
	
	(index = -1)
)

(function BuildMethodOutputArgSXY (DommeContext dc) (Sys.Reflection.IExpression sParameter)(Sys.Type.IStringBuilder argsBuilder)-> :
	(Sys.Reflection.IExpression sOutputType = (sParameter 0))
	(Sys.Reflection.IExpression sOutputName = (sParameter 1))
	
	(IString type = (GetAtomicWithAssert sParameter 0 "<type> must be an atomic expression"))
	(IString name = (GetAtomicWithAssert sParameter 1 "<name> must be an atomic expression"))
	
	(Sys.Type.Domme.ITypeDef typedef = (dc.typedefs.Find type))
	(#build argsBuilder "(" typedef.SxyType " " name ")")
)

(function BuildMethodArgsCPP (DommeContext dc) (IString name) (Sys.Reflection.IExpression sMethod)(Sys.Type.IStringBuilder argsBuilder)(Bool includeDefaultValues)-> :
	
	// (<method-name> (<qualifiers>... <type> <variable-name> = <default>) ... -> (<qualifiers> <return-type> <variable-name>))
	// E.g (StartWater (const Pressure& pressure)(float temperature)->(float flow_rate)), which will get converted on the argsBuilder as: 'float /* flow_rate */ StartWater(const Pressure& pressure, float temperature)'
	 
	(Int32 outputIndicator = (FindTopLevelAtomic sMethod "->"))
	
	(if (outputIndicator > -1)
		(Sys.Reflection.IExpression outParameter = (sMethod (outputIndicator + 1)))
		(BuildMethodOutputArgCPP dc outParameter argsBuilder)
	else
		(argsBuilder "void")
		(outputIndicator = sMethod.ChildCount)
	)

	(#build argsBuilder " " name "(")

	(for (Int32 i = 1)(i < outputIndicator)(i += 1)
		(Sys.Reflection.IExpression parameter = (sMethod i))
			
		(if (parameter.Type == (#Sys.Reflection.ExpressionTypeCompound))
			(if (i > 1)
				(argsBuilder ", ")
			)
			
			(BuildMethodInputArgCPP dc parameter argsBuilder includeDefaultValues)
		else 
			(parameter.Throw 0 "Unexpected non-compound expression")
		)		
	)
	
	(argsBuilder ")")
)

(function BuildMethodArgsSXY (DommeContext dc) (IString name) (Sys.Reflection.IExpression sMethod)(Sys.Type.IStringBuilder argsBuilder)-> :
	
	// (<method-name> (<qualifiers>... <type> <variable-name> = <default>) ... -> (<qualifiers> <return-type> <variable-name>))
	// E.g (StartWater (const Pressure& pressure)(float temperature)->(float flow_rate)), which will get converted on the argsBuilder as: 'float /* flow_rate */ StartWater(const Pressure& pressure, float temperature)'
	 
	(Int32 outputIndicator = (FindTopLevelAtomic sMethod "->"))
	
	(Sys.Reflection.IExpression outParameter)
	
	(if (outputIndicator > -1)
		(outParameter = (sMethod (outputIndicator + 1)))
	else
		(outputIndicator = sMethod.ChildCount)
	)

	(for (Int32 i = 1)(i < outputIndicator)(i += 1)
		(Sys.Reflection.IExpression parameter = (sMethod i))
			
		(if (parameter.Type == (#Sys.Reflection.ExpressionTypeCompound))
			(argsBuilder " ")
			
			(BuildMethodInputArgSXY dc parameter argsBuilder)
		else 
			(parameter.Throw 0 "Unexpected non-compound expression")
		)		
	)
	
	(argsBuilder " -> ")
	
	(if (outParameter ?)
		(BuildMethodOutputArgSXY dc outParameter argsBuilder)
	)
)

(function BuildMarshalMethodOutputArgCPP (Sys.Reflection.IExpression outParameter)(Sys.Type.IStringBuilder marshalBuilder) -> :
)

(function GetMethodElementsCPP (Sys.Type.Domme.ITypeDefs typedefs) (Sys.Reflection.IExpression inParameter)-> (IString varType)(IString varName)(Bool isStructType) :
	// inParameter: (<optional-const> <type> <name> = <optional-default>)
	
	(Int32 nameIndex = 1)
	
	(if (inParameter.Type != (#Sys.Reflection.ExpressionTypeCompound))
		(inParameter.Throw 0 "Expecting compound statement for inParameter")
	)
	
	(GetAtomicWithAssert inParameter 0 "Expecting const or type" -> varType)
	(if (#eq varType "const")
		(GetAtomicWithAssert inParameter 1 "Expecting type" -> varType)
		(nameIndex += 1)
	)
	
	(GetAtomicWithAssert inParameter nameIndex "Expecting variable name" -> varName)
	
	(Sys.Type.Domme.ITypeDef typedef = (typedefs.Find varType))
	(if (typedef.Type == (#Sys.Type.Domme.TypeDefStructType))
		(isStructType = true)
	)
)

(function BuildMarshallingCPP (DommeContext dc) (IString methodVariableName) (Sys.Reflection.IExpression sMethod)(Sys.Type.IStringBuilder marshalBuilder)-> :
	
	// (<method-name> (<qualifiers>... <type> <variable-name> = <default>) ... -> (<qualifiers> <return-type> <variable-name>))
	
	(marshalBuilder "&t&t&tREGISTER_DOMME_CALL(D);&n&n")
	
	(Int32 outputIndicator = (FindTopLevelAtomic sMethod "->"))
	
	(IString outVarType)
	(IString outVarName)
	(Bool isStructType)
	
	(if (outputIndicator > -1)
		(Sys.Reflection.IExpression outParameter = (sMethod (outputIndicator + 1)))
		(if (outParameter ?)
			(GetMethodElementsCPP dc.typedefs outParameter -> outVarType outVarName isStructType)
			
			(IString marshalledType = (dc.typedefs.MarshalCppName outVarType))
			
			(#build marshalBuilder "&t&t&t" marshalledType " _vm_out_" outVarName " = 0;&n")
			(#build marshalBuilder "&t&t&tD.Push(_vm_out_" outVarName ");&n")	
		)
	else
		(sMethod.ChildCount -> outputIndicator)
	)

	(for (Int32 i = 1)(i < outputIndicator)(i += 1)
		(Sys.Reflection.IExpression inParameter = (sMethod i))
			
		(IString varType)
		(IString varName)
		(GetMethodElementsCPP dc.typedefs inParameter -> varType varName isStructType)
		
		(if isStructType 
			(#build marshalBuilder "&t&t&tD.PushRef(" varName ");&n")
		else
			(Sys.Type.Domme.ITypeDef typeDefVar = dc.typedefs.Find varType)
			(IString cppVarType = (typeDefVar.CppType))
			(if (#eq cppVarType "fstring")
				(#build marshalBuilder "&t&t&tRococo::Compiler::InterfacePointer ip_" varName " = D.MarshalString(" varName ");&n")
				(#build marshalBuilder "&t&t&tD.PushPtr(ip_" varName ");&n")
			else
				(#build marshalBuilder "&t&t&tD.Push(" varName ");&n")
			)
		)
	)
	
	(#build marshalBuilder "&t&t&tD.CallVirtualMethod(" methodVariableName "Index);&n")
	
	(if ((outputIndicator - 1) > 0)
		(#build marshalBuilder "&t&t&tD.PopBytes(" )	
		
		(for (Int32 i = 1)(i < outputIndicator)(i += 1)
			(Sys.Reflection.IExpression inParameter = (sMethod i))
			
			(if (i > 1)
				(marshalBuilder " + ")
			)
				
			(IString varType)
			(IString varName)
			(GetMethodElementsCPP dc.typedefs inParameter -> varType varName isStructType)
			
			(Sys.Type.Domme.ITypeDef typeDefVar = dc.typedefs.Find varType)
			(IString cppVarType = (typeDefVar.CppType))
			(if (#eq cppVarType "fstring")
				(#build marshalBuilder "sizeof(Rococo::Compiler::InterfacePointer)")	
			else
				(#build marshalBuilder "sizeof(" varType ")")	
			)
		)
		
		(marshalBuilder ");&n")
		
		(if (outVarType ?)
			(IString marshalledCppType = (dc.typedefs.MarshalCppName outVarType))
			(#build marshalBuilder "&t&t&t_vm_out_" outVarName " = D.Pop_" marshalledCppType "();&n" )
			(marshalBuilder "&n&t&t&tVALIDATE_REGISTERS;&n")
			(#build marshalBuilder "&t&t&treturn To<" outVarType ">(_vm_out_" outVarName ");&n")
		else
			(marshalBuilder "&n&t&t&tVALIDATE_REGISTERS;&n")
		)
	else
		(marshalBuilder "&n&t&t&tVALIDATE_REGISTERS;&n")
	)
)

(function OverwriteIfDifferent (IString cppHeaderTarget) (IString header)-> :
	(Sys.Type.IStringBuilder sb = (Sys.Type.NewStringBuilder 1))
	(sb.ThrowIfAppendWouldTruncate)
	(Int32 maxKB = 2048)
	
	(Sys.IO.IFileWriter writer)
	
	(Sys.Type.IStringBuilder headerPath = (Sys.Type.NewPathBuilder))
	(headerPath.ThrowIfAppendWouldTruncate)
	
	(Sys.IO.AppendCurrentDirectory headerPath)
	(Sys.IO.AppendDirectorySeparator headerPath)
	(headerPath cppHeaderTarget)
	
	(try
		(
			(Sys.IO.LoadAndAppendToStringBuilder sb headerPath maxKB)
			(if (Sys.Type.Strings.IsExactMatch sb header)
				(return)
			)
			
			(Sys.IO.WriteToFile headerPath -> writer)
		)
	catch e
		(
			(Sys.IO.WriteToFile headerPath -> writer)
		)
	)
	
	(writer header)
)

(function BuildDommeObjectH (DommeContext dc) (Sys.Sexml.ISEXMLDirective domme) -> :
	(IStringBuilder sb = Sys.Type.NewStringBuilder 4096)
	
	(BuildTimestamp sb)
		
	(sb "#pragma once&n&n")	
	(sb "#include <rococo.domme.h>&n&n")
	
	(IString sxyNamespace = (domme.GetAttributeString "SxyNamespace" true))
	(IString cppNamespace = (NamespaceConvertSxyToCpp sxyNamespace))
	
	(Sys.Sexml.ISEXMLDirectiveList dommeSubdirectives = domme.SubDirectives)
	
	(Sys.Sexml.ISEXMLDirective interfaceDirective = (dommeSubdirectives.GetFirstDirective "Interface" true))
	
	(IString interfaceName = (interfaceDirective.GetAttributeString "Name" true))
	(IString implementationClass = (interfaceDirective.GetAttributeString "Implementation" true))
		
	(#build sb "namespace " cppNamespace "&n")
	
	(sb "{&n")
	(#build sb "&tstruct " interfaceName "&n")
	(sb "&t{&n")
	
	(Sys.Sexml.ISEXMLAttribute methods = (interfaceDirective.FindAttribute "Methods"))
	
	// (' Methods ...)
	(Sys.Reflection.IExpression sMethods = methods.S)
	(for (Int32 i = 2)(i < sMethods.ChildCount)(i += 1)
		(Sys.Reflection.IExpression sMethod = (sMethods.Child i))
		(AssertCompound sMethod "Method spec - (Method-Name (input1...)(input2...)->(return-expression)). void methods omit the output indicator '->' and the return-expression")
		
		(IString methodName = (GetAtomicWithAssert sMethod 0 "Expecting method name"))
		(IString methodVariableName = (ToCamelCase methodName))		
		
		(IStringBuilder args = (Sys.Type.NewStringBuilder 256))
		
		(BuildMethodArgsCPP dc methodName sMethod args true)
		
		(#build sb "&t&tvirtual " args " = 0;&n")
	)
	
	(sb "&t};&n&n")
	
	(#build sb "&tstruct " interfaceName "Supervisor: "  interfaceName "&n")
	(sb "&t{&n")
	(sb "&t&tvirtual void SV_Free() = 0;&n")
	(sb "&t&tvirtual void SV_Terminate() = 0;&n")
	(sb "&t};&n&n")
	
	(#build sb "&t" interfaceName "Supervisor* " dc.factoryPrefix implementationClass "(Rococo::Domme::ScriptingResources&& scripting, cstr sourceFile);&n")
	
	(sb "}&n&n")
	
	(#build sb "DECLARE_DOMME_INTERFACE(" cppNamespace "::" interfaceName "Supervisor)&n&n")
	
	(sb.Replace 0 "&t" "    ")
	(#printf sb)
	
	(TargetContext tc = sxyNamespace interfaceName)
	(IString cppHeaderTarget = (GetTargetPath tc interfaceDirective "CppHeaderTarget"))
	(OverwriteIfDifferent cppHeaderTarget sb)
)

(function BuildTimestamp (IStringBuilder sb) -> :
	(sb "// Generated by gen_domme_objects.sxy on ")
	(Sys.Time.AppendCTime sb)
	(sb "&n&n")
)

(function BuildDommeObjectSXY (DommeContext dc) (Sys.Sexml.ISEXMLDirective domme) -> :
	(IStringBuilder sb = Sys.Type.NewStringBuilder 4096)
	
	(BuildTimestamp sb)
		
	(IString sxyNamespace = (domme.GetAttributeString "SxyNamespace" true))
	
	(#build sb "(namespace " sxyNamespace ")&n&n")
	
	(Sys.Sexml.ISEXMLDirectiveList dommeSubdirectives = domme.SubDirectives)
	
	(Sys.Sexml.ISEXMLDirective interfaceDirective = (dommeSubdirectives.GetFirstDirective "Interface" true))
	
	(IString interfaceName = (interfaceDirective.GetAttributeString "Name" true))
			
	(#build sb "(interface " sxyNamespace "." interfaceName "&n")
	
	(Sys.Sexml.ISEXMLAttribute methods = (interfaceDirective.FindAttribute "Methods"))
	
	// (' Methods ...)
	(Sys.Reflection.IExpression sMethods = methods.S)
	(for (Int32 i = 2)(i < sMethods.ChildCount)(i += 1)
		(Sys.Reflection.IExpression sMethod = (sMethods.Child i))
		
		(IString methodName = (GetAtomicWithAssert sMethod 0 "Expecting method name"))
		
		(#build sb "&t(" methodName )
		
		(BuildMethodArgsSXY dc methodName sMethod sb)
		
		(sb ")&n")
	)
	
	(sb ")&n&n")
	
	(sb.Replace 0 "&t" "    ")
	(#printf sb)
	
	(TargetContext tc = sxyNamespace interfaceName)
	(IString sxyTarget = (GetTargetPath tc interfaceDirective "SxyInterfaceTarget"))
	(OverwriteIfDifferent sxyTarget sb)
)

(function Main (Int32 id)->(Int32 exitCode):
	(IString exprPath = (GetCmd "sexml"))
	(if (not (exprPath ?))
		(#printf "Usage: " Sys.IO.ExeName " run=gen_domme_objects.sxy sexml=<domme-sexml-spec-path>")
		(exitCode = -1)
		(return)
	)
	(Sys.Reflection.IExpression expr = (Sys.IO.LoadExpression exprPath))
	(Sys.Sexml.ISEXMLReader reader (Sys.Sexml.ReadSexml expr))
	
	(Sys.Sexml.ISEXMLDirective header = (reader.GetFirstDirective "Header" true))
	
	(IString headerType = (header.GetAttributeString "Type" true))
	(if (#neq headerType "Rococo_Domme")
		(Sys.Reflection.IExpression s = header.S)
		(s.Throw 0 "Cannot find (Type Rococo_Domme) in Header directive")
	)
	
	(IString defaultFactoryPrefix = "New")
			
	(Sys.Type.Domme.ITypeDefs typedefs (Sys.Type.Domme.TypeDefRepo))
	
	(for(Int32 i = 0)(i < reader.DirectiveCount)(i += 1)
		(Sys.Sexml.ISEXMLDirective rootDirective = (reader.Directive i))
		(if (#eq rootDirective.Name "Typedefs")
			(IString typeDefFilename =  (rootDirective.GetAttributeString "PathRelativeToThis" true))
			(typedefs.AddTypedefFile typeDefFilename)
		)
	)
	
	(for(i = 0)(i < reader.DirectiveCount)(i += 1)
		(Sys.Sexml.ISEXMLDirective rootDirective = (reader.Directive i))
		(if (Sys.Type.Strings.IsExactMatch rootDirective.Name "SetDefaults")		
			(defaultFactoryPrefix = (rootDirective.GetAttributeString "CppFactoryPrefix" true))
			(continue)
		)
		
		(DommeContext context = typedefs defaultFactoryPrefix)
		
		(if (Sys.Type.Strings.IsExactMatch rootDirective.Name "Domme")
			(BuildDommeObjectCPP context rootDirective)
			(BuildDommeObjectH context rootDirective)
			(BuildDommeObjectSXY context rootDirective)
			(continue)
		)
	)
)