(using Sys.IO)
(using Sys.Type)

(struct EventObjectArg
	(IString typename)
	(IString variableName)
	(IString defaultValue)
)

(struct EventObject
	(IString evName)
	(array EventObjectArg args)
)

(struct EventObjectArray
	(array EventObject events)
)

(struct EventsContext
	(IString rootPath)
	(IStringBuilder cppBuilder) 
	(IStringBuilder hppBuilder) 
	(IString cppFilename)
	(IString hppFilename)
	(IString hppDeclarations)
	(Bool isEventOpen)	
	(IString currentNamespace)
	(map IString EventObjectArray mapNamespaceToEventObjects)
	(array EventObjectArg currentArgs)
)

(alias EventsContext EntryPoint.EventsContext)

(function StartsWithSlash (IString path)->(Bool result):
	(result = ((Sys.Type.Strings.StartsWith path "/") or (Sys.Type.Strings.StartsWith path "\")))
)

(function EndsWithSlash (IString path)->(Bool result):
	(result = ((Sys.Type.Strings.EndsWith path "/") or (Sys.Type.Strings.EndsWith path "\")))
)

(function Target (EventsContext ec) (IString cppFilePathRelativeRoot)(IString hppFilePathRelativeRoot)(IString hppDeclarationsPathRelativeRoot)-> :
	(if (StartsWithSlash cppFilePathRelativeRoot)
		(
			(#paragraph message "(Target ec '" cppFilePathRelativeRoot "' ...): cpp Path must not begin with a slash")
			(Sys.Throw 0 message)
		)
	)
	
	(if (StartsWithSlash hppFilePathRelativeRoot)
		(
			(#paragraph message  "(Target ec '" hppFilePathRelativeRoot "' ...): hpp path must not begin with a slash")
			(Sys.Throw 0 message)
		)
	)
	
	(if (StartsWithSlash hppDeclarationsPathRelativeRoot)
		(
			(#paragraph message  "(Target ec '" hppDeclarationsPathRelativeRoot "' ...): hpp declarations path must not begin with a slash")
			(Sys.Throw 0 message)
		)
	)
	
	(#path cppPath cppFilePathRelativeRoot)
	(#path hppPath hppFilePathRelativeRoot)
	(#path hppDeclarations hppDeclarationsPathRelativeRoot)
	
	(Sys.Type.Strings.MakeSysSlashes cppPath)
	(Sys.Type.Strings.MakeSysSlashes hppPath)
	(Sys.Type.Strings.MakeSysSlashes hppDeclarations)
	
	(if (ec.cppFilename ?)
		(Sys.Throw 0 "Target defined twice")
	)
	
	(if (ec.hppFilename ?)
		(Sys.Throw 0 "Target defined twice")
	)
	
	(if (ec.hppDeclarations ?)
		(Sys.Throw 0 "Target defined twice")
	)
	
	(ec.cppFilename = cppPath)
	(ec.hppFilename = hppPath)
	(ec.hppDeclarations = hppDeclarations)
)

(function Event (EventsContext ec) (IString evName)-> :
	(EventObject ev)
	(ev.evName = evName)
	(array EventObjectArg args 32)
	(ev.args = args)
	(ec.currentArgs = args)
	
	(node n = (ec.mapNamespaceToEventObjects ec.currentNamespace))
	(EventObjectArray i = & n)
	(i.events.Push ev)
)

(function Arg (EventsContext ec) (IString typeName)(IString variableName)-> :
	(ArgWithDefault ec typeName variableName "")
)

(function ArgWithDefault (EventsContext ec) (IString typeName)(IString variableName)(IString defaultValue)-> :
	(EventObjectArg arg = typeName variableName defaultValue)	
	(ec.currentArgs.Push arg)
)

(function Namespace (EventsContext ec) (IString ns)-> :
	(if (not (ns ?))
		(Sys.Throw 0 "Blank Namespace argument")
	)
	
	(ec.currentNamespace = ns)
	
	(node n = (ec.mapNamespaceToEventObjects ec.currentNamespace))
	(if (not n)
		(EventObjectArray newObjectArray)
		(array EventObject events 1024)
		(newObjectArray.events = events)
		(ec.mapNamespaceToEventObjects.Insert ec.currentNamespace newObjectArray)
	)
)

(namespace EntryPoint)
	(alias Main EntryPoint.Main)
	(alias Namespace EntryPoint.Namespace)
	(alias Event EntryPoint.Event)
	(alias Target EntryPoint.Target)
	(alias Arg EntryPoint.Arg)
	(alias ArgWithDefault EntryPoint.ArgWithDefault)

// Protocol for Sexy Command Line arguments: '<CMD.EXE> run=<script-name> <key1>=<value1> ... <keyN>=<valueN>'
// Where keyI is not required to be unique. Every KeyI should fit a Sexy #token(<64 chars). Every valueI should fit a #paragraph (<1024 chars).
(function GetNextCmdPathValue (Int32 startIndex)(IString key)->(IString value)(Int32 foundIndex):
	(IStringBuilder sbKey = NewTokenBuilder)
	(IStringBuilder sbValue = NewParagraphBuilder)

	(Int32 argc = Sys.IO.GetCmdArgCount)
	(Int32 i = startIndex)
	(while (i < argc)
		(sbKey.Clear)		
		(sbValue.Clear)
		(Sys.IO.AppendCmdKeyAndValue i sbKey sbValue)
		(if ((Sys.Type.Strings.IsExactMatch key sbKey) and (sbValue.Length > 0))
			(if (sbValue.Length > 259)
				(
					(#paragraph message "The path specified for <" key "> was too long (>= 260 chars)")
					(Sys.Throw 0 message)
				)
			)
			(Sys.Type.Strings.Preserve sbValue -> value)
			(foundIndex = i)
			(return)
		)
		(i += 1)
	)
	
	(foundIndex = argc)
)

(function Main -> (Int32 exitCode):
	(try
		(
			(MainProtected)
		)
	catch e 
		(
			(#printf e.Message "&n")
			(exitCode = -1)
		)
	)
)

(function MainProtected -> :
	(IString rootPath)
	(Int32 rootIndex)
	(GetNextCmdPathValue 0 "root" -> rootPath rootIndex)

	(if (not (rootPath ?))
		(Sys.Throw 0 "Command line missing 'root=<ROOT-FILEPATH>'")
	)
	
	(if (not (EndsWithSlash rootPath))
		(Sys.Throw 0 "root did not end with slash: '\' 'root=<ROOT-FILEPATH>'")	
	)

	(GenerateEvents rootPath)
)

(function GenerateEvents (IString rootPath)-> :
	(EventsContext ec)
	(ec.rootPath = rootPath)
	(ec.cppBuilder = (NewStringBuilder 131072))
	(ec.hppBuilder = (NewStringBuilder 131072))
	(map IString EventObjectArray mapNamespaceToEventObjects)
	(ec.mapNamespaceToEventObjects = mapNamespaceToEventObjects)
	
	(EntryPoint.AddEvents ec) // If this causes a problem, it probably means you had this script executed directly. It should only ever be (' #included) by a script that defines EntryPoint.AddEvents

	(SaveFiles ec)
)

(function SaveFiles (EventsContext ec)-> :
	(if (not (ec.hppFilename ?))
		(Sys.Throw 0 "No target specified. the calling script must invoke EntryPoint.Target in AddEvents")
	)
	
	(#path fullCppPath ec.rootPath ec.cppFilename)
	(Sys.IO.IFileWriter cppWriter = (Sys.IO.WriteToFile fullCppPath))
	(IStringBuilder hppPathBuilder = NewPathBuilder)
	(hppPathBuilder ec.cppFilename)
	(hppPathBuilder.Replace 0 ".cpp" ".h")
	(AppendCPPPrelude ec cppWriter ec.hppFilename)
	(cppWriter ec.cppBuilder)		

	(#path fullHppPath ec.rootPath ec.hppFilename)
	(Sys.IO.IFileWriter hppWriter = (Sys.IO.WriteToFile fullHppPath))
	(AppendHPPPrelude ec hppWriter)
	(hppWriter ec.hppBuilder)		
)

(function AppendCPPPrelude (EventsContext ec)(Sys.IO.IFileWriter cpp)(IString associatedHeaderFile) -> :
	(IStringBuilder timestamp = NewTokenBuilder)
	(Sys.OS.AppendCTime timestamp)
	(#build cpp "// Generated: " timestamp "&n&n")
	(#build cpp "#include &"" associatedHeaderFile "&"&n&n")
	(#build cpp "using namespace Rococo;&n&n")
	
	(foreach i # ec.mapNamespaceToEventObjects
		(IString key = i.Key)
		(EventObjectArray eventArray = & i)
		
		(BuildNamespace key eventArray cpp)
	)
)

(function AppendHPPPrelude (EventsContext ec)(Sys.IO.IFileWriter hpp) -> :
	(IStringBuilder timestamp = Sys.Type.NewTokenBuilder)
	(Sys.OS.AppendCTime timestamp)
	(#build hpp "#pragma once&n")
	(#build hpp "// Generated at " timestamp "&n&n")

	(#build hpp "#include &"" ec.hppDeclarations "&"&n&n")
	
	(foreach i # ec.mapNamespaceToEventObjects
		(IString key = i.Key)
		(EventObjectArray eventArray = & i)
		
		(BuildHeaderNamespace key eventArray hpp)
	)
)

(function BuildNamespace (IString key)(EventObjectArray eventArray)(Sys.IO.IFileWriter cpp)-> :
	(#build cpp "namespace " key "&n")
	(#build cpp "{&n")
	
	(foreach event # eventArray.events
		(BuildEvent event cpp)
	)
	
	(#build cpp "}&n&n")
)

(function BuildEvent (EventObject obj)(Sys.IO.IFileWriter cpp)-> :
	(IStringBuilder args = NewParagraphBuilder)
	(BuildArgsList args obj)
	
	(#build cpp "	const EventIdRef EvId_" obj.evName " = &"EvId_" obj.evName "&"_event;&n&n")
	
	(#build cpp "	void Send" obj.evName "(" args ")&n")
	(#build cpp "	{&n")
	(#build cpp "		EvArgs_" obj.evName " args;&n")
	
	(foreach arg # obj.args
		(#build cpp "		args." arg.variableName " = " arg.variableName ";&n")
	)
	
	(#build cpp "		publisher.Publish(args, EvId_" obj.evName ");&n")
	
	(#build cpp "	}&n&n")
	
	(#build cpp "	void Send" obj.evName "Direct(IPublisher&& publisher, EvArgs_" obj.evName "&& args)&n")
	(#build cpp "	{&n")
	(#build cpp "		publisher.Publish(args, EvId_" obj.evName ");&n")
	(#build cpp "	}&n&n")
	
	(#build cpp "	EvArgs_" obj.evName "* As_" obj.evName "(Event&& ev)&n")
	(#build cpp "	{&n")
	(#build cpp "		if (ev == EvId_SetNextLevel)&n")
	(#build cpp "		{&n")
	(#build cpp "			auto&& args = As<EvArgs_"  obj.evName ">(ev);&n")
	(#build cpp "			return &&args;&n")
	(#build cpp "		}&n")
	(#build cpp "&n")	
	(#build cpp "		return nullptr;&n")
	(#build cpp "	}&n")
)

(function BuildArgsList (IStringBuilder sb)(EventObject event)-> :
	(sb.Clear)
	(sb "IPublisher&& publisher")
	
	(foreach arg # event.args
		(#build sb ", " arg.typename " " arg.variableName)
	)
)

(function BuildHeaderNamespace (IString key)(EventObjectArray eventArray)(Sys.IO.IFileWriter hpp)-> :
	(#build hpp "namespace " key "&n")
	(#build hpp "{&n")
	
	(foreach event # eventArray.events
		(BuildHeaderEvent event hpp)
	)
	
	(#build hpp "}&n&n")
)

(function BuildHeaderEvent (EventObject obj)(Sys.IO.IFileWriter hpp)-> :
	(IStringBuilder args = NewParagraphBuilder)
	(BuildArgsList args obj)
	
	(#build hpp "	extern const EventIdRef EvId_" obj.evName ";&n&n")
	
	(#build hpp "	struct EvArgs_" obj.evName ": Rococo::Events::EventArgs&n")
	(#build hpp	"	{&n")	
	(foreach arg # obj.args
		(
	(#build hpp	"		" arg.typename " " arg.variableName ";&n")
		)
	)
	(#build hpp	"	};&n&n")
	
	(#build hpp "	void Send" obj.evName "(" args ");&n")
	(#build hpp "	void Send" obj.evName "Direct(IPublisher&& publisher, EvArgs_" obj.evName "&& args);&n")
	
	(#build hpp "	EvArgs_" obj.evName "* As_" obj.evName "(Event&& ev);&n&n")
	
	(#build hpp "	template<class HANDLER>&n")
	(#build hpp "	void Add(MessageMap<HANDLER>&& map, void (HANDLER::*fn_method)(EvArgs_" obj.evName "&& args))&n")
	(#build hpp "	{&n")
	(#build hpp "		auto* asMethod = reinterpret_cast<MessageMap<HANDLER>::EventHandlerMethod>(fn_method);&n")
	(#build hpp "		map.Add(EvId_SetNextLevel, asMethod);&n")
	(#build hpp "	}&n")
)