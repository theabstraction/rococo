#define ROCOCO_COMPONENTS_CONFIG_API __declspec(dllexport)

#include <components/rococo.components.configuration.h>
#include <rococo.ecs.builder.inl>

namespace Rococo::ECS
{
	using namespace Rococo::Memory;

	template<class T>
	class ComponentFactorySingleton
	{
	};

	IComponentFactory<IConfigurationComponent>* CreateConfigurationFactory();
	
	ComponentTable<IConfigurationComponent> *s_ConfigurationComponentsImplementation = nullptr;

	static bool s_ConfigurationComponentsPhoenixGuard = false;
	static IComponentFactory<IConfigurationComponent>* s_ConfigurationComponentsFactory = nullptr;

	void InitConfigurationComponents()
	{
		if (!s_ConfigurationComponentsImplementation)
		{
			if (s_ConfigurationComponentsPhoenixGuard)
			{
				return;
			}

			s_ConfigurationComponentsFactory = CreateConfigurationFactory();
			s_ConfigurationComponentsImplementation = new ComponentTable<IConfigurationComponent>("Configuration", *s_ConfigurationComponentsFactory);

			struct ANON
			{
				static void FreeConfigurationComponentsSingleton()
				{
					if (s_ConfigurationComponentsImplementation)
					{
						delete s_ConfigurationComponentsImplementation;
						s_ConfigurationComponentsFactory->Free();
						s_ConfigurationComponentsFactory = nullptr;
						s_ConfigurationComponentsImplementation = nullptr;
						s_ConfigurationComponentsPhoenixGuard = true;
					}
				}
			};
			atexit(ANON::FreeConfigurationComponentsSingleton);
		}
		else
		{
			Throw(0, "%s: ConfigurationComponents has already been initialized", __FUNCTION__);
		}
	}

	ComponentTable<IConfigurationComponent>& GetConfigurationComponents()
	{
		if (!s_ConfigurationComponentsImplementation)
		{
			InitConfigurationComponents();
		}
		return *s_ConfigurationComponentsImplementation;
	}
}

namespace Rococo::ECS
{
	ROCOCO_COMPONENTS_CONFIG_API Ref<IConfigurationComponent> AddConfigurationComponent(ROID id)
	{
		struct ANON : IECS_ROID_LockedSection
		{
			Ref<IConfigurationComponent> newRef;

			ANON()
			{

			}

			void OnLock(ROID roid, IECS& ecs) override
			{
				UNUSED(ecs);
				newRef = GetConfigurationComponents().AddNew(roid);
			}
		} locked_section;

		GetConfigurationComponents().ECS().TryLockedOperation(id, locked_section);

		// I am generated by code, and I know what I am doing
		return locked_section.newRef;
	}

	ROCOCO_COMPONENTS_CONFIG_API void ConfigurationComponent_LinkToECS(IECS* ecs)
	{
		GetConfigurationComponents().Link(ecs);
	}
}