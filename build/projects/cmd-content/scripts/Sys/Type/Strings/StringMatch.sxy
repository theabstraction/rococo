(using Sys.Reflection)
(using Sys.Type)

(function BuildStringMatch (IExpression in)(IExpressionBuilder out)-> :
	(if (in.ChildCount < 3)
		(in.Throw 0 "Expecting at least 3 children: (#Sys.Type.Strings.StringMatch <text-variable> (key1 (command1 ...))(key2 (command2 ...)))")
	)
	
	(IExpression variableName = (in 1))
	
	(if (variableName.Type != (#Sys.Reflection.ExpressionTypeAtomic))
		(variableName.Throw 0 "Expecting atomic value for <text-variable>")
	)
	
	(for (Int32 i = 2)(i < in.ChildCount)(i += 1)
		(IExpression matchLineCommand = (in i))
		
		(if (matchLineCommand.ChildCount < 2)
			(matchLineCommand.Throw 0 "Expecting more than one expression on the StringMatch line")
		)
		
		(IExpression key = (matchLineCommand 0))
		
		(IExpressionBuilder owner = out)
		
		(Int32 matchType = key.Type)
		
		(if ((matchType == (#Sys.Reflection.ExpressionTypeString)) or (matchType == (#Sys.Reflection.ExpressionTypeAtomic)))
			(Sys.Type.IString keyName = key.Text)
			(IExpressionBuilder matchImpl = owner.AddCompound)
			(matchImpl.AddAtomic "if")
				(IExpressionBuilder booleanImpl = matchImpl.AddCompound)
					// (if ((Sys.Type.Strings.Compare (key) target)== 0) ... else...)
					(IExpressionBuilder compareInvocationImpl = booleanImpl.AddCompound)
						(compareInvocationImpl.AddAtomic "Sys.Type.Strings.Compare")
							(IExpressionBuilder variableWrapper = compareInvocationImpl.AddCompound)		
								(variableWrapper.AddAtomic variableName.Text)
							(IExpressionBuilder keyWrapper = compareInvocationImpl.AddCompound)
								(keyWrapper.AddStringLiteral keyName)							
					(booleanImpl.AddAtomic "==")
					(booleanImpl.AddAtomic "0")
					
				(for (Int32 j = 1)(j < matchLineCommand.ChildCount)(j += 1)
					(matchImpl.Copy (matchLineCommand j))
				)
				
				(matchImpl.AddAtomic "else")
				(owner = matchImpl)			
		else
			(key.Throw 0 "StringMatch Key: Expecting atomic or string literal")
		)
	)
)

/*  Executes the command expressions with the matching key. Atomic or string literals are both legitimate values
	usage: 
	(#Sys.Type.Strings.StringMatch text-variable
		(key1 (commands...))
		...
		(keyN (commands...))
	)
	
	Example:
	(IString answer = "Yes")
	(#Sys.StringMatch answer
		(Yes (#print "You typed yes"))
		("No"  (#print "You typed no"))
	) 
	
	the above emits "You typed yes"
*/
(macro Sys.Type.Strings.StringMatch in out
	(Sys.ValidateSubscriptRange in.ChildCount 3 1000000 "Usage: (#Sys.Type.Strings.StringMatch text-variable (key1 (command...)(key2 (command ...))))")
	(BuildStringMatch in out)
)

(function StartsWithChar (Int32 codePointChar)(IString s)->(Bool isTrue):
	(Int32 firstCharCodePoint = (s 0))
	(isTrue = (codePointChar == firstCharCodePoint))
)

(alias StartsWithChar Sys.Type.Strings.StartsWithChar)

(function BuildCharMatch (IExpression in)(IExpressionBuilder out)-> :
	(if (in.ChildCount < 3)
		(in.Throw 0 "Expecting at least 3 children: (#Sys.Type.Strings.CharMatch <int32 codepoint> (key1 (command1 ...))(key2 (command2 ...)))")
	)
	
	(Sys.Type.IStringBuilder labelName = (Sys.Type.NewTokenBuilder))
	(labelName.SetFormat 0 0 false false)
	(labelName "bcmEnd")
	(labelName Sys.Maths.I64.GenUnique)
	
	(IExpression codePointName = (in 1))
	
	(if (codePointName.Type != (#Sys.Reflection.ExpressionTypeAtomic))
		(codePointName.Throw 0 "Expecting atomic value for <int32 codepoint>")
	)
	
	(for (Int32 i = 2)(i < in.ChildCount)(i += 1)
		(IExpression matchLineCommand = (in i))
		
		(if (matchLineCommand.Type == (#Sys.Reflection.ExpressionTypeAtomic))
			(if (Sys.Type.Strings.IsExactMatch "else" matchLineCommand.Text)
				// we found the finalizing else clause, so all that remains to do is append the remaining expressions onto the end 
				(i += 1)
				(while (i < in.ChildCount)
					(out.Copy (in i))
					(i += 1)
				)
				
				(break)
			else
				(matchLineCommand.Throw 0 "Expecting either a compound match statement or an 'else' atomic expression")
			)
		)
		
		(if (matchLineCommand.ChildCount < 2)
			(matchLineCommand.Throw 0 "Expecting more than one expression on the CharMatch line")
		)
		
		(IExpression key = (matchLineCommand 0))
		
		(IExpressionBuilder owner = out)
		
		(Int32 matchType = key.Type)
		
		(if ((matchType == (#Sys.Reflection.ExpressionTypeString)) or (matchType == (#Sys.Reflection.ExpressionTypeAtomic)))
			(Sys.Type.IString keyName = key.Text)
			(IExpressionBuilder matchImpl = owner.AddCompound)
			(matchImpl.AddAtomic "if")
				(IExpressionBuilder booleanImpl = matchImpl.AddCompound)
					// (if ((Sys.Type.Strings.Compare (key) target)== 0) ... else...)
					(IExpressionBuilder compareInvocationImpl = booleanImpl.AddCompound)
						(compareInvocationImpl.AddAtomic "Sys.Type.Strings.StartsWithChar")
							(IExpressionBuilder variableWrapper = compareInvocationImpl.AddCompound)		
								(variableWrapper.AddAtomic codePointName.Text)
							(IExpressionBuilder keyWrapper = compareInvocationImpl.AddCompound)
								(keyWrapper.AddStringLiteral keyName)							
					
				(for (Int32 j = 1)(j < matchLineCommand.ChildCount)(j += 1)
					(matchImpl.Copy (matchLineCommand j))
				)
				
				(IExpressionBuilder jump = matchImpl.AddCompound)
				(jump.AddAtomic "goto")
				(jump.AddAtomic labelName)
				(owner = matchImpl)			
		else
			(key.Throw 0 "Key: Expecting atomic or string literal")
		)
	)
	
	(IExpressionBuilder finalLabel = out.AddCompound)
	(finalLabel.AddAtomic "label")
	(finalLabel.AddAtomic labelName)
)

/*  Executes the command expressions with the matching key. Atomic or string literals are both legitimate values
	usage: 
	(#Sys.StringMatch text-variable
		(key1 (commands...))
		...
		(keyN (commands...))
	)
	
	Example:
	(IString answer = "Yes")
	(#Sys.StringMatch answer
		(Yes (#print "You typed yes"))
		("No"  (#print "You typed no"))
	) 
	
	the above emits "You typed yes"
*/
(macro Sys.Type.Strings.CharMatch in out
	(Sys.ValidateSubscriptRange in.ChildCount 3 1000000 "Usage: (#Sys.Type.Strings.CharMatch int32-codepoint-variable (key1 (command...)(key2 (command ...))))")
	(BuildCharMatch in out)
)

(macro Sys.Type.eq in out
	(Sys.ValidateSubscriptRange in.ChildCount 3 3 "Usage: (#Sys.Type.eq <string-a> <string-b>")
	(out.AddAtomic "Sys.Type.Strings.IsExactMatch")
	(out.Copy (in 1))
	(out.Copy (in 2))
)


(macro Sys.Type.neq in out
	(Sys.ValidateSubscriptRange in.ChildCount 3 3 "Usage: (#Sys.Type.neq <string-a> <string-b>) // compares two strings using Sys.Type.Strings.IsExactMatch and returns the negation")
	(out.AddAtomic "not")
	(Sys.Reflection.IExpressionBuilder fCallExpr = out.AddCompound)
	(fCallExpr.AddAtomic "Sys.Type.Strings.IsExactMatch")
	(fCallExpr.Copy (in 1))
	(fCallExpr.Copy (in 2))
)