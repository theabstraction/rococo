#pragma once
// Generated by rococo.carpenter. Timestamp: 08 September 2022 18:52:45// Excel Source: C:\work\rococo\tables\XL\localization-text-table.xlsx

#include <tables/rococo.carpenter.test.declarations.h>
#include <rococo.types.h>

Rococo::Strings::ILocalizedText_Sexy* FactoryConstructRococoStringsLocalizedText(Rococo::IInstallation* installation);

namespace Rococo::Strings
{

    enum class TextId: int
    {
        None, Introduction_MarcusAndronicus
    };

    bool AppendString(TextId value, Strings::IStringPopulator& populator);
    bool TryParse(const fstring& text, TextId& result);
    tuple<boolean32,TextId> TryParseTextId(const fstring& text);
    fstring ToString(TextId value);

    struct LocalizedTextRow
    {
        TextId id;
        fstring english;
        fstring german;
    };

    #pragma pack(push,4)
    struct LocalizedTextRowSexy
    {
        TextId id;
        Rococo::Script::InterfacePointerToStringBuilder english;
        Rococo::Script::InterfacePointerToStringBuilder german;
    };
    #pragma pack(pop)
}

#include "rococo.carpenter.test.sxh.h"

namespace Rococo::Strings
{
    ROCOCOAPI ILocalizedText_MetaData
    {
        virtual fstring GetTitle() const = 0;
        virtual fstring GetOwner() const = 0;
    };

    ROCOCOAPI ILocalizedText
    {
        virtual ILocalizedText_Sexy& GetSexyInterface() = 0;
        virtual const LocalizedTextRow& GetRow(int32 index) const = 0;
        virtual const int32 NumberOfRows() const = 0;
        virtual const LocalizedTextRow* begin() const = 0;
        virtual const LocalizedTextRow* end() const = 0;
        virtual const ILocalizedText_MetaData& Meta() const = 0;
    };

    ILocalizedText& LocalizedText();
}
