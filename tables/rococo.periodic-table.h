#pragma once
// Generated by rococo.carpenter. Timestamp: 20/03/2022 17:56:02
// Excel Source: C:\work\rococo\tables\periodic-table.xlsx

#include <rococo.types.h>

namespace Rococo::Science::Materials
{
    enum class ElementName: int
    {
        None, 
        Hydrogen, 
        Helium, 
        Lithium, 
        Beryllium, 
        Boron, 
        Carbon, 
        Nitrogen, 
        Oxygen, 
        Fluorine, 
        Neon, 
        Sodium, 
        Magnesium, 
        Aluminum, 
        Silicon, 
        Phosphorus, 
        Sulfur, 
        Chlorine, 
        Argon, 
        Potassium, 
        Calcium, 
        Scandium, 
        Titanium, 
        Vanadium, 
        Chromium, 
        Manganese, 
        Iron, 
        Cobalt, 
        Nickel, 
        Copper, 
        Zinc, 
        Gallium, 
        Germanium, 
        Arsenic, 
        Selenium, 
        Bromine, 
        Krypton, 
        Rubidium, 
        Strontium, 
        Yttrium, 
        Zirconium, 
        Niobium, 
        Molybdenum, 
        Technetium, 
        Ruthenium, 
        Rhodium, 
        Palladium, 
        Silver, 
        Cadmium, 
        Indium, 
        Tin, 
        Antimony, 
        Tellurium, 
        Iodine, 
        Xenon, 
        Cesium, 
        Barium, 
        Lanthanum, 
        Cerium, 
        Praseodymium, 
        Neodymium, 
        Promethium, 
        Samarium, 
        Europium, 
        Gadolinium, 
        Terbium, 
        Dysprosium, 
        Holmium, 
        Erbium, 
        Thulium, 
        Ytterbium, 
        Lutetium, 
        Hafnium, 
        Tantalum, 
        Wolfram, 
        Rhenium, 
        Osmium, 
        Iridium, 
        Platinum, 
        Gold, 
        Mercury, 
        Thallium, 
        Lead, 
        Bismuth, 
        Polonium, 
        Astatine, 
        Radon, 
        Francium, 
        Radium, 
        Actinium, 
        Thorium, 
        Protactinium, 
        Uranium, 
        Neptunium, 
        Plutonium, 
        Americium, 
        Curium, 
        Berkelium, 
        Californium, 
        Einsteinium, 
        Fermium, 
        Mendelevium, 
        Nobelium, 
        Lawrencium, 
        Rutherfordium, 
        Dubnium, 
        Seaborgium, 
        Bohrium, 
        Hassium, 
        Meitnerium, 
        Darmstadtium, 
        Roentgenium, 
        Copernicium, 
        Nihonium, 
        Flerovium, 
        Moscovium, 
        Livermorium, 
        Tennessine, 
        Oganesson
    };

    bool TryParse(const fstring& text, ElementName& result);

    enum class ElementSymbol: int
    {
        None, 
        H, 
        He, 
        Li, 
        Be, 
        B, 
        C, 
        N, 
        O, 
        F, 
        Ne, 
        Na, 
        Mg, 
        Al, 
        Si, 
        P, 
        S, 
        Cl, 
        Ar, 
        K, 
        Ca, 
        Sc, 
        Ti, 
        V, 
        Cr, 
        Mn, 
        Fe, 
        Co, 
        Ni, 
        Cu, 
        Zn, 
        Ga, 
        Ge, 
        As, 
        Se, 
        Br, 
        Kr, 
        Rb, 
        Sr, 
        Y, 
        Zr, 
        Nb, 
        Mo, 
        Tc, 
        Ru, 
        Rh, 
        Pd, 
        Ag, 
        Cd, 
        In, 
        Sn, 
        Sb, 
        Te, 
        I, 
        Xe, 
        Cs, 
        Ba, 
        La, 
        Ce, 
        Pr, 
        Nd, 
        Pm, 
        Sm, 
        Eu, 
        Gd, 
        Tb, 
        Dy, 
        Ho, 
        Er, 
        Tm, 
        Yb, 
        Lu, 
        Hf, 
        Ta, 
        W, 
        Re, 
        Os, 
        Ir, 
        Pt, 
        Au, 
        Hg, 
        Tl, 
        Pb, 
        Bi, 
        Po, 
        At, 
        Rn, 
        Fr, 
        Ra, 
        Ac, 
        Th, 
        Pa, 
        U, 
        Np, 
        Pu, 
        Am, 
        Cm, 
        Bk, 
        Cf, 
        Es, 
        Fm, 
        Md, 
        No, 
        Lr, 
        Rf, 
        Db, 
        Sg, 
        Bh, 
        Hs, 
        Mt, 
        Ds, 
        Rg, 
        Cn, 
        Nh, 
        Fl, 
        Mc, 
        Lv, 
        Ts, 
        Og
    };

    bool TryParse(const fstring& text, ElementSymbol& result);

    enum class ElementType: int
    {
        None, 
        Nonmetal, 
        NobleGas, 
        AlkaliMetal, 
        AlkalineEarthMetal, 
        Metalloid, 
        Halogen, 
        Metal, 
        TransitionMetal, 
        Lanthanide, 
        Actinide, 
        Transactinide
    };

    bool TryParse(const fstring& text, ElementType& result);

    struct PeriodicTable_Row
    {
        int32 atomicNumber;
        ElementName element;
        ElementSymbol symbol;
        float atomicMass;
        bool metal;
        ElementType elementType;
        float electroNegativity;
        ElectronVolts firstIonization;
        float density;
        Kelvin meltingPoint;
        Kelvin boilingPoint;
    };

    ROCOCOAPI IPeriodicTable_MetaData
    {
        virtual fstring GetTitle() const = 0;
        virtual fstring GetOwner() const = 0;
        virtual fstring GetURL() const = 0;
    };

    ROCOCOAPI IPeriodicTable
    {
        virtual const PeriodicTable_Row& GetRow(int32 index) const = 0;
        virtual const int32 NumberOfRows() const = 0;
        virtual const PeriodicTable_Row* begin() const = 0;
        virtual const PeriodicTable_Row* end() const = 0;
        virtual const IPeriodicTable_MetaData& Meta() const = 0;
    };

    IPeriodicTable& GetPeriodicTable();
}
